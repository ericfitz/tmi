// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiInfoStatusCode.
const (
	ERROR ApiInfoStatusCode = "ERROR"
	OK    ApiInfoStatusCode = "OK"
)

// Defines values for AuthorizationRole.
const (
	Owner  AuthorizationRole = "owner"
	Reader AuthorizationRole = "reader"
	Writer AuthorizationRole = "writer"
)

// Defines values for ThreatSeverity.
const (
	Critical ThreatSeverity = "Critical"
	High     ThreatSeverity = "High"
	Low      ThreatSeverity = "Low"
	Medium   ThreatSeverity = "Medium"
	None     ThreatSeverity = "None"
	Unknown  ThreatSeverity = "Unknown"
)

// Defines values for ThreatModelThreatModelFramework.
const (
	CIA     ThreatModelThreatModelFramework = "CIA"
	DIE     ThreatModelThreatModelFramework = "DIE"
	LINDDUN ThreatModelThreatModelFramework = "LINDDUN"
	PLOT4ai ThreatModelThreatModelFramework = "PLOT4ai"
	STRIDE  ThreatModelThreatModelFramework = "STRIDE"
)

// Defines values for PatchThreatModelsThreatModelIdJSONBodyOp.
const (
	PatchThreatModelsThreatModelIdJSONBodyOpAdd     PatchThreatModelsThreatModelIdJSONBodyOp = "add"
	PatchThreatModelsThreatModelIdJSONBodyOpCopy    PatchThreatModelsThreatModelIdJSONBodyOp = "copy"
	PatchThreatModelsThreatModelIdJSONBodyOpMove    PatchThreatModelsThreatModelIdJSONBodyOp = "move"
	PatchThreatModelsThreatModelIdJSONBodyOpRemove  PatchThreatModelsThreatModelIdJSONBodyOp = "remove"
	PatchThreatModelsThreatModelIdJSONBodyOpReplace PatchThreatModelsThreatModelIdJSONBodyOp = "replace"
	PatchThreatModelsThreatModelIdJSONBodyOpTest    PatchThreatModelsThreatModelIdJSONBodyOp = "test"
)

// Defines values for PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp.
const (
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpAdd     PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "add"
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpCopy    PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "copy"
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpMove    PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "move"
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpRemove  PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "remove"
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpReplace PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "replace"
	PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOpTest    PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp = "test"
)

// ApiInfo API information response for the root endpoint
type ApiInfo struct {
	Api struct {
		// Specification URL to the API specification
		Specification string `json:"specification"`

		// Version API version
		Version string `json:"version"`
	} `json:"api"`
	Operator *struct {
		// Contact Operator contact information from environment variables
		Contact string `json:"contact"`

		// Name Operator name from environment variables
		Name string `json:"name"`
	} `json:"operator,omitempty"`
	Service struct {
		// Build Current build number
		Build string `json:"build"`

		// Name Name of the service
		Name string `json:"name"`
	} `json:"service"`
	Status struct {
		// Code Status code indicating if the API is functioning correctly
		Code ApiInfoStatusCode `json:"code"`

		// Time Current server time in UTC, formatted as RFC 3339
		Time time.Time `json:"time"`
	} `json:"status"`
}

// ApiInfoStatusCode Status code indicating if the API is functioning correctly
type ApiInfoStatusCode string

// Authorization A user-role pair defining access permissions
type Authorization struct {
	// Role Role: reader (view), writer (edit), owner (full control)
	Role AuthorizationRole `json:"role"`

	// Subject Username or identifier of the user (may be email address or other format)
	Subject string `json:"subject"`
}

// AuthorizationRole Role: reader (view), writer (edit), owner (full control)
type AuthorizationRole string

// Cell defines model for Cell.
type Cell struct {
	// Edge Indicates if the cell is an edge (true) or not (false).
	Edge bool `json:"edge"`

	// Geometry The cell's geometry (position and size), typically for vertices; null for edges.
	Geometry *struct {
		// Height Height of the cell.
		Height float32 `json:"height"`

		// Metadata Key-value pairs for additional cell metadata
		Metadata *[]Metadata `json:"metadata,omitempty"`

		// Width Width of the cell.
		Width float32 `json:"width"`

		// X X-coordinate of the cell's top-left corner.
		X float32 `json:"x"`

		// Y Y-coordinate of the cell's top-left corner.
		Y float32 `json:"y"`
	} `json:"geometry"`

	// Id Unique identifier of the cell (vertex or edge).
	Id string `json:"id"`

	// Parent ID of the parent cell (for grouping); null if no parent.
	Parent *string `json:"parent"`

	// Source ID of the source vertex (for edges); null for vertices.
	Source *string `json:"source"`

	// Style The style string defining the cell's appearance (e.g., CSS-like properties).
	Style *string `json:"style"`

	// Target ID of the target vertex (for edges); null for vertices.
	Target *string `json:"target"`

	// Value The label or value associated with the cell (optional for edges).
	Value *string `json:"value"`

	// Vertex Indicates if the cell is a vertex (true) or not (false).
	Vertex bool `json:"vertex"`
}

// CollaborationSession Details of an active collaboration session for a diagram
type CollaborationSession struct {
	// DiagramId UUID of the associated diagram
	DiagramId openapi_types.UUID `json:"diagram_id"`

	// Participants List of active participants
	Participants []struct {
		// JoinedAt Join timestamp
		JoinedAt *time.Time `json:"joined_at,omitempty"`

		// UserId Username or identifier of the participant (may be email address or other format)
		UserId *string `json:"user_id,omitempty"`
	} `json:"participants"`

	// SessionId Unique identifier for the session
	SessionId string `json:"session_id"`

	// ThreatModelId UUID of the associated threat model
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// WebsocketUrl WebSocket URL for real-time updates
	WebsocketUrl string `json:"websocket_url"`
}

// Diagram A diagram object supporting collaborative editing
type Diagram struct {
	// CreatedAt Creation timestamp (ISO8601)
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the diagram
	Description *string `json:"description,omitempty"`

	// GraphData List of graph cells
	GraphData *[]Cell `json:"graphData,omitempty"`

	// Id Unique identifier for the diagram
	Id openapi_types.UUID `json:"id"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (ISO8601)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Version Diagram version number
	Version *float32 `json:"version,omitempty"`
}

// Error Standard error response format
type Error struct {
	// Error Error code
	Error string `json:"error"`

	// Message Error description
	Message string `json:"message"`
}

// ListItem A simplified item for list endpoints, containing name and ID
type ListItem struct {
	// Id Unique identifier of the resource
	Id openapi_types.UUID `json:"id"`

	// Name Name of the resource
	Name string `json:"name"`
}

// Metadata A key-value pair for extensible metadata
type Metadata struct {
	// Key Metadata key
	Key string `json:"key"`

	// Value Metadata value
	Value string `json:"value"`
}

// Threat A threat within a threat model
type Threat struct {
	// CellId UUID of the associated cell (if applicable)
	CellId *openapi_types.UUID `json:"cell_id,omitempty"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the threat
	Description *string `json:"description,omitempty"`

	// DiagramId UUID of the associated diagram (if applicable)
	DiagramId *openapi_types.UUID `json:"diagram_id,omitempty"`

	// Id Unique identifier for the threat
	Id openapi_types.UUID `json:"id"`

	// IssueUrl URL to an issue in an issue tracking system for this threat
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// Mitigated Whether the threat has been mitigated
	Mitigated *bool `json:"mitigated,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority *string `json:"priority,omitempty"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatSeverity `json:"severity"`

	// Status Current status of the threat
	Status *string `json:"status,omitempty"`

	// ThreatModelId UUID of the parent threat model
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatSeverity Severity level of the threat
type ThreatSeverity string

// ThreatModel A threat model object for documenting threats
type ThreatModel struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy Username or identifier of the creator of the threat model
	CreatedBy string `json:"created_by"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Diagrams List of diagram UUIDs associated with this threat model
	Diagrams *[]openapi_types.UUID `json:"diagrams,omitempty"`

	// Id Unique identifier for the threat model
	Id openapi_types.UUID `json:"id"`

	// IssueUrl URL to an issue in an issue tracking system for this threat model
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat model
	Name string `json:"name"`

	// Owner Username or identifier of the current owner (may be email address or other format)
	Owner string `json:"owner"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework ThreatModelThreatModelFramework `json:"threat_model_framework"`

	// Threats List of threats within the threat model
	Threats *[]Threat `json:"threats,omitempty"`
}

// ThreatModelThreatModelFramework The framework used for this threat model
type ThreatModelThreatModelFramework string

// GetAuthCallbackParams defines parameters for GetAuthCallback.
type GetAuthCallbackParams struct {
	// Code Authorization code from the OAuth provider
	Code string `form:"code" json:"code"`

	// State Optional state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// GetAuthLoginParams defines parameters for GetAuthLogin.
type GetAuthLoginParams struct {
	// RedirectUri Optional URI to redirect to after login
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetThreatModelsParams defines parameters for GetThreatModels.
type GetThreatModelsParams struct {
	// Limit Number of threat models to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostThreatModelsJSONBody defines parameters for PostThreatModels.
type PostThreatModelsJSONBody struct {
	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Name Name of the threat model
	Name string `json:"name"`
}

// PatchThreatModelsThreatModelIdJSONBody defines parameters for PatchThreatModelsThreatModelId.
type PatchThreatModelsThreatModelIdJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelsThreatModelIdJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelsThreatModelIdJSONBodyOp defines parameters for PatchThreatModelsThreatModelId.
type PatchThreatModelsThreatModelIdJSONBodyOp string

// GetThreatModelsThreatModelIdDiagramsParams defines parameters for GetThreatModelsThreatModelIdDiagrams.
type GetThreatModelsThreatModelIdDiagramsParams struct {
	// Limit Number of diagrams to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostThreatModelsThreatModelIdDiagramsJSONBody defines parameters for PostThreatModelsThreatModelIdDiagrams.
type PostThreatModelsThreatModelIdDiagramsJSONBody struct {
	// Description Description of the diagram
	Description *string `json:"description,omitempty"`

	// Name Name of the diagram
	Name string `json:"name"`
}

// PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBody defines parameters for PatchThreatModelsThreatModelIdDiagramsDiagramId.
type PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp defines parameters for PatchThreatModelsThreatModelIdDiagramsDiagramId.
type PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBodyOp string

// PostThreatModelsJSONRequestBody defines body for PostThreatModels for application/json ContentType.
type PostThreatModelsJSONRequestBody PostThreatModelsJSONBody

// PatchThreatModelsThreatModelIdJSONRequestBody defines body for PatchThreatModelsThreatModelId for application/json ContentType.
type PatchThreatModelsThreatModelIdJSONRequestBody = PatchThreatModelsThreatModelIdJSONBody

// PutThreatModelsThreatModelIdJSONRequestBody defines body for PutThreatModelsThreatModelId for application/json ContentType.
type PutThreatModelsThreatModelIdJSONRequestBody = ThreatModel

// PostThreatModelsThreatModelIdDiagramsJSONRequestBody defines body for PostThreatModelsThreatModelIdDiagrams for application/json ContentType.
type PostThreatModelsThreatModelIdDiagramsJSONRequestBody PostThreatModelsThreatModelIdDiagramsJSONBody

// PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONRequestBody defines body for PatchThreatModelsThreatModelIdDiagramsDiagramId for application/json ContentType.
type PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONRequestBody = PatchThreatModelsThreatModelIdDiagramsDiagramIdJSONBody

// PutThreatModelsThreatModelIdDiagramsDiagramIdJSONRequestBody defines body for PutThreatModelsThreatModelIdDiagramsDiagramId for application/json ContentType.
type PutThreatModelsThreatModelIdDiagramsDiagramIdJSONRequestBody = Diagram

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	GetApiInfo(ctx echo.Context) error
	// Handle OAuth callback
	// (GET /auth/callback)
	GetAuthCallback(ctx echo.Context, params GetAuthCallbackParams) error
	// Initiate OAuth login
	// (GET /auth/login)
	GetAuthLogin(ctx echo.Context, params GetAuthLoginParams) error
	// Logout user
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// List threat models
	// (GET /threat_models)
	GetThreatModels(ctx echo.Context, params GetThreatModelsParams) error
	// Create a threat model
	// (POST /threat_models)
	PostThreatModels(ctx echo.Context) error
	// Delete a threat model
	// (DELETE /threat_models/{threat_model_id})
	DeleteThreatModelsThreatModelId(ctx echo.Context, threatModelId openapi_types.UUID) error
	// Retrieve a threat model
	// (GET /threat_models/{threat_model_id})
	GetThreatModelsThreatModelId(ctx echo.Context, threatModelId openapi_types.UUID) error
	// Partially update a threat model
	// (PATCH /threat_models/{threat_model_id})
	PatchThreatModelsThreatModelId(ctx echo.Context, threatModelId openapi_types.UUID) error
	// Update a threat model
	// (PUT /threat_models/{threat_model_id})
	PutThreatModelsThreatModelId(ctx echo.Context, threatModelId openapi_types.UUID) error
	// List diagrams for a threat model
	// (GET /threat_models/{threat_model_id}/diagrams)
	GetThreatModelsThreatModelIdDiagrams(ctx echo.Context, threatModelId openapi_types.UUID, params GetThreatModelsThreatModelIdDiagramsParams) error
	// Create a diagram for a threat model
	// (POST /threat_models/{threat_model_id}/diagrams)
	PostThreatModelsThreatModelIdDiagrams(ctx echo.Context, threatModelId openapi_types.UUID) error
	// Delete a diagram
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id})
	DeleteThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Retrieve a diagram
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id})
	GetThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Partially update a diagram
	// (PATCH /threat_models/{threat_model_id}/diagrams/{diagram_id})
	PatchThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Update a diagram
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id})
	PutThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Leave collaboration session
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	DeleteThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Get collaboration session status
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	GetThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
	// Join or start collaboration session
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	PostThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiInfo(ctx)
	return err
}

// GetAuthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthCallback(ctx, params)
	return err
}

// GetAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthLoginParams
	// ------------- Optional query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthLogin(ctx, params)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetThreatModels converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModels(ctx, params)
	return err
}

// PostThreatModels converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreatModels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostThreatModels(ctx)
	return err
}

// DeleteThreatModelsThreatModelId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThreatModelsThreatModelId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteThreatModelsThreatModelId(ctx, threatModelId)
	return err
}

// GetThreatModelsThreatModelId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModelsThreatModelId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModelsThreatModelId(ctx, threatModelId)
	return err
}

// PatchThreatModelsThreatModelId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchThreatModelsThreatModelId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchThreatModelsThreatModelId(ctx, threatModelId)
	return err
}

// PutThreatModelsThreatModelId converts echo context to params.
func (w *ServerInterfaceWrapper) PutThreatModelsThreatModelId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutThreatModelsThreatModelId(ctx, threatModelId)
	return err
}

// GetThreatModelsThreatModelIdDiagrams converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModelsThreatModelIdDiagrams(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelsThreatModelIdDiagramsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModelsThreatModelIdDiagrams(ctx, threatModelId, params)
	return err
}

// PostThreatModelsThreatModelIdDiagrams converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreatModelsThreatModelIdDiagrams(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostThreatModelsThreatModelIdDiagrams(ctx, threatModelId)
	return err
}

// DeleteThreatModelsThreatModelIdDiagramsDiagramId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteThreatModelsThreatModelIdDiagramsDiagramId(ctx, threatModelId, diagramId)
	return err
}

// GetThreatModelsThreatModelIdDiagramsDiagramId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModelsThreatModelIdDiagramsDiagramId(ctx, threatModelId, diagramId)
	return err
}

// PatchThreatModelsThreatModelIdDiagramsDiagramId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchThreatModelsThreatModelIdDiagramsDiagramId(ctx, threatModelId, diagramId)
	return err
}

// PutThreatModelsThreatModelIdDiagramsDiagramId converts echo context to params.
func (w *ServerInterfaceWrapper) PutThreatModelsThreatModelIdDiagramsDiagramId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutThreatModelsThreatModelIdDiagramsDiagramId(ctx, threatModelId, diagramId)
	return err
}

// DeleteThreatModelsThreatModelIdDiagramsDiagramIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx, threatModelId, diagramId)
	return err
}

// GetThreatModelsThreatModelIdDiagramsDiagramIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx, threatModelId, diagramId)
	return err
}

// PostThreatModelsThreatModelIdDiagramsDiagramIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", ctx.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter threat_model_id: %s", err))
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", ctx.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter diagram_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostThreatModelsThreatModelIdDiagramsDiagramIdCollaborate(ctx, threatModelId, diagramId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetApiInfo)
	router.GET(baseURL+"/auth/callback", wrapper.GetAuthCallback)
	router.GET(baseURL+"/auth/login", wrapper.GetAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/threat_models", wrapper.GetThreatModels)
	router.POST(baseURL+"/threat_models", wrapper.PostThreatModels)
	router.DELETE(baseURL+"/threat_models/:threat_model_id", wrapper.DeleteThreatModelsThreatModelId)
	router.GET(baseURL+"/threat_models/:threat_model_id", wrapper.GetThreatModelsThreatModelId)
	router.PATCH(baseURL+"/threat_models/:threat_model_id", wrapper.PatchThreatModelsThreatModelId)
	router.PUT(baseURL+"/threat_models/:threat_model_id", wrapper.PutThreatModelsThreatModelId)
	router.GET(baseURL+"/threat_models/:threat_model_id/diagrams", wrapper.GetThreatModelsThreatModelIdDiagrams)
	router.POST(baseURL+"/threat_models/:threat_model_id/diagrams", wrapper.PostThreatModelsThreatModelIdDiagrams)
	router.DELETE(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.DeleteThreatModelsThreatModelIdDiagramsDiagramId)
	router.GET(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.GetThreatModelsThreatModelIdDiagramsDiagramId)
	router.PATCH(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.PatchThreatModelsThreatModelIdDiagramsDiagramId)
	router.PUT(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.PutThreatModelsThreatModelIdDiagramsDiagramId)
	router.DELETE(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.DeleteThreatModelsThreatModelIdDiagramsDiagramIdCollaborate)
	router.GET(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.GetThreatModelsThreatModelIdDiagramsDiagramIdCollaborate)
	router.POST(baseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.PostThreatModelsThreatModelIdDiagramsDiagramIdCollaborate)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
