// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiInfoStatusCode.
const (
	ERROR ApiInfoStatusCode = "ERROR"
	OK    ApiInfoStatusCode = "OK"
)

// Defines values for AuthTokenResponseTokenType.
const (
	Bearer AuthTokenResponseTokenType = "Bearer"
)

// Defines values for AuthorizationRole.
const (
	AuthorizationRoleOwner  AuthorizationRole = "owner"
	AuthorizationRoleReader AuthorizationRole = "reader"
	AuthorizationRoleWriter AuthorizationRole = "writer"
)

// Defines values for BaseDiagramType.
const (
	BaseDiagramTypeDFD100 BaseDiagramType = "DFD-1.0.0"
)

// Defines values for CreateDiagramRequestType.
const (
	CreateDiagramRequestTypeDFD100 CreateDiagramRequestType = "DFD-1.0.0"
)

// Defines values for DfdDiagramType.
const (
	DfdDiagramTypeDFD100 DfdDiagramType = "DFD-1.0.0"
)

// Defines values for DiagramListItemType.
const (
	DiagramListItemTypeDFD100 DiagramListItemType = "DFD-1.0.0"
)

// Defines values for EdgeShape.
const (
	EdgeShapeEdge EdgeShape = "edge"
)

// Defines values for EdgeAttrsLineSourceMarkerName.
const (
	EdgeAttrsLineSourceMarkerNameBlock   EdgeAttrsLineSourceMarkerName = "block"
	EdgeAttrsLineSourceMarkerNameCircle  EdgeAttrsLineSourceMarkerName = "circle"
	EdgeAttrsLineSourceMarkerNameClassic EdgeAttrsLineSourceMarkerName = "classic"
	EdgeAttrsLineSourceMarkerNameDiamond EdgeAttrsLineSourceMarkerName = "diamond"
)

// Defines values for EdgeAttrsLineTargetMarkerName.
const (
	EdgeAttrsLineTargetMarkerNameBlock   EdgeAttrsLineTargetMarkerName = "block"
	EdgeAttrsLineTargetMarkerNameCircle  EdgeAttrsLineTargetMarkerName = "circle"
	EdgeAttrsLineTargetMarkerNameClassic EdgeAttrsLineTargetMarkerName = "classic"
	EdgeAttrsLineTargetMarkerNameDiamond EdgeAttrsLineTargetMarkerName = "diamond"
)

// Defines values for EdgeConnector0.
const (
	EdgeConnector0Jumpover EdgeConnector0 = "jumpover"
	EdgeConnector0Normal   EdgeConnector0 = "normal"
	EdgeConnector0Rounded  EdgeConnector0 = "rounded"
	EdgeConnector0Smooth   EdgeConnector0 = "smooth"
)

// Defines values for EdgeConnector1ArgsJump.
const (
	Arc   EdgeConnector1ArgsJump = "arc"
	Cubic EdgeConnector1ArgsJump = "cubic"
	Gap   EdgeConnector1ArgsJump = "gap"
)

// Defines values for EdgeConnector1Name.
const (
	EdgeConnector1NameJumpover EdgeConnector1Name = "jumpover"
	EdgeConnector1NameNormal   EdgeConnector1Name = "normal"
	EdgeConnector1NameRounded  EdgeConnector1Name = "rounded"
	EdgeConnector1NameSmooth   EdgeConnector1Name = "smooth"
)

// Defines values for EdgeRouter0.
const (
	EdgeRouter0Er        EdgeRouter0 = "er"
	EdgeRouter0Manhattan EdgeRouter0 = "manhattan"
	EdgeRouter0Metro     EdgeRouter0 = "metro"
	EdgeRouter0Normal    EdgeRouter0 = "normal"
	EdgeRouter0OneSide   EdgeRouter0 = "oneSide"
	EdgeRouter0Orth      EdgeRouter0 = "orth"
)

// Defines values for EdgeRouter1ArgsDirections.
const (
	EdgeRouter1ArgsDirectionsBottom EdgeRouter1ArgsDirections = "bottom"
	EdgeRouter1ArgsDirectionsLeft   EdgeRouter1ArgsDirections = "left"
	EdgeRouter1ArgsDirectionsRight  EdgeRouter1ArgsDirections = "right"
	EdgeRouter1ArgsDirectionsTop    EdgeRouter1ArgsDirections = "top"
)

// Defines values for EdgeRouter1Name.
const (
	EdgeRouter1NameEr        EdgeRouter1Name = "er"
	EdgeRouter1NameManhattan EdgeRouter1Name = "manhattan"
	EdgeRouter1NameMetro     EdgeRouter1Name = "metro"
	EdgeRouter1NameNormal    EdgeRouter1Name = "normal"
	EdgeRouter1NameOneSide   EdgeRouter1Name = "oneSide"
	EdgeRouter1NameOrth      EdgeRouter1Name = "orth"
)

// Defines values for NodeShape.
const (
	Actor            NodeShape = "actor"
	Process          NodeShape = "process"
	SecurityBoundary NodeShape = "security-boundary"
	Store            NodeShape = "store"
	TextBox          NodeShape = "text-box"
)

// Defines values for ParticipantPermissions.
const (
	ParticipantPermissionsReader ParticipantPermissions = "reader"
	ParticipantPermissionsWriter ParticipantPermissions = "writer"
)

// Defines values for PortConfigurationGroupsPosition.
const (
	PortConfigurationGroupsPositionBottom PortConfigurationGroupsPosition = "bottom"
	PortConfigurationGroupsPositionLeft   PortConfigurationGroupsPosition = "left"
	PortConfigurationGroupsPositionRight  PortConfigurationGroupsPosition = "right"
	PortConfigurationGroupsPositionTop    PortConfigurationGroupsPosition = "top"
)

// Defines values for SourceParametersRefType.
const (
	Branch SourceParametersRefType = "branch"
	Commit SourceParametersRefType = "commit"
	Tag    SourceParametersRefType = "tag"
)

// Defines values for SourceType.
const (
	Git       SourceType = "git"
	Mercurial SourceType = "mercurial"
	Other     SourceType = "other"
	Svn       SourceType = "svn"
)

// Defines values for ThreatSeverity.
const (
	ThreatSeverityCritical ThreatSeverity = "Critical"
	ThreatSeverityHigh     ThreatSeverity = "High"
	ThreatSeverityLow      ThreatSeverity = "Low"
	ThreatSeverityMedium   ThreatSeverity = "Medium"
	ThreatSeverityNone     ThreatSeverity = "None"
	ThreatSeverityUnknown  ThreatSeverity = "Unknown"
)

// Defines values for ThreatBaseSeverity.
const (
	ThreatBaseSeverityCritical ThreatBaseSeverity = "Critical"
	ThreatBaseSeverityHigh     ThreatBaseSeverity = "High"
	ThreatBaseSeverityLow      ThreatBaseSeverity = "Low"
	ThreatBaseSeverityMedium   ThreatBaseSeverity = "Medium"
	ThreatBaseSeverityNone     ThreatBaseSeverity = "None"
	ThreatBaseSeverityUnknown  ThreatBaseSeverity = "Unknown"
)

// Defines values for PatchThreatModelApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp.
const (
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpAdd     BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "add"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpCopy    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "copy"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpMove    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "move"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpRemove  BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "remove"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpReplace BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "replace"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpTest    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "test"
)

// Defines values for PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "test"
)

// ApiInfo API information response for the root endpoint
type ApiInfo struct {
	Api struct {
		// Specification URL to the API specification
		Specification string `json:"specification"`

		// Version API version
		Version string `json:"version"`
	} `json:"api"`
	Operator struct {
		// Contact Operator contact information from environment variables
		Contact string `json:"contact"`

		// Name Operator name from environment variables
		Name string `json:"name"`
	} `json:"operator"`
	Service struct {
		// Build Current build number
		Build string `json:"build"`

		// Name Name of the service
		Name string `json:"name"`
	} `json:"service"`
	Status struct {
		// Code Status code indicating if the API is functioning correctly
		Code ApiInfoStatusCode `json:"code"`

		// Time Current server time in UTC, formatted as RFC 3339
		Time time.Time `json:"time"`
	} `json:"status"`
}

// ApiInfoStatusCode Status code indicating if the API is functioning correctly
type ApiInfoStatusCode string

// AuthTokenResponse JWT token response for authentication endpoints
type AuthTokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token"`

	// TokenType Token type
	TokenType AuthTokenResponseTokenType `json:"token_type"`
}

// AuthTokenResponseTokenType Token type
type AuthTokenResponseTokenType string

// Authorization A user-role pair defining access permissions
type Authorization struct {
	// Role Role: reader (view), writer (edit), owner (full control)
	Role AuthorizationRole `binding:"required" json:"role"`

	// Subject Email address or identifier of the authorized user (may be email address or other format)
	Subject string `binding:"required" json:"subject"`
}

// AuthorizationRole Role: reader (view), writer (edit), owner (full control)
type AuthorizationRole string

// BaseDiagram Base diagram object with common properties
type BaseDiagram struct {
	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type BaseDiagramType `json:"type"`
}

// BaseDiagramType Type of diagram with version
type BaseDiagramType string

// Cell Base schema for all diagram cells (nodes and edges) fully compatible with AntV X6 graph library. This schema includes all X6 native properties plus convenience properties for easier integration. X6-specific properties like markup, tools, router, and connector are supported for advanced customization.
type Cell struct {
	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Cell_Data `json:"data,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Shape Shape type identifier that determines cell structure and behavior
	Shape string `json:"shape"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Cell_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Cell_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CellTool Interactive tool configuration for X6 cells
type CellTool struct {
	// Args Tool-specific configuration arguments
	Args *map[string]interface{} `json:"args,omitempty"`

	// Name Tool identifier (e.g., 'boundary', 'button', 'remove')
	Name string `json:"name"`
}

// CollaborationSession Details of an active collaboration session for a diagram
type CollaborationSession struct {
	// DiagramId Unique identifier of the associated diagram (UUID)
	DiagramId openapi_types.UUID `json:"diagram_id"`

	// DiagramName Name of the associated diagram
	DiagramName string `json:"diagram_name"`

	// Host Email address of the session host
	Host *string `json:"host,omitempty"`

	// Participants List of active participants
	Participants []Participant `json:"participants"`

	// Presenter Email address of the current presenter
	Presenter *string `json:"presenter,omitempty"`

	// SessionId Unique identifier for the session (UUID)
	SessionId *openapi_types.UUID `json:"session_id,omitempty"`

	// ThreatModelId Unique identifier of the associated threat model (UUID)
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// ThreatModelName Name of the associated threat model
	ThreatModelName string `json:"threat_model_name"`

	// WebsocketUrl WebSocket URL for real-time updates
	WebsocketUrl string `json:"websocket_url"`
}

// CreateDiagramRequest Request body for creating a new diagram - only includes client-provided fields
type CreateDiagramRequest struct {
	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type CreateDiagramRequestType `json:"type"`
}

// CreateDiagramRequestType Type of diagram with version
type CreateDiagramRequestType string

// DfdDiagram defines model for DfdDiagram.
type DfdDiagram struct {
	// Cells List of diagram cells (nodes and edges) following X6 structure
	Cells []DfdDiagram_Cells_Item `json:"cells"`

	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type DFD diagram type with version
	Type DfdDiagramType `json:"type"`
}

// DfdDiagram_Cells_Item defines model for DfdDiagram.cells.Item.
type DfdDiagram_Cells_Item struct {
	union json.RawMessage
}

// DfdDiagramType DFD diagram type with version
type DfdDiagramType string

// Diagram defines model for Diagram.
type Diagram struct {
	union json.RawMessage
}

// DiagramListItem A simplified diagram item for list endpoints, containing id, name, and type
type DiagramListItem struct {
	// Id Unique identifier of the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of the diagram
	Type DiagramListItemType `json:"type"`
}

// DiagramListItemType Type of the diagram
type DiagramListItemType string

// Document defines model for Document.
type Document struct {
	// Description Description of document purpose or content
	Description *string `json:"description"`

	// Id Unique identifier for the document (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional document metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Document name
	Name string `binding:"required" json:"name"`

	// Url URL location of the document
	Url string `binding:"required,url" json:"url"`
}

// Edge defines model for Edge.
type Edge struct {
	// Attrs Visual styling attributes for the edge
	Attrs *EdgeAttrs `json:"attrs,omitempty"`

	// Connector Edge connector style configuration for visual appearance
	Connector *EdgeConnector `json:"connector,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Edge_Data `json:"data,omitempty"`

	// DefaultLabel Default label configuration applied to edges without explicit labels
	DefaultLabel *EdgeLabel `json:"defaultLabel,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Label Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure
	Label *string `json:"label,omitempty"`

	// Labels Text labels positioned along the edge
	Labels *[]EdgeLabel `json:"labels,omitempty"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Router Edge routing algorithm configuration for path calculation
	Router *EdgeRouter `json:"router,omitempty"`

	// Shape Edge type identifier
	Shape EdgeShape `json:"shape"`

	// Source Source connection point
	Source EdgeTerminal `json:"source"`

	// Style Convenience property: Simplified styling options that automatically create appropriate attrs structure
	Style *struct {
		// FontColor Label text color
		FontColor *string `json:"fontColor,omitempty"`

		// FontSize Label font size in pixels
		FontSize *float32 `json:"fontSize,omitempty"`

		// Stroke Line color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Line dash pattern (e.g., '5 5' for dashed)
		StrokeDasharray *string `json:"strokeDasharray,omitempty"`

		// StrokeWidth Line width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`
	} `json:"style,omitempty"`

	// Target Target connection point
	Target EdgeTerminal `json:"target"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Vertices Intermediate waypoints for edge routing
	Vertices *[]Point `json:"vertices,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Edge_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Edge_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeShape Edge type identifier
type EdgeShape string

// EdgeAttrs Visual attributes for an edge
type EdgeAttrs struct {
	// Line Line styling attributes
	Line *struct {
		// SourceMarker Source marker configuration
		SourceMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineSourceMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"sourceMarker,omitempty"`

		// Stroke Line color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for the line
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Line width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`

		// TargetMarker Arrowhead marker configuration
		TargetMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineTargetMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"targetMarker,omitempty"`
	} `json:"line,omitempty"`
}

// EdgeAttrsLineSourceMarkerName Marker type
type EdgeAttrsLineSourceMarkerName string

// EdgeAttrsLineTargetMarkerName Marker type
type EdgeAttrsLineTargetMarkerName string

// EdgeConnector Edge connector style configuration for visual appearance
type EdgeConnector struct {
	union json.RawMessage
}

// EdgeConnector0 Built-in connector name
type EdgeConnector0 string

// EdgeConnector1 Connector with custom configuration
type EdgeConnector1 struct {
	// Args Connector-specific arguments
	Args *EdgeConnector_1_Args `json:"args,omitempty"`

	// Name Connector style name
	Name EdgeConnector1Name `json:"name"`
}

// EdgeConnector1ArgsJump Jump style for jumpover connectors
type EdgeConnector1ArgsJump string

// EdgeConnector_1_Args Connector-specific arguments
type EdgeConnector_1_Args struct {
	// Jump Jump style for jumpover connectors
	Jump *EdgeConnector1ArgsJump `json:"jump,omitempty"`

	// Precision Precision for smooth connectors
	Precision *float32 `json:"precision,omitempty"`

	// Radius Radius for rounded connectors
	Radius *float32 `json:"radius,omitempty"`

	// Size Jump size for jumpover connectors
	Size                 *float32               `json:"size,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeConnector1Name Connector style name
type EdgeConnector1Name string

// EdgeLabel Label positioned along an edge
type EdgeLabel struct {
	// Attrs Label styling attributes
	Attrs *struct {
		// Text Text styling
		Text *struct {
			// Fill Text color
			Fill *string `json:"fill,omitempty"`

			// FontFamily Font family
			FontFamily *string `json:"fontFamily,omitempty"`

			// FontSize Font size in pixels
			FontSize *float32 `json:"fontSize,omitempty"`

			// Text Label text content
			Text *string `json:"text,omitempty"`
		} `json:"text,omitempty"`
	} `json:"attrs,omitempty"`

	// Position Position along the edge (0 = start, 1 = end)
	Position *float32 `json:"position,omitempty"`
}

// EdgeRouter Edge routing algorithm configuration for pathfinding
type EdgeRouter struct {
	union json.RawMessage
}

// EdgeRouter0 Built-in router name
type EdgeRouter0 string

// EdgeRouter1 Router with custom configuration
type EdgeRouter1 struct {
	// Args Router-specific arguments
	Args *EdgeRouter_1_Args `json:"args,omitempty"`

	// Name Router algorithm name
	Name EdgeRouter1Name `json:"name"`
}

// EdgeRouter1ArgsDirections defines model for EdgeRouter.1.Args.Directions.
type EdgeRouter1ArgsDirections string

// EdgeRouter_1_Args Router-specific arguments
type EdgeRouter_1_Args struct {
	// Directions Allowed routing directions
	Directions *[]EdgeRouter1ArgsDirections `json:"directions,omitempty"`

	// Padding Padding around obstacles for routing
	Padding *float32 `json:"padding,omitempty"`

	// Step Grid step size for orthogonal routing
	Step                 *float32               `json:"step,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeRouter1Name Router algorithm name
type EdgeRouter1Name string

// EdgeTerminal Connection point for an edge (source or target)
type EdgeTerminal struct {
	// Cell ID of the connected node (UUID)
	Cell openapi_types.UUID `json:"cell"`

	// Port ID of the specific port on the node (optional)
	Port *string `json:"port"`
}

// Error Standard error response format
type Error struct {
	// Details Additional context-specific error information
	Details *struct {
		// Code Machine-readable error code for programmatic handling
		Code *string `json:"code,omitempty"`

		// Context Contextual information about the error
		Context *map[string]interface{} `json:"context,omitempty"`

		// Suggestion Human-readable suggestion for resolving the error
		Suggestion *string `json:"suggestion,omitempty"`
	} `json:"details"`

	// Error Error code
	Error string `json:"error"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `json:"error_description"`

	// ErrorUri URI to documentation about the error
	ErrorUri *string `json:"error_uri,omitempty"`
}

// MarkupElement SVG/HTML markup element for custom shape definitions in X6
type MarkupElement struct {
	// Attrs Element attributes and styling properties
	Attrs *map[string]interface{} `json:"attrs,omitempty"`

	// Children Nested child elements
	Children *[]MarkupElement `json:"children,omitempty"`

	// Selector CSS selector for targeting this element in styling
	Selector *string `json:"selector,omitempty"`

	// TagName SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')
	TagName string `json:"tagName"`
}

// Metadata A key-value pair for extensible metadata
type Metadata struct {
	// Key Metadata key
	Key string `binding:"required" json:"key"`

	// Value Metadata value
	Value string `binding:"required" json:"value"`
}

// Node defines model for Node.
type Node struct {
	// Angle Rotation angle in degrees
	Angle *float32 `json:"angle,omitempty"`

	// Attrs Visual styling attributes for the node
	Attrs *NodeAttrs `json:"attrs,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Node_Data `json:"data,omitempty"`

	// Height Height of the node in pixels
	Height float32 `json:"height"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Label Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure
	Label *string `json:"label,omitempty"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Parent ID of the parent cell for nested/grouped nodes (UUID)
	Parent *openapi_types.UUID `json:"parent"`

	// Ports Port configuration for connections
	Ports *PortConfiguration `json:"ports,omitempty"`

	// Position Convenience property: Position as a single object (alternative to separate x/y properties)
	Position *struct {
		// X X coordinate
		X float32 `json:"x"`

		// Y Y coordinate
		Y float32 `json:"y"`
	} `json:"position,omitempty"`

	// Shape Node type determining its visual representation and behavior
	Shape NodeShape `json:"shape"`

	// Size Convenience property: Size as a single object (alternative to separate width/height properties)
	Size *struct {
		// Height Height in pixels
		Height float32 `json:"height"`

		// Width Width in pixels
		Width float32 `json:"width"`
	} `json:"size,omitempty"`

	// Style Convenience property: Simplified styling options that automatically create appropriate attrs structure
	Style *struct {
		// Fill Background fill color
		Fill *string `json:"fill,omitempty"`

		// FontColor Text color
		FontColor *string `json:"fontColor,omitempty"`

		// FontSize Text font size in pixels
		FontSize *float32 `json:"fontSize,omitempty"`

		// Stroke Border/outline color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeWidth Border/outline width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`
	} `json:"style,omitempty"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// Width Width of the node in pixels
	Width float32 `json:"width"`

	// X X coordinate of the node's position
	X float32 `json:"x"`

	// Y Y coordinate of the node's position
	Y float32 `json:"y"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Node_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Node_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NodeShape Node type determining its visual representation and behavior
type NodeShape string

// NodeAttrs Visual attributes for a node
type NodeAttrs struct {
	// Body Body/shape styling attributes
	Body *struct {
		// Fill Fill color
		Fill *string `json:"fill,omitempty"`

		// Stroke Stroke color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for strokes
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Stroke width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`
	} `json:"body,omitempty"`

	// Text Text/label styling attributes
	Text *struct {
		// Fill Text color
		Fill *string `json:"fill,omitempty"`

		// FontFamily Font family
		FontFamily *string `json:"fontFamily,omitempty"`

		// FontSize Font size in pixels
		FontSize *float32 `json:"fontSize,omitempty"`

		// Text Label text content
		Text *string `json:"text,omitempty"`
	} `json:"text,omitempty"`
}

// OAuthProtectedResourceMetadata OAuth 2.0 protected resource metadata as defined in RFC 9728
type OAuthProtectedResourceMetadata struct {
	// AuthorizationServers List of authorization server issuer identifiers that can issue tokens for this resource
	AuthorizationServers *[]string `json:"authorization_servers,omitempty"`

	// BearerMethodsSupported Supported token presentation methods for bearer tokens
	BearerMethodsSupported *[]string `json:"bearer_methods_supported,omitempty"`

	// JwksUri URL of the protected resource's JSON Web Key Set
	JwksUri *string `json:"jwks_uri,omitempty"`

	// Resource The protected resource's resource identifier URL
	Resource string `json:"resource"`

	// ResourceDocumentation URL with information for developers on how to use this protected resource
	ResourceDocumentation *string `json:"resource_documentation,omitempty"`

	// ResourceName Human-readable name of the protected resource
	ResourceName *string `json:"resource_name,omitempty"`

	// ScopesSupported JSON array of OAuth scope values supported by this protected resource
	ScopesSupported *[]string `json:"scopes_supported,omitempty"`

	// TlsClientCertificateBoundAccessTokens Whether the protected resource supports TLS client certificate bound access tokens
	TlsClientCertificateBoundAccessTokens *bool `json:"tls_client_certificate_bound_access_tokens,omitempty"`
}

// PaginatedResponse Paginated response wrapper for list endpoints
type PaginatedResponse struct {
	// Data Array of items for the current page
	Data []map[string]interface{} `json:"data"`

	// Pagination Pagination metadata
	Pagination struct {
		// HasMore Whether there are more items available beyond this page
		HasMore bool `json:"has_more"`

		// Limit Maximum number of items per page
		Limit int `json:"limit"`

		// Offset Number of items skipped from the beginning
		Offset int `json:"offset"`

		// Total Total number of items across all pages
		Total int `json:"total"`
	} `json:"pagination"`
}

// Participant A participant in a collaboration session
type Participant struct {
	// LastActivity Last activity timestamp
	LastActivity time.Time `json:"last_activity"`

	// Permissions Access permissions in the collaboration session
	Permissions ParticipantPermissions `json:"permissions"`

	// User Represents a user in the system
	User User `json:"user"`
}

// ParticipantPermissions Access permissions in the collaboration session
type ParticipantPermissions string

// Point A 2D point with x and y coordinates
type Point struct {
	// X X coordinate
	X float32 `json:"x"`

	// Y Y coordinate
	Y float32 `json:"y"`
}

// PortConfiguration Port configuration for node connections
type PortConfiguration struct {
	// Groups Port group definitions
	Groups *map[string]struct {
		// Position Port position on the node
		Position *PortConfigurationGroupsPosition `json:"position,omitempty"`
	} `json:"groups,omitempty"`

	// Items Individual port instances
	Items *[]struct {
		// Group Port group this port belongs to
		Group string `json:"group"`

		// Id Unique port identifier
		Id string `json:"id"`
	} `json:"items,omitempty"`
}

// PortConfigurationGroupsPosition Port position on the node
type PortConfigurationGroupsPosition string

// Source defines model for Source.
type Source struct {
	// Description Description of the referenced source code
	Description *string `json:"description"`

	// Id Unique identifier for the source code reference (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional source metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name for the source code reference
	Name *string `json:"name,omitempty"`

	// Parameters repo-specific parameters for retrieving the source
	Parameters *struct {
		// RefType Reference type (branch, tag, or commit)
		RefType SourceParametersRefType `json:"refType"`

		// RefValue Reference value (branch name, tag value, or commit id)
		RefValue string `json:"refValue"`

		// SubPath Sub-path within the repository
		SubPath *string `json:"subPath,omitempty"`
	} `json:"parameters,omitempty"`

	// Type Source code repository type
	Type *SourceType `json:"type,omitempty"`

	// Url URL to retrieve the referenced source code
	Url string `json:"url"`
}

// SourceParametersRefType Reference type (branch, tag, or commit)
type SourceParametersRefType string

// SourceType Source code repository type
type SourceType string

// TMListItem Enhanced item for threat model list endpoints with key metadata and counts
type TMListItem struct {
	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy Email address, name or identifier of the creator
	CreatedBy string `json:"created_by"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// DiagramCount Number of diagrams associated with this threat model
	DiagramCount int `json:"diagram_count"`

	// DocumentCount Number of documents associated with this threat model
	DocumentCount int `json:"document_count"`

	// Id Unique identifier of the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUrl URL to an issue in an issue tracking system
	IssueUrl *string `json:"issue_url,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat model
	Name string `json:"name"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// SourceCount Number of source code entries associated with this threat model
	SourceCount int `json:"source_count"`

	// ThreatCount Number of threats defined in this threat model
	ThreatCount int `json:"threat_count"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// Threat defines model for Threat.
type Threat struct {
	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// Id Unique identifier for the threat (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUrl URL to an issue in an issue tracking system for this threat
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatModelId Unique identifier of the parent threat model (UUID)
	ThreatModelId *openapi_types.UUID `json:"threat_model_id,omitempty"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatSeverity Severity level of the threat
type ThreatSeverity string

// ThreatBase Base schema for Threat with client-writable fields
type ThreatBase struct {
	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// IssueUrl URL to an issue in an issue tracking system for this threat
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatBaseSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatBaseSeverity Severity level of the threat
type ThreatBaseSeverity string

// ThreatInput Base schema for Threat with client-writable fields
type ThreatInput = ThreatBase

// ThreatModel defines model for ThreatModel.
type ThreatModel struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy User name, email or identifier of the creator of the threat model
	CreatedBy *string `json:"created_by,omitempty"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Diagrams List of diagram objects associated with this threat model
	Diagrams *[]Diagram `json:"diagrams,omitempty"`

	// Documents List of documents related to the threat model
	Documents *[]Document `json:"documents,omitempty"`

	// Id Unique identifier for the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUrl URL to an issue in an issue tracking system for this threat model
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// SourceCode List of source code repositories related to the threat model
	SourceCode *[]Source `json:"sourceCode,omitempty"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`

	// Threats List of threats within the threat model
	Threats *[]Threat `json:"threats,omitempty"`
}

// ThreatModelBase Base schema for ThreatModel with client-writable fields
type ThreatModelBase struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// IssueUrl URL to an issue in an issue tracking system for this threat model
	IssueUrl *string `json:"issue_url,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// ThreatModelInput Input schema for creating/updating ThreatModel
type ThreatModelInput struct {
	// Authorization List of users and their roles for this threat model
	Authorization *[]Authorization `json:"authorization,omitempty"`

	// Description Description of the threat model and its purpose
	Description *string `json:"description"`

	// IssueUrl URL to an issue in an issue tracking system for this threat model
	IssueUrl *string `json:"issue_url"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `json:"name"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework *string `json:"threat_model_framework,omitempty"`
}

// User Represents a user in the system
type User struct {
	// Email User's email address
	Email string `json:"email"`

	// Name User's display name
	Name string `json:"name"`

	// UserId OAuth provider's unique identifier for the user (from primary provider)
	UserId string `json:"user_id"`
}

// AuthorizeOAuthProviderParams defines parameters for AuthorizeOAuthProvider.
type AuthorizeOAuthProviderParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`

	// ClientCallback Client callback URL where TMI should redirect after successful OAuth completion with tokens as query parameters. If not provided, tokens are returned as JSON response.
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`

	// State CSRF protection state parameter. Recommended for security. Will be included in the callback response.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// LoginHint User identity hint for test OAuth provider. Allows specifying a desired user identity for testing and automation. Only supported by the test provider (ignored by production providers like Google, GitHub, etc.). Must be 3-20 characters, alphanumeric and hyphens only.
	LoginHint *string `form:"login_hint,omitempty" json:"login_hint,omitempty"`

	// Scope OAuth 2.0 scope parameter. For OpenID Connect, must include "openid". Supports "profile" and "email" scopes. Other scopes are silently ignored. Space-separated values.
	Scope string `form:"scope" json:"scope"`
}

// HandleOAuthCallbackParams defines parameters for HandleOAuthCallback.
type HandleOAuthCallbackParams struct {
	// Code Authorization code from the OAuth provider
	Code string `form:"code" json:"code"`

	// State Optional state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// IntrospectTokenFormdataBody defines parameters for IntrospectToken.
type IntrospectTokenFormdataBody struct {
	// Token The JWT token to introspect
	Token string `form:"token" json:"token"`

	// TokenTypeHint Optional hint about the type of token being introspected
	TokenTypeHint *string `form:"token_type_hint,omitempty" json:"token_type_hint,omitempty"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	// RefreshToken Valid refresh token
	RefreshToken string `json:"refresh_token"`
}

// LogoutUserJSONBody defines parameters for LogoutUser.
type LogoutUserJSONBody = map[string]interface{}

// ExchangeOAuthCodeJSONBody defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeJSONBody struct {
	// Code Authorization code received from OAuth provider
	Code string `json:"code"`

	// RedirectUri Redirect URI used in the authorization request (must match exactly)
	RedirectUri string `json:"redirect_uri"`

	// State State parameter for CSRF protection (optional but recommended)
	State *string `json:"state,omitempty"`
}

// ExchangeOAuthCodeParams defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`
}

// ListThreatModelsParams defines parameters for ListThreatModels.
type ListThreatModelsParams struct {
	// Limit Number of threat models to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Owner Filter by owner name or email
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// Name Filter by threat model name (partial match)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter by threat model description (partial match)
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// IssueUrl Filter by issue URL (partial match)
	IssueUrl *string `form:"issue_url,omitempty" json:"issue_url,omitempty"`

	// CreatedAfter Filter threat models created after this date (RFC3339 format)
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter threat models created before this date (RFC3339 format)
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// ModifiedAfter Filter threat models modified after this date (RFC3339 format)
	ModifiedAfter *time.Time `form:"modified_after,omitempty" json:"modified_after,omitempty"`

	// ModifiedBefore Filter threat models modified before this date (RFC3339 format)
	ModifiedBefore *time.Time `form:"modified_before,omitempty" json:"modified_before,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelApplicationJSONPatchPlusJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBodyOp string

// GetThreatModelDiagramsParams defines parameters for GetThreatModelDiagrams.
type GetThreatModelDiagramsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                   `json:"from,omitempty"`
	Op    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                    `json:"path"`
	Value *interface{}                                              `json:"value,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateDiagramMetadataJSONBody defines parameters for BulkCreateDiagramMetadata.
type BulkCreateDiagramMetadataJSONBody = []Metadata

// UpdateDiagramMetadataByKeyJSONBody defines parameters for UpdateDiagramMetadataByKey.
type UpdateDiagramMetadataByKeyJSONBody struct {
	// Value Metadata value
	Value string `json:"value"`
}

// GetThreatModelDocumentsParams defines parameters for GetThreatModelDocuments.
type GetThreatModelDocumentsParams struct {
	// Limit Maximum number of documents to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of documents to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelDocumentsJSONBody defines parameters for BulkCreateThreatModelDocuments.
type BulkCreateThreatModelDocumentsJSONBody = []Document

// BulkCreateDocumentMetadataJSONBody defines parameters for BulkCreateDocumentMetadata.
type BulkCreateDocumentMetadataJSONBody = []Metadata

// UpdateDocumentMetadataByKeyJSONBody defines parameters for UpdateDocumentMetadataByKey.
type UpdateDocumentMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// BulkCreateThreatModelMetadataJSONBody defines parameters for BulkCreateThreatModelMetadata.
type BulkCreateThreatModelMetadataJSONBody = []Metadata

// UpdateThreatModelMetadataByKeyJSONBody defines parameters for UpdateThreatModelMetadataByKey.
type UpdateThreatModelMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelSourcesParams defines parameters for GetThreatModelSources.
type GetThreatModelSourcesParams struct {
	// Limit Maximum number of sources to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of sources to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelSourcesJSONBody defines parameters for BulkCreateThreatModelSources.
type BulkCreateThreatModelSourcesJSONBody = []Source

// BulkCreateSourceMetadataJSONBody defines parameters for BulkCreateSourceMetadata.
type BulkCreateSourceMetadataJSONBody = []Metadata

// UpdateSourceMetadataByKeyJSONBody defines parameters for UpdateSourceMetadataByKey.
type UpdateSourceMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelThreatsParams defines parameters for GetThreatModelThreats.
type GetThreatModelThreatsParams struct {
	// Limit Maximum number of threats to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of threats to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BatchDeleteThreatModelThreatsParams defines parameters for BatchDeleteThreatModelThreats.
type BatchDeleteThreatModelThreatsParams struct {
	// ThreatIds Comma-separated list of threat IDs to delete (e.g., id1,id2,id3)
	ThreatIds []openapi_types.UUID `form:"threat_ids" json:"threat_ids"`
}

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody defines parameters for BatchPatchThreatModelThreats.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody struct {
	Patches []struct {
		Operations []struct {
			// Op Patch operation type
			Op BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp `json:"op"`

			// Path JSON path to target
			Path string `json:"path"`

			// Value Value to apply
			Value *interface{} `json:"value,omitempty"`
		} `json:"operations"`

		// ThreatId ID of the threat to patch
		ThreatId openapi_types.UUID `json:"threat_id"`
	} `json:"patches"`
}

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp defines parameters for BatchPatchThreatModelThreats.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp string

// BulkCreateThreatModelThreatsJSONBody defines parameters for BulkCreateThreatModelThreats.
type BulkCreateThreatModelThreatsJSONBody = []Threat

// BulkUpdateThreatModelThreatsJSONBody defines parameters for BulkUpdateThreatModelThreats.
type BulkUpdateThreatModelThreatsJSONBody = []Threat

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                  `json:"from,omitempty"`
	Op    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                   `json:"path"`
	Value *interface{}                                             `json:"value,omitempty"`
}

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateThreatMetadataJSONBody defines parameters for BulkCreateThreatMetadata.
type BulkCreateThreatMetadataJSONBody = []Metadata

// UpdateThreatMetadataByKeyJSONBody defines parameters for UpdateThreatMetadataByKey.
type UpdateThreatMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// IntrospectTokenFormdataRequestBody defines body for IntrospectToken for application/x-www-form-urlencoded ContentType.
type IntrospectTokenFormdataRequestBody IntrospectTokenFormdataBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// LogoutUserJSONRequestBody defines body for LogoutUser for application/json ContentType.
type LogoutUserJSONRequestBody = LogoutUserJSONBody

// ExchangeOAuthCodeJSONRequestBody defines body for ExchangeOAuthCode for application/json ContentType.
type ExchangeOAuthCodeJSONRequestBody ExchangeOAuthCodeJSONBody

// CreateThreatModelJSONRequestBody defines body for CreateThreatModel for application/json ContentType.
type CreateThreatModelJSONRequestBody = ThreatModelInput

// PatchThreatModelApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModel for application/json-patch+json ContentType.
type PatchThreatModelApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelApplicationJSONPatchPlusJSONBody

// UpdateThreatModelJSONRequestBody defines body for UpdateThreatModel for application/json ContentType.
type UpdateThreatModelJSONRequestBody = ThreatModelInput

// CreateThreatModelDiagramJSONRequestBody defines body for CreateThreatModelDiagram for application/json ContentType.
type CreateThreatModelDiagramJSONRequestBody = CreateDiagramRequest

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelDiagram for application/json-patch+json ContentType.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody

// UpdateThreatModelDiagramJSONRequestBody defines body for UpdateThreatModelDiagram for application/json ContentType.
type UpdateThreatModelDiagramJSONRequestBody = Diagram

// CreateDiagramMetadataJSONRequestBody defines body for CreateDiagramMetadata for application/json ContentType.
type CreateDiagramMetadataJSONRequestBody = Metadata

// BulkCreateDiagramMetadataJSONRequestBody defines body for BulkCreateDiagramMetadata for application/json ContentType.
type BulkCreateDiagramMetadataJSONRequestBody = BulkCreateDiagramMetadataJSONBody

// UpdateDiagramMetadataByKeyJSONRequestBody defines body for UpdateDiagramMetadataByKey for application/json ContentType.
type UpdateDiagramMetadataByKeyJSONRequestBody UpdateDiagramMetadataByKeyJSONBody

// CreateThreatModelDocumentJSONRequestBody defines body for CreateThreatModelDocument for application/json ContentType.
type CreateThreatModelDocumentJSONRequestBody = Document

// BulkCreateThreatModelDocumentsJSONRequestBody defines body for BulkCreateThreatModelDocuments for application/json ContentType.
type BulkCreateThreatModelDocumentsJSONRequestBody = BulkCreateThreatModelDocumentsJSONBody

// UpdateThreatModelDocumentJSONRequestBody defines body for UpdateThreatModelDocument for application/json ContentType.
type UpdateThreatModelDocumentJSONRequestBody = Document

// CreateDocumentMetadataJSONRequestBody defines body for CreateDocumentMetadata for application/json ContentType.
type CreateDocumentMetadataJSONRequestBody = Metadata

// BulkCreateDocumentMetadataJSONRequestBody defines body for BulkCreateDocumentMetadata for application/json ContentType.
type BulkCreateDocumentMetadataJSONRequestBody = BulkCreateDocumentMetadataJSONBody

// UpdateDocumentMetadataByKeyJSONRequestBody defines body for UpdateDocumentMetadataByKey for application/json ContentType.
type UpdateDocumentMetadataByKeyJSONRequestBody UpdateDocumentMetadataByKeyJSONBody

// CreateThreatModelMetadataJSONRequestBody defines body for CreateThreatModelMetadata for application/json ContentType.
type CreateThreatModelMetadataJSONRequestBody = Metadata

// BulkCreateThreatModelMetadataJSONRequestBody defines body for BulkCreateThreatModelMetadata for application/json ContentType.
type BulkCreateThreatModelMetadataJSONRequestBody = BulkCreateThreatModelMetadataJSONBody

// UpdateThreatModelMetadataByKeyJSONRequestBody defines body for UpdateThreatModelMetadataByKey for application/json ContentType.
type UpdateThreatModelMetadataByKeyJSONRequestBody UpdateThreatModelMetadataByKeyJSONBody

// CreateThreatModelSourceJSONRequestBody defines body for CreateThreatModelSource for application/json ContentType.
type CreateThreatModelSourceJSONRequestBody = Source

// BulkCreateThreatModelSourcesJSONRequestBody defines body for BulkCreateThreatModelSources for application/json ContentType.
type BulkCreateThreatModelSourcesJSONRequestBody = BulkCreateThreatModelSourcesJSONBody

// UpdateThreatModelSourceJSONRequestBody defines body for UpdateThreatModelSource for application/json ContentType.
type UpdateThreatModelSourceJSONRequestBody = Source

// CreateSourceMetadataJSONRequestBody defines body for CreateSourceMetadata for application/json ContentType.
type CreateSourceMetadataJSONRequestBody = Metadata

// BulkCreateSourceMetadataJSONRequestBody defines body for BulkCreateSourceMetadata for application/json ContentType.
type BulkCreateSourceMetadataJSONRequestBody = BulkCreateSourceMetadataJSONBody

// UpdateSourceMetadataByKeyJSONRequestBody defines body for UpdateSourceMetadataByKey for application/json ContentType.
type UpdateSourceMetadataByKeyJSONRequestBody UpdateSourceMetadataByKeyJSONBody

// CreateThreatModelThreatJSONRequestBody defines body for CreateThreatModelThreat for application/json ContentType.
type CreateThreatModelThreatJSONRequestBody = ThreatInput

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody defines body for BatchPatchThreatModelThreats for application/json-patch+json ContentType.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody

// BulkCreateThreatModelThreatsJSONRequestBody defines body for BulkCreateThreatModelThreats for application/json ContentType.
type BulkCreateThreatModelThreatsJSONRequestBody = BulkCreateThreatModelThreatsJSONBody

// BulkUpdateThreatModelThreatsJSONRequestBody defines body for BulkUpdateThreatModelThreats for application/json ContentType.
type BulkUpdateThreatModelThreatsJSONRequestBody = BulkUpdateThreatModelThreatsJSONBody

// PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelThreat for application/json-patch+json ContentType.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelThreatApplicationJSONPatchPlusJSONBody

// UpdateThreatModelThreatJSONRequestBody defines body for UpdateThreatModelThreat for application/json ContentType.
type UpdateThreatModelThreatJSONRequestBody = ThreatInput

// CreateThreatMetadataJSONRequestBody defines body for CreateThreatMetadata for application/json ContentType.
type CreateThreatMetadataJSONRequestBody = Metadata

// BulkCreateThreatMetadataJSONRequestBody defines body for BulkCreateThreatMetadata for application/json ContentType.
type BulkCreateThreatMetadataJSONRequestBody = BulkCreateThreatMetadataJSONBody

// UpdateThreatMetadataByKeyJSONRequestBody defines body for UpdateThreatMetadataByKey for application/json ContentType.
type UpdateThreatMetadataByKeyJSONRequestBody UpdateThreatMetadataByKeyJSONBody

// Getter for additional properties for Cell_Data. Returns the specified
// element and whether it was found
func (a Cell_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cell_Data
func (a *Cell_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a *Cell_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a Cell_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Edge_Data. Returns the specified
// element and whether it was found
func (a Edge_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Edge_Data
func (a *Edge_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a *Edge_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a Edge_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeConnector_1_Args. Returns the specified
// element and whether it was found
func (a EdgeConnector_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeConnector_1_Args
func (a *EdgeConnector_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a *EdgeConnector_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["jump"]; found {
		err = json.Unmarshal(raw, &a.Jump)
		if err != nil {
			return fmt.Errorf("error reading 'jump': %w", err)
		}
		delete(object, "jump")
	}

	if raw, found := object["precision"]; found {
		err = json.Unmarshal(raw, &a.Precision)
		if err != nil {
			return fmt.Errorf("error reading 'precision': %w", err)
		}
		delete(object, "precision")
	}

	if raw, found := object["radius"]; found {
		err = json.Unmarshal(raw, &a.Radius)
		if err != nil {
			return fmt.Errorf("error reading 'radius': %w", err)
		}
		delete(object, "radius")
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &a.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
		delete(object, "size")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a EdgeConnector_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Jump != nil {
		object["jump"], err = json.Marshal(a.Jump)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jump': %w", err)
		}
	}

	if a.Precision != nil {
		object["precision"], err = json.Marshal(a.Precision)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'precision': %w", err)
		}
	}

	if a.Radius != nil {
		object["radius"], err = json.Marshal(a.Radius)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'radius': %w", err)
		}
	}

	if a.Size != nil {
		object["size"], err = json.Marshal(a.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeRouter_1_Args. Returns the specified
// element and whether it was found
func (a EdgeRouter_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeRouter_1_Args
func (a *EdgeRouter_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a *EdgeRouter_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["directions"]; found {
		err = json.Unmarshal(raw, &a.Directions)
		if err != nil {
			return fmt.Errorf("error reading 'directions': %w", err)
		}
		delete(object, "directions")
	}

	if raw, found := object["padding"]; found {
		err = json.Unmarshal(raw, &a.Padding)
		if err != nil {
			return fmt.Errorf("error reading 'padding': %w", err)
		}
		delete(object, "padding")
	}

	if raw, found := object["step"]; found {
		err = json.Unmarshal(raw, &a.Step)
		if err != nil {
			return fmt.Errorf("error reading 'step': %w", err)
		}
		delete(object, "step")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a EdgeRouter_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Directions != nil {
		object["directions"], err = json.Marshal(a.Directions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'directions': %w", err)
		}
	}

	if a.Padding != nil {
		object["padding"], err = json.Marshal(a.Padding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'padding': %w", err)
		}
	}

	if a.Step != nil {
		object["step"], err = json.Marshal(a.Step)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'step': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Node_Data. Returns the specified
// element and whether it was found
func (a Node_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Node_Data
func (a *Node_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a *Node_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a Node_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsNode returns the union data inside the DfdDiagram_Cells_Item as a Node
func (t DfdDiagram_Cells_Item) AsNode() (Node, error) {
	var body Node
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNode overwrites any union data inside the DfdDiagram_Cells_Item as the provided Node
func (t *DfdDiagram_Cells_Item) FromNode(v Node) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNode performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Node
func (t *DfdDiagram_Cells_Item) MergeNode(v Node) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdge returns the union data inside the DfdDiagram_Cells_Item as a Edge
func (t DfdDiagram_Cells_Item) AsEdge() (Edge, error) {
	var body Edge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdge overwrites any union data inside the DfdDiagram_Cells_Item as the provided Edge
func (t *DfdDiagram_Cells_Item) FromEdge(v Edge) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdge performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Edge
func (t *DfdDiagram_Cells_Item) MergeEdge(v Edge) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DfdDiagram_Cells_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DfdDiagram_Cells_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDfdDiagram returns the union data inside the Diagram as a DfdDiagram
func (t Diagram) AsDfdDiagram() (DfdDiagram, error) {
	var body DfdDiagram
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDfdDiagram overwrites any union data inside the Diagram as the provided DfdDiagram
func (t *Diagram) FromDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDfdDiagram performs a merge with any union data inside the Diagram, using the provided DfdDiagram
func (t *Diagram) MergeDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Diagram) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Diagram) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DFD-1.0.0":
		return t.AsDfdDiagram()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Diagram) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Diagram) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeConnector0 returns the union data inside the EdgeConnector as a EdgeConnector0
func (t EdgeConnector) AsEdgeConnector0() (EdgeConnector0, error) {
	var body EdgeConnector0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector0 overwrites any union data inside the EdgeConnector as the provided EdgeConnector0
func (t *EdgeConnector) FromEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector0 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector0
func (t *EdgeConnector) MergeEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeConnector1 returns the union data inside the EdgeConnector as a EdgeConnector1
func (t EdgeConnector) AsEdgeConnector1() (EdgeConnector1, error) {
	var body EdgeConnector1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector1 overwrites any union data inside the EdgeConnector as the provided EdgeConnector1
func (t *EdgeConnector) FromEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector1 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector1
func (t *EdgeConnector) MergeEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeConnector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeConnector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeRouter0 returns the union data inside the EdgeRouter as a EdgeRouter0
func (t EdgeRouter) AsEdgeRouter0() (EdgeRouter0, error) {
	var body EdgeRouter0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter0 overwrites any union data inside the EdgeRouter as the provided EdgeRouter0
func (t *EdgeRouter) FromEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter0 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter0
func (t *EdgeRouter) MergeEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeRouter1 returns the union data inside the EdgeRouter as a EdgeRouter1
func (t EdgeRouter) AsEdgeRouter1() (EdgeRouter1, error) {
	var body EdgeRouter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter1 overwrites any union data inside the EdgeRouter as the provided EdgeRouter1
func (t *EdgeRouter) FromEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter1 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter1
func (t *EdgeRouter) MergeEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeRouter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeRouter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	GetApiInfo(c *gin.Context)
	// JSON Web Key Set
	// (GET /.well-known/jwks.json)
	GetJWKS(c *gin.Context)
	// OAuth 2.0 Authorization Server Metadata
	// (GET /.well-known/oauth-authorization-server)
	GetOAuthAuthorizationServerMetadata(c *gin.Context)
	// OAuth 2.0 Protected Resource Metadata
	// (GET /.well-known/oauth-protected-resource)
	GetOAuthProtectedResourceMetadata(c *gin.Context)
	// OpenID Connect Discovery Configuration
	// (GET /.well-known/openid-configuration)
	GetOpenIDConfiguration(c *gin.Context)
	// List active collaboration sessions
	// (GET /collaboration/sessions)
	GetCollaborationSessions(c *gin.Context)
	// Initiate OAuth authorization flow
	// (GET /oauth2/authorize)
	AuthorizeOAuthProvider(c *gin.Context, params AuthorizeOAuthProviderParams)
	// Handle OAuth callback
	// (GET /oauth2/callback)
	HandleOAuthCallback(c *gin.Context, params HandleOAuthCallbackParams)
	// Token Introspection
	// (POST /oauth2/introspect)
	IntrospectToken(c *gin.Context)
	// List available OAuth providers
	// (GET /oauth2/providers)
	GetAuthProviders(c *gin.Context)
	// Refresh JWT token
	// (POST /oauth2/refresh)
	RefreshToken(c *gin.Context)
	// Logout user
	// (POST /oauth2/revoke)
	LogoutUser(c *gin.Context)
	// Exchange OAuth authorization code for JWT tokens
	// (POST /oauth2/token)
	ExchangeOAuthCode(c *gin.Context, params ExchangeOAuthCodeParams)
	// Get current user information
	// (GET /oauth2/userinfo)
	GetCurrentUser(c *gin.Context)
	// List threat models
	// (GET /threat_models)
	ListThreatModels(c *gin.Context, params ListThreatModelsParams)
	// Create a threat model
	// (POST /threat_models)
	CreateThreatModel(c *gin.Context)
	// Delete a threat model
	// (DELETE /threat_models/{threat_model_id})
	DeleteThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Retrieve a threat model
	// (GET /threat_models/{threat_model_id})
	GetThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Partially update a threat model
	// (PATCH /threat_models/{threat_model_id})
	PatchThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Update a threat model
	// (PUT /threat_models/{threat_model_id})
	UpdateThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// List threat model diagrams
	// (GET /threat_models/{threat_model_id}/diagrams)
	GetThreatModelDiagrams(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDiagramsParams)
	// Create a new diagram
	// (POST /threat_models/{threat_model_id}/diagrams)
	CreateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a diagram
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id})
	DeleteThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get a specific diagram
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id})
	GetThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Partially update a diagram
	// (PATCH /threat_models/{threat_model_id}/diagrams/{diagram_id})
	PatchThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Update a diagram
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id})
	UpdateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// End diagram collaboration session
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	EndDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram collaboration session
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	GetDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram collaboration session
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	CreateDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram metadata
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	GetDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	CreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Bulk create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk)
	BulkCreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Delete diagram metadata by key
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	DeleteDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Get diagram metadata by key
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	GetDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Update diagram metadata by key
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	UpdateDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// List documents in a threat model
	// (GET /threat_models/{threat_model_id}/documents)
	GetThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDocumentsParams)
	// Create a new document
	// (POST /threat_models/{threat_model_id}/documents)
	CreateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create documents
	// (POST /threat_models/{threat_model_id}/documents/bulk)
	BulkCreateThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a document
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id})
	DeleteThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get a specific document
	// (GET /threat_models/{threat_model_id}/documents/{document_id})
	GetThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Update a document
	// (PUT /threat_models/{threat_model_id}/documents/{document_id})
	UpdateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get document metadata
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	GetDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	CreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Bulk create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk)
	BulkCreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Delete document metadata by key
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	DeleteDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get document metadata by key
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	GetDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Update document metadata by key
	// (PUT /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	UpdateDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get threat model metadata
	// (GET /threat_models/{threat_model_id}/metadata)
	GetThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata)
	CreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata/bulk)
	BulkCreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete threat model metadata by key
	// (DELETE /threat_models/{threat_model_id}/metadata/{key})
	DeleteThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Get threat model metadata by key
	// (GET /threat_models/{threat_model_id}/metadata/{key})
	GetThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Update threat model metadata by key
	// (PUT /threat_models/{threat_model_id}/metadata/{key})
	UpdateThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// List sources in a threat model
	// (GET /threat_models/{threat_model_id}/sources)
	GetThreatModelSources(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelSourcesParams)
	// Create a new source reference
	// (POST /threat_models/{threat_model_id}/sources)
	CreateThreatModelSource(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create sources
	// (POST /threat_models/{threat_model_id}/sources/bulk)
	BulkCreateThreatModelSources(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a source reference
	// (DELETE /threat_models/{threat_model_id}/sources/{source_id})
	DeleteThreatModelSource(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Get a specific source reference
	// (GET /threat_models/{threat_model_id}/sources/{source_id})
	GetThreatModelSource(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Update a source reference
	// (PUT /threat_models/{threat_model_id}/sources/{source_id})
	UpdateThreatModelSource(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Get source metadata
	// (GET /threat_models/{threat_model_id}/sources/{source_id}/metadata)
	GetSourceMetadata(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Create source metadata
	// (POST /threat_models/{threat_model_id}/sources/{source_id}/metadata)
	CreateSourceMetadata(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Bulk create source metadata
	// (POST /threat_models/{threat_model_id}/sources/{source_id}/metadata/bulk)
	BulkCreateSourceMetadata(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID)
	// Delete source metadata by key
	// (DELETE /threat_models/{threat_model_id}/sources/{source_id}/metadata/{key})
	DeleteSourceMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID, key string)
	// Get source metadata by key
	// (GET /threat_models/{threat_model_id}/sources/{source_id}/metadata/{key})
	GetSourceMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID, key string)
	// Update source metadata by key
	// (PUT /threat_models/{threat_model_id}/sources/{source_id}/metadata/{key})
	UpdateSourceMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, sourceId openapi_types.UUID, key string)
	// List threats in a threat model
	// (GET /threat_models/{threat_model_id}/threats)
	GetThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelThreatsParams)
	// Create a new threat
	// (POST /threat_models/{threat_model_id}/threats)
	CreateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID)
	// Batch delete threats
	// (DELETE /threat_models/{threat_model_id}/threats/batch)
	BatchDeleteThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params BatchDeleteThreatModelThreatsParams)
	// Batch patch threats
	// (POST /threat_models/{threat_model_id}/threats/batch/patch)
	BatchPatchThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threats
	// (POST /threat_models/{threat_model_id}/threats/bulk)
	BulkCreateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk update threats
	// (PUT /threat_models/{threat_model_id}/threats/bulk)
	BulkUpdateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a threat
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id})
	DeleteThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get a specific threat
	// (GET /threat_models/{threat_model_id}/threats/{threat_id})
	GetThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Partially update a threat
	// (PATCH /threat_models/{threat_model_id}/threats/{threat_id})
	PatchThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Update a threat
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id})
	UpdateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get threat metadata
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	GetThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	CreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Bulk create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk)
	BulkCreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Delete threat metadata by key
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	DeleteThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Get threat metadata by key
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	GetThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Update threat metadata by key
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	UpdateThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiInfo(c)
}

// GetJWKS operation middleware
func (siw *ServerInterfaceWrapper) GetJWKS(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKS(c)
}

// GetOAuthAuthorizationServerMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthAuthorizationServerMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthAuthorizationServerMetadata(c)
}

// GetOAuthProtectedResourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthProtectedResourceMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthProtectedResourceMetadata(c)
}

// GetOpenIDConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetOpenIDConfiguration(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOpenIDConfiguration(c)
}

// GetCollaborationSessions operation middleware
func (siw *ServerInterfaceWrapper) GetCollaborationSessions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCollaborationSessions(c)
}

// AuthorizeOAuthProvider operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuthProvider(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeOAuthProviderParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "login_hint" -------------

	err = runtime.BindQueryParameter("form", true, false, "login_hint", c.Request.URL.Query(), &params.LoginHint)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login_hint: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scope" -------------

	if paramValue := c.Query("scope"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scope is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scope", c.Request.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scope: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuthProvider(c, params)
}

// HandleOAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) HandleOAuthCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleOAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HandleOAuthCallback(c, params)
}

// IntrospectToken operation middleware
func (siw *ServerInterfaceWrapper) IntrospectToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IntrospectToken(c)
}

// GetAuthProviders operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthProviders(c)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogoutUser(c)
}

// ExchangeOAuthCode operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuthCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExchangeOAuthCodeParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuthCode(c, params)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// ListThreatModels operation middleware
func (siw *ServerInterfaceWrapper) ListThreatModels(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListThreatModelsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", c.Request.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "issue_url" -------------

	err = runtime.BindQueryParameter("form", true, false, "issue_url", c.Request.URL.Query(), &params.IssueUrl)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issue_url: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_after", c.Request.URL.Query(), &params.ModifiedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_before", c.Request.URL.Query(), &params.ModifiedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_before: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListThreatModels(c, params)
}

// CreateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModel(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModel(c)
}

// DeleteThreatModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModel(c, threatModelId)
}

// GetThreatModel operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModel(c, threatModelId)
}

// PatchThreatModel operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModel(c, threatModelId)
}

// UpdateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModel(c, threatModelId)
}

// GetThreatModelDiagrams operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagrams(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDiagramsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagrams(c, threatModelId, params)
}

// CreateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDiagram(c, threatModelId)
}

// DeleteThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDiagram(c, threatModelId, diagramId)
}

// GetThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagram(c, threatModelId, diagramId)
}

// PatchThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelDiagram(c, threatModelId, diagramId)
}

// UpdateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDiagram(c, threatModelId, diagramId)
}

// EndDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) EndDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EndDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramCollaborationSession(c, threatModelId, diagramId)
}

// CreateDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadata(c, threatModelId, diagramId)
}

// CreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramMetadata(c, threatModelId, diagramId)
}

// BulkCreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDiagramMetadata(c, threatModelId, diagramId)
}

// DeleteDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// UpdateDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDocumentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocuments(c, threatModelId, params)
}

// CreateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDocument(c, threatModelId)
}

// BulkCreateThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelDocuments(c, threatModelId)
}

// DeleteThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDocument(c, threatModelId, documentId)
}

// GetThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocument(c, threatModelId, documentId)
}

// UpdateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDocument(c, threatModelId, documentId)
}

// GetDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadata(c, threatModelId, documentId)
}

// CreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDocumentMetadata(c, threatModelId, documentId)
}

// BulkCreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDocumentMetadata(c, threatModelId, documentId)
}

// DeleteDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// UpdateDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadata(c, threatModelId)
}

// CreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelMetadata(c, threatModelId)
}

// BulkCreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelMetadata(c, threatModelId)
}

// DeleteThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadataByKey(c, threatModelId, key)
}

// UpdateThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelSources operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelSources(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelSourcesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelSources(c, threatModelId, params)
}

// CreateThreatModelSource operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelSource(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelSource(c, threatModelId)
}

// BulkCreateThreatModelSources operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelSources(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelSources(c, threatModelId)
}

// DeleteThreatModelSource operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelSource(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelSource(c, threatModelId, sourceId)
}

// GetThreatModelSource operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelSource(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelSource(c, threatModelId, sourceId)
}

// UpdateThreatModelSource operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelSource(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelSource(c, threatModelId, sourceId)
}

// GetSourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetSourceMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSourceMetadata(c, threatModelId, sourceId)
}

// CreateSourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateSourceMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSourceMetadata(c, threatModelId, sourceId)
}

// BulkCreateSourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateSourceMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateSourceMetadata(c, threatModelId, sourceId)
}

// DeleteSourceMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteSourceMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSourceMetadataByKey(c, threatModelId, sourceId, key)
}

// GetSourceMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetSourceMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSourceMetadataByKey(c, threatModelId, sourceId, key)
}

// UpdateSourceMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateSourceMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "source_id" -------------
	var sourceId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "source_id", c.Param("source_id"), &sourceId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter source_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSourceMetadataByKey(c, threatModelId, sourceId, key)
}

// GetThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelThreatsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreats(c, threatModelId, params)
}

// CreateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelThreat(c, threatModelId)
}

// BatchDeleteThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BatchDeleteThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BatchDeleteThreatModelThreatsParams

	// ------------- Required query parameter "threat_ids" -------------

	if paramValue := c.Query("threat_ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument threat_ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "threat_ids", c.Request.URL.Query(), &params.ThreatIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BatchDeleteThreatModelThreats(c, threatModelId, params)
}

// BatchPatchThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BatchPatchThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BatchPatchThreatModelThreats(c, threatModelId)
}

// BulkCreateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelThreats(c, threatModelId)
}

// BulkUpdateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkUpdateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpdateThreatModelThreats(c, threatModelId)
}

// DeleteThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreat(c, threatModelId, threatId)
}

// PatchThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelThreat(c, threatModelId, threatId)
}

// UpdateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadata(c, threatModelId, threatId)
}

// CreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatMetadata(c, threatModelId, threatId)
}

// BulkCreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatMetadata(c, threatModelId, threatId)
}

// DeleteThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatMetadataByKey(c, threatModelId, threatId, key)
}

// GetThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadataByKey(c, threatModelId, threatId, key)
}

// UpdateThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatMetadataByKey(c, threatModelId, threatId, key)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetApiInfo)
	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKS)
	router.GET(options.BaseURL+"/.well-known/oauth-authorization-server", wrapper.GetOAuthAuthorizationServerMetadata)
	router.GET(options.BaseURL+"/.well-known/oauth-protected-resource", wrapper.GetOAuthProtectedResourceMetadata)
	router.GET(options.BaseURL+"/.well-known/openid-configuration", wrapper.GetOpenIDConfiguration)
	router.GET(options.BaseURL+"/collaboration/sessions", wrapper.GetCollaborationSessions)
	router.GET(options.BaseURL+"/oauth2/authorize", wrapper.AuthorizeOAuthProvider)
	router.GET(options.BaseURL+"/oauth2/callback", wrapper.HandleOAuthCallback)
	router.POST(options.BaseURL+"/oauth2/introspect", wrapper.IntrospectToken)
	router.GET(options.BaseURL+"/oauth2/providers", wrapper.GetAuthProviders)
	router.POST(options.BaseURL+"/oauth2/refresh", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/oauth2/revoke", wrapper.LogoutUser)
	router.POST(options.BaseURL+"/oauth2/token", wrapper.ExchangeOAuthCode)
	router.GET(options.BaseURL+"/oauth2/userinfo", wrapper.GetCurrentUser)
	router.GET(options.BaseURL+"/threat_models", wrapper.ListThreatModels)
	router.POST(options.BaseURL+"/threat_models", wrapper.CreateThreatModel)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id", wrapper.DeleteThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id", wrapper.GetThreatModel)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id", wrapper.PatchThreatModel)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id", wrapper.UpdateThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.GetThreatModelDiagrams)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.CreateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.DeleteThreatModelDiagram)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.GetThreatModelDiagram)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.PatchThreatModelDiagram)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.UpdateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.EndDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.GetDiagramCollaborationSession)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.CreateDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.GetDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.CreateDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/bulk", wrapper.BulkCreateDiagramMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.DeleteDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.GetDiagramMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.UpdateDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.GetThreatModelDocuments)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.CreateThreatModelDocument)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/bulk", wrapper.BulkCreateThreatModelDocuments)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.DeleteThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.GetThreatModelDocument)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.UpdateThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.GetDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.CreateDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/bulk", wrapper.BulkCreateDocumentMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.DeleteDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.GetDocumentMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.UpdateDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.GetThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.CreateThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata/bulk", wrapper.BulkCreateThreatModelMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.DeleteThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.GetThreatModelMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.UpdateThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/sources", wrapper.GetThreatModelSources)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/sources", wrapper.CreateThreatModelSource)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/sources/bulk", wrapper.BulkCreateThreatModelSources)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id", wrapper.DeleteThreatModelSource)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id", wrapper.GetThreatModelSource)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id", wrapper.UpdateThreatModelSource)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata", wrapper.GetSourceMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata", wrapper.CreateSourceMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata/bulk", wrapper.BulkCreateSourceMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata/:key", wrapper.DeleteSourceMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata/:key", wrapper.GetSourceMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/sources/:source_id/metadata/:key", wrapper.UpdateSourceMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.GetThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.CreateThreatModelThreat)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/batch", wrapper.BatchDeleteThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/batch/patch", wrapper.BatchPatchThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkCreateThreatModelThreats)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkUpdateThreatModelThreats)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.DeleteThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.GetThreatModelThreat)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.PatchThreatModelThreat)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.UpdateThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.GetThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.CreateThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/bulk", wrapper.BulkCreateThreatMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.DeleteThreatMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.GetThreatMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.UpdateThreatMetadataByKey)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9CXPbSJIo/FcqsPuF7W8JiaSo80XHPllHt3p8rSR394zHqygCRbJaIIBBAZLYHv33",
	"F5V1oAAUSICiZNnmbsS0RQB1ZGVm5Z1fHC+axlFIwpQ5B1+chLA4ChmBP06SJEr4P7woTEmY8n/iOA6o",
	"h1MahZt/sijkv5E7PI0D8Q3O0kmU0L/gDT0Ay6ZTnMycA+csZNloRD1KwhTFJJlSxmgUMjSKEsSyoZsQ",
	"FmWJRxD2PMKY03FucJARPopPUkwDuc5/ZTQh/lUSBcQ5cG4TmpLE6Tjq86t0FvMH6SQhOHU68h9X08gn",
	"wRX1nQNne7tL9gbdrkv6+0N30PMHLt7t7biDwc7O9vZg0O12u07HyRhJ1DQJwT5JnPuOQ8TWHLHKK5+E",
	"lPiO/P3KJ8xLaMxh4Bw4HxlJkB8RhsIoRRN8Q1ANENJIbhulE8oK8HDu7ztOGKWnURb6FsBemLDj84z4",
	"i7Xgk1BqBoj9/X0LaP3Iy6YcLZYGrgHHMEqv1IptMLycEMQPnbCU+EVE0ZAld5SlKDJgPSRBFI45WNMJ",
	"QSwmHh1R4iOxXgTrBcDe4ID69TgLjxEN4yxFPk5xDVhHlAT+FSyfOQef5A98d3hKnI4zJYzhMYfdOzwl",
	"iDKk8Bjh0EceDsWiEZnG6cy57+QjZElQGODj+Rs0zRi8jZFY3y+Xlx82+f9coI/nb5z7zwZ8qdjDFexh",
	"DozjJLqhPvFhmzkgp4SkKAeSWvcU+MY9hyDzJmSKORT+MyEj58D5j82ctWyKp2xTQBc+KM4ND5BiP04+",
	"IgD2MKZn4SgS4DY/O/xwhmg4ipKpWpcYANgJP/Mk4ogR+nFEAVMlrxKsjMI5C6wQPM05cCZpGrODzc0x",
	"TSfZcMOLppskod6Ipn9tplO6OQyi4eYU03CTTXBC/E0cU5cPwvhjN4pJiGO6Acyx49yQhIlxexuA8FFM",
	"EpzmfBV7KWcjfIwsjqMk/b9yiXxmpyNQ58A5ET+i98kYh5K98uEYSW6oB/sZZhRQpbfR3ei6W3s7hOBu",
	"PsLl2zP4IMVpxsTsPv/9/d84AVN4p9/tb7vdgdvdv+z1D7rdg273H3AWccLXnVLJ5AXkij+W4Fg+KY6w",
	"kg75oRXf7jjiCAHRKUd0fPeGhON04hz0uv1Bx5E8h6UJDcd8HxqwNpRQDyvf3Xf01eEcfHLy94rr+aw/",
	"jIZ/Ei8tH1xx5/oYy0t5Lz9B8o0Cqo6SaIpIeEOTKOR0hG5wQvGQ36NN9i9OtXZG/rjxFP3tnUWQkhxM",
	"bdUGIAMVi/CRiFle61GWJHxR8BiF2XQIN/iCddXtHDhqNBKMXq6k4abE+qxb0sRSPnHfsoQLeBvxh4iG",
	"PiBTOEZ0pLGeMjTKQo+/z594UZIQLw1mnDGF2ZSvCcjx5Pz8/bmxonzzglDrQMk3ThLEX0I0RB8vjzpI",
	"YBy/NTFD56dHaGtra9+kOB+nxIVxF8ELti3XUAVX6WUJuxwvOsA3DEKyQfwwSyeX0TUJz9VVUNnsr79f",
	"opS/UuT2XPIkYSpJWPN8VmL6Ql6D750Dh8x+nQx/9uh7+uvZx7/Oeu/oGTsLz7e9o7Ods+v4j9+Oft3f",
	"2NiAMWKaEHZFQ+dga6fb5ZsdJYRN9Fg+GQ22d8Tb8JsSlF4TnAipscRGC2uxbVMJg/CGBRvMRVX4oPEt",
	"ghcFYBRyMOJFoc/yYWmYkrFYZ2lr5aHPxWM5Ngd+NEwxBZwOyW1h2cy2bhM85cHh9BE8y6lCgvDzIgwt",
	"gLS8j8K8BeDVYaLWZCzgRVwxcLligGJME+STkYCA3L0h1zvlkxfqRAWsUUAOkNAx0MsbSm5fdZDQbNBL",
	"4tP0VQdFtyH/a5QFAdwqSRS8MuAkFZROrhDBB3yDBl+tcNWOc+dGXAbhFD4moUvu0gS7KR4LBs65WTgG",
	"BUjCGgS0TACrspGTKaYBwr6fcEBECaI+p8wRJYli0UpPJD7AEb2c4pmQfEufRumEJJKJvbJcD1Ma6puy",
	"48Sc0yV8Df/76X//mXW7Wx78L/mn84L/o7/z+f//T2cV2y9zOwmLjjhbG0K9xowcUzxO8LQKMv4Q+eIp",
	"Et+gW5pOkBdNp1GIDPzpOD7ln05pqOSRKY5jWOEX5/j02AUJsE4EPx75ahU5R5q9E0IiLLrCqDyuLRH/",
	"ClvO+og/U3yFpXgao5dnF+/5JfOq7pYxznDLdsNTi7TwMaT/yoiJSUrEV1B7+fHj2XFhziyjfnU6TiPv",
	"w2DmHKRJRizTT0mKQcurLOJvZOaC4gckL4wW2Pcpf4wDvRI9QMehKZmyRVrRW/U+l26yIOAiWml1OEnw",
	"DBYX+aDDWg/jDWag1WpJdpWnsljukvtvIsTV8P5ZDIMpQAIF5EK64nI5jpf42mDR/QD4IMU+eQ0YyF2E",
	"ro2Gj0gQ1BCvOEyBEkGOCx4JAoZehpFPGGj5xB8T9gpxDj7j1B3jlA4DIvZ6GKa/oT920DjB8QQFdJjg",
	"ZLaBLsEaJCagoRdkMFgQ8FdDnNIbYjAIFAcghYY3JKQk9ArP+PIIZpx+4L4XQsEG+mPHVSqQ+XpArwma",
	"4uQ6izsojaKAdVASZSlJOsJkEYUh8bjCgROCpAZLfEkYNzj0iI+8jKXRVN6kGzb+VeJCbIJtbEjRZE5x",
	"H4znglx8MsJZAKRxldPxp88Vg8NpQO4A7mDoYGmU4DGpnMcfOx3xj4SAbO1r2gYNi8UYBNviOq/qGci5",
	"GkZ/LQyfaZJ5aZYQHw0zRkN+9z2EiRSZxr0FkZuxWEnXHIdz9qqlaWdr9+Tw5Pj00H19urXrDvb3d9y9",
	"nZ1ttz/on54cbQ1evz49XcyPq/wX8M2iX/328+Yvl2/fSISUEpdQprmSDWiGAHlQQkKfJKB+heiPncZA",
	"hJFPArBsVSHZkahZXRpMyl82wZdOcIp8knJJMCRMwFGfNRDQkEzwDY2SAlzjJJK2b4vkHAlbY3H+szAl",
	"CfaAE8ArCKcp9ibEV0YXmJuDCcQtqt4HvtoINJz1XUZRYIPKDWV0qERaSYCKHs1l/j4hIM7pBVGG5Lf8",
	"nIp3iJxkGEUBwWDs+uss9MldYZZeeYp/uFHC5ecAz6SMkKPCywkd8+nhCmfyAeK3ZBSDbElDOuVXTFfP",
	"Ls0S1ntE4ELdNQGwWnhQnIOO6DiTyhlf7x874tKo8BWcCHl0Pv8r6lJRkPP14lQ4GWfCfltQkBXxOUJ6",
	"9mjiBQQlP73YfoFGNAh+epEQ/8WmkKq55Owc9LodZ8b/Y2M0dqmBL8yklJdkY7zRQS+GURb6OJm94P/O",
	"0jQK+b8SMo1uyIsi8xGPm9l4rGcUcUErEtC4IMxuTTwW1n3OCXGI5MF55qeIiW/FnWfgrwFU+aNwjRyf",
	"nu6eDg733aPXRyfuoNvtufu9/T23v9vdOdrbOd09Od2CS1J8I8234EQ6LNo4ToPo1uk4k4iBDdmf0rBk",
	"PY5xklKPxhj8e5++OAFm6RVsg6Yz0+K7AxbfPlh8O46pvBreNc47wOPHtbSaKeV6D/kjxFetfGiw+Ygr",
	"fv1/p4Sl/+a/9vpbzv39544joShBtLs7GBxvHbonx/2+O+genrp7O/3Xbn9/d2/n6PC42+3u2t1OW73e",
	"cb+76x6eHm+7g8Peofv6cG/L7Q2OeoPB9vFRf7vyobKwu1zVIolH0IcAp/zSQhfEyxKaztBhiIMZo5xW",
	"bsmQRd41Sa+yhMPglrGDzU0c0w0DDpvmDGyzybI25YGzzSYIsnnLLAKSgWaNL3fMWORRLgK31qQqt1MR",
	"Z+epCtVZm2gNAtMXmBuUDVhQJXxSHXqhEliknIqiBZ7GkWIIhZcb3qcf8m9sV2rMJU5+WTTcrydNwPl3",
	"S2zaJMLmCrgC9coU8ApdL4PMpo93eYy2cIqGaF3wMTfA7RJfKc/yOxlewGP08fyNlGtwALo7ymKuxzfx",
	"G5WtVvl5S+KqAt8Gg47JakpkXyKd8sasVzGo4NIqdS68/PWCzggHrCLpyK/QMPJnQhsAu1Q4RhhM0oq1",
	"uSgKg1muRHsBJWHqarc3+Nurotf3YPswzR62UzAMgxz2QfB+BCLDPCZm2jTvOxXhievJXEhBx+pmOT49",
	"fiUNm1YZV/xay28XWlWiIIhu+bH/sZNrWiZLjkLSYF/vIp/AhuYGM/hjIqIsyszbfsLHp8d6A6AqNjni",
	"BR45AFf1NPmiTFvzoxuMDWFXHuGnLw5O00RY0CN/JgJkAi4y/ccI/o+rUGkSXfNx/qPblfFW4qffqQ8E",
	"xIFJ7lLzY/3mKArTC/oXcQ56A/Wa80HozugYTCFcJpEWoI4zIXQ8SZ2Dna6wfzj9ra3t/b3jvrt3tHPs",
	"Dg53t9zD05OeuzPY7e71jganu4eHHEOjRMgA4yTKYviXcLjFEaPybAMyElECWVp6ksCkfCUSBz/JgcDl",
	"5sil8DmuaHjVA6xTzyOI1clfiLKUv/E5N0QYtgKthItb9VZAsNfvSiVNaWndXJHmKptxTAEN4QTzU9nr",
	"8v8vn0qv46Q4GZP0LU6uhYQihWgvwIxRj38AB7N3XzwC2Mpge2d3b//wtXt03Ou7W4OTU3d75+df3N29",
	"/W6vvwWPnY4T4CEpI1IZF7bg/4q40Ne4oPmPiGHRZ9Ld2AaVQ4KQ8w6+YhFnJzG4HXqUDkjBxxgMdnwE",
	"+93ecXf3jk/c0678Uzw7PpFxLSn1ODPk8CqdqT43vnzTK1PW47pSjyv7LCW2oNsouR4J7RGOZGt7f6s3",
	"ON53X+8cbrmDne5rd6+7feq+3uv39rvHu/397qljekb44gquiNIKttQKJGL8LidUN0Gut+f8h5NPI+5s",
	"ciSD0/FL4iwlU5uzltFpHIjgP8WCOTmCqBDwy0XHC3REtI7w5VK/A6ZaYe2WHoPijdVKPl25r+oJBZPi",
	"YEtcVhXni1UKUVGleWCxZUnEm4TUwwHyCaPjEKlYVK2TqHg5I15Z4frOEO8O93pdd9/Hvtvr+T13SMjI",
	"7Xa97mDkD7a63l4R178412RmRLyqCAIZA+qkajlXxTAyzlzFl/klr77pbfQdTsWl+L7DfL3oGPbmdBxh",
	"aFCBiaaZQWx/I/ZHFmuACbKqXUv/BXKVgl+cJXHECJJBayK8t6JV1Dgpl/bgqtmfgQtXLeUxfbh2olWY",
	"j1S08DOJdJD4ZwvoDCKJqoo95CHh7QI6W6+rw9d0X6Pi1OmZILA31m3A11tVag41E+dyA0qItLgIXVM6",
	"RAEmifAtwrU3JOktISECjWUDnVq9v3/sIL5EGf8hFBvpU2X8YRJlYppgHCU0nUwZejnF4QSnKQ47KErS",
	"SQdFIbmgPulwDE6iDiLJq47hp2XpLCCgOiVTHIA3N/SJ30FsGkX8+z+zaRzdiK+ER63k/5V+X5t3+SXI",
	"bB0xyas6Z3MpIu+xpU+9d9OHkmCfZsw52Nbk6EhIOFpgLbqQFSvnx+mWLgBJ+OoVRkIuaoKJPX8pzoYB",
	"9YDpy4P8hUrjIr6JqP/+hiQBjhXTiBMyIklC/A+Y79phkyhJCZOqxHOSo0VAgAndmHNUTq9c+WApiaV3",
	"SEJa46zhUf0mpfCKh07BtxmH4cR+CJ9wMBbZzG+UZTgASgKST9OEDrNUhnBwZgsAq+B344mP9GfVyYEL",
	"lXiGxVN5I9aI45jgBIceLEe6Zt9wrGu3IvFJdTXHYkQEiFz2YnJ5SXi5wQQEjDTKUkTuuCBF5VfgLAnU",
	"kkoRbFVeNjtAFxTkMU4BcmLw5uMsjaY45cIeZ+CggjG+iiSKE4pTAifFNvh38D8FK9RCCVzRalXgVctg",
	"SNEf8REW6U0KGRqKKgasq7KJQcyND+5cfFODR5Vby4JJMU4nyMOBlwV5aos91ALGLEVaGPoIAMIWOZ8z",
	"luYbu4TIDWxDyguRfGbc9yLFCLIGZjalZQ6eCcVU0XoEX7B6hKviWwHLijyJc/SjKIgSW7gg4DXHLQ/e",
	"KArafQsU8/vBPhh/jvjti2iIYnpHwMarAyt6lcCK3AZYtfmGpPG6xCDHmE0EJttH8zGbICk565iDbbT9",
	"ApCQPyV+Kch4Z1A7m5RHrDOB9c0OA2twSUVWza+ulaDrJQxnRdf8rrMGq0yJD3h2i2fCQCLEOoOyG3s8",
	"1YyV8LSCT0rQqYaA3bidX52VVcubs3Rj4lDxyCJ5KKnTcobVu7fytVhsLohaecQUHhe5XkMPkxi5nA2R",
	"y7nDIPKuhQduGkHyrAjYKTmH7CRjJWM5YxsSvrdmTj0FUR+b9KzkIjjRCg0vNFmsmKarSkpJjUyS6HZC",
	"sP8DokeTXwSJH5my7Ypk1KL2WdIHTTXFUAhzu3Qp8jujQerS0FiItEGowxB6NuSFiNE6jtC0nY6jVG2b",
	"vGKRHuQEwnsqVPP5SNM+YFDPkkcNmnGCxeH58i15a9k0lqfB4a/2mEOIGdDBCUfTMY45amZD6llFtzgh",
	"HrXH531Qj0QcNUC2OFWFLtVRV2Kz4XcRWiHOasFAdgoR++f0Ub/9BgzUTvBHJXxfDbI1C5lU1+4buxol",
	"5L+KcpLfuzabz+rsELWquG2VDW52tTKLHia/rkra1JYcctlWvD7FUxpYLrtTLlqPxMPFImq9oH7aXkS3",
	"A6OgPlh8BTVp5Q1Yf360FXqXT0qqL3rZRT8hluIk7aAe+gmRUAnyelctBXBDsbXfPU312pE0XlvvnTaW",
	"soWXkNDda5lClAAjkAZigI4aHTwmSQSFQZrcRgIwj3oViSma3EM+TYROY6H3wyCIbomvD8t419BaFKjS",
	"iF9EImKj4wyjNIWQZgju+FzrMDWCNtVpVtBWPEAYGDOKhizFXkD0bSPVKItuTCxX7M8J9RF/lN8z/Gyj",
	"Mbiwaodrfs3I480xe/Uo1e7O0Zpt3Y2oNVpT2UMvZYkgrhmANP7KqYQqPdDEXA1fs+jRxzpKV6yW+OAI",
	"Wj4sVSylfp48ly9KUshwmRA5pbAu4eBVax3JEntmd7OpEkqV8hihjxMfkUKtH5nbXTyYctkiWfppcXEo",
	"RBmCzAXwxunySjFO8JSIqGgxQpZQw6fuRx4rxO+LPIVNUctps7wMi69dF4FqEbR6mPud4QK9S3N2J4Bk",
	"FIxxqufTpCjJW+xNaEjchGCffysHhiIlcEMl0TjBUzAxogkO/aB0VzlH79+8OXz9/vzw8uz9u6uLk4sL",
	"/t937y+vTt9/fHdsy1KTu2mte/CPuLZm1snBwyhLxUUPSFGfWNOwoJsuI3YlKpGI2UnoX8lwaMdq0MjG",
	"Y8LsQskv2RSHOYTzV2WcNouCG6qklfImOF0kKbiOrVlFNGEpygChP7y/uER5nsgX6t9v5l/Z67dUNkLs",
	"1Hmi0cJaaKRKdQuAINDMfKV2WCDFanjBGUojHVFQhwulMIP5HEvDvrIbGxsr5oIuzEYl4sVqKmqepsp0",
	"Mmqd27AxschlmVZOiBaQik2hXIRBL80DcN1bIwK3DBpvQgM/sZWGeScK9MELCiRsddm3JKixBh1dXCD1",
	"VFgC4b4XVEeZPh0aGuqbkUwY+TNrui0ev7NKSBe//cylCkCAFI9FvS3lUeAi5osOeiGMbfxfXA/g/+UM",
	"rpTHmIiyIfMxV63Diqe1sU6H6LoQ7SQs93cpCUXKrRHjVERICGOo3CQq850/bROehN2/Dt1/dN39q43N",
	"A/fzf60qLMkowWhdp3huiT1qGEn1SKViBPjE4mzn+U7e4yuKUgKprxilFCL+r3TWUfHAHSiAQDocpVUK",
	"7pwgJb5Ce5DSMBJvVItSvCxEEb1qEkWkrAAdUHOWjCr6+qkH9jAiD6dkHCVmgJAq/eCqmP48okhUccpf",
	"JeGYhgSy2t2UQBx0xxG3zm+6Sie4t8gNCST6ivJEGVTq/aRR0lUlQRnmt9RfxI2ylP/ymW9h2ZwJlUZu",
	"Bh0ld87BdsdJZiLsKmfmmv0qbiuYIt++8ZII3zDfArjznX8jGRqyeMMni/nHiENTBAg7WzKpoyxghONS",
	"dYZu1dyiZCz+Lr8nfTJOCLFavlvGOXF+sXycUyhysTQqVgRP+F1pvqGovmgxbG7ZnHTfQExQjBOrAJpr",
	"++KNvMRHCELYJuCoNDWwxraGhY5STWzNDv9DlKRHBdtgFQn4OxbraR6twOZbhe3HlduKGcKIa1CBurbQ",
	"SxzwSx/LQhyIkRhzHQrdbc6Mu+hVRTS6q87+B/KiKPFpWNDBchyzyFJ/n/tJSWC4c/gY1vqk9hApuJ8h",
	"REoVn4FclpQpb6gWBxTJFwvRKOccMN6OwcBASoCSnqIugqt5lbgE3WF0Zw++snoi6qjsL9LqyIApbgr2",
	"MPfsFnCQ5lzj1h4l8Ht9gMBgYUkZMaZmc/ZytM8qsIzaa6F512Nh5eYvtPJ81YSpXa4mQA2GWWF82mso",
	"NLQZZWnQPqilJs6kNOaDo8jmIurCG3Ngw/0FDNAc9UUerLoEX2w8kpVddhYT1GepbLWLIxPySJkYlJpR",
	"Pk5/timsQA1cznaCOm1DRXW4egG/P2LglfiCrTruSq774dGUtd78zaBpRMDavb8q9/77wyydfEiiFFxh",
	"57KRR70dC95H/Y0uv97ER0i3/9AFGTETplbi852fnx6h/d3+XsksYBZ1vhLl0kEbnqRpfLC5GUQeDiYR",
	"Sw8g8+hzxxlC5WmuwU8in13pEpfwkai2/Lnj/Hl7zQyXUmWkzY1bEgTudRjdhpv8ZdUfQrd3qfnQ7LtS",
	"sIUv7lRhfpr3gEAvL0VhmreRTwDlz6ZxEt0Q/xU6/HDGhTsviklpp1FMQlAWROUvII0RlYWOA3Ylyqhc",
	"eZxaIP2VXIFoeGUW5FZusKp6aj+V2qJL5uuq5j1lLCNmpWkp5ng4FM9kOXKpVkLvFR1qrDFkDiJoC/Z8",
	"l0PVaF2PQRVup+unisrqBSFdfg/rF0PmBdbN9asK4NKm8q+MJLPC+hcuOEdmW86n0jkrlPiCoV8v3r9D",
	"v5Mh+huZoQtScOq2JIxFUM4Jp8KR61anWYaRgvzx/M3iRbZYTplIbRAEM2qhFQh4ym5IwImCIahadstV",
	"nIwRgavV/VRWPZ8TNF6/PSCk5NwLjfoCC5bWiOVUhYIKD6qEWXJUA5TlCxE3BHylqnvmxYiHsyZAnM/k",
	"mlNPG3b4ZU59VMtVp83sl28uZOUqZMwhTPeV7gt6hzIGoVxXtSQ+a9jYNNAPeAyyuV/fnkO/kkd43CY4",
	"jmW+f7HYhlNX47kSLC/OGY5BWwZ1zTtcTH6rin+VOC1Yoz3CUD+r949NMLuaRgmZe4IJgaLY/D25bnyD",
	"KQjDaEhmUehLtBSrr5a7DeiUpraIDohplB1zcqhwCMuxLNKe0d0jGo0YsQz8rjQgu6ZxTHzRRojDe0jG",
	"NAyFG8wigBtTpFFqC9a65D9XFo69JGKinjlfP1swetk1ClMpaOnddfJDWtiqRp1xjhV23M8LNlpcrUbV",
	"Oy5/1sRzVPOPigVZrRX91eO8mv+yNfwLdV1rOsaYDQllUea6rdS1HbGZAFXt2Hm2YigXWz6dTNSQLQKq",
	"uBXrcUG2meWg+scyUhDu4Tuwfs4Mu0MpZMJws/S7VdfKs7IHV23tlgBqq6kdjECmvb28z9yzZg9SKbfI",
	"mhfCnaTammPGJhoI1S4Q16ZjWuaELZjhOI6tML66RMqpkD69oX6GAxFSSUOW4tAjhdgWC8Rqti+WItg/",
	"/1s0quSXdgMrwpziOmJtZl50+/YYYt029FrcVuBCy+SPXLupp2s3cQF9Tu2mvMTSzzT9JRuicxJHokip",
	"iAiVDVFHl/L+TXDoTUTvqN+kt32KqRkUOIZ7pliUqUbydrO7Df76g4ozQR9LMiIJgXYaTGWe++QJajMZ",
	"s+WLeAaFmkrWn6cr0wS11eZCp6FT10C/4gwJiSOjG4t+U0aTpgklOpxU6zGlBmMKny2t2+QRgn/wpUD3",
	"DkrxuCOKfk2nNDVbimmCSPEYOkDyFxY1FLs36ad+DeJ85SJkob0Uj8XvxnoQ9V81gSrLhqJaTtWyMnSh",
	"xgS/86VQw8HMaCpicNp1w1TgNXZZzy+/1FWO8M01lJN4BZNhNyKRIvGyhIqMC65ZlMDfs8GitmhXGikk",
	"IvNZS8uerGWxraYI1+Xb+jqNJ+FEtAzStRkLVbyLuqOQ367JzDABQ1BZZlMs2/YwOz89atoty9qfVc03",
	"nC0o4N6R1hRblzwYJGrUFbXthVJfnrym4awKtQf4zlMeVXy6WQwdjgrEnfK8c9VIXXBx8aTyzVXM2qqi",
	"51Jl5hdei2CxvppHwtqszXVNbeJOsHfNrwY2Y5zAluirvHx/uYdSzOJSpm1L6ouoyXb9E1SkZU39oMWY",
	"aIoEJOR8dhU4KWvwL5xdvFfwhC09mSj4P+Lix22UXNst7foxyphs/GabsHll2Np+fB0dBWvw1trFVphH",
	"6QTLDK0EYuvNBS80j3wT77/GjFjrOXAdJyVI2sYBL4Qvyx2TkCSALTXtCB75MlvMnlqpEBIVVqczPBWL",
	"esRGJTJk8zFuj3troIuBjAv7V5ooKRtk3CY0Bct1HUaSYPlWLaK/IB0pjX8YkFeri1ddUjLismRC2bVq",
	"oBclYxyqdtBtBKYHd2N6LMCsRsgos/ylhI5lrQCKfh6z4S5N6RhbfZCmu06uZIIZGhISovwzm2tHPrWi",
	"5DmBRmRQgCZKUBzgkN/k+Scv2asSb20E5KbyVSPzRUKjxOqw+CCfIMg8UefFJS1lsrAuecfuBLa52N5l",
	"U5JQD8HjYmYTqLOcZrk2NY2xl9q2Jl1j3QX1uxi5IfY9Xsgnco/lKZQK/zGEsAan47yLoCTZG2i48Jb4",
	"NOOy+S90PHE6zlFCIQrXHjid4tRWrOhIiqviefsDlDfXvIr/CVI5Sm2Ht1fl1vA00MckL73Z4urqJbEz",
	"SFxaShyrZCDAWOYdqPpHbUJzLY5cUvzT00M0Q9vp4aNmIiG8+m3JhfOMHtDAUpj4RJP/eRaPhhpf0yL4",
	"CxeubBaLO0/ptMcGKl2ju8jorVSzTH0VaSPHnGVqO0hCAtGHLrJBstnSVDn/BmtbSiVYsdXk+SgGQtU8",
	"slbkUEfFbHZgSlZyctIP1+DcpMGgfpnKomBYzpdZUc4956/Ior3UR/AC000iCDRTxgGWie8OIHCg0Jy2",
	"adckk41VR6mU1pUAgjB4IRL/4Zgs5VPeE22ptk1vMQ3VyHlHibwVj8jL7R+/3u92B+5ga/vYHezubLv7",
	"J4Oe2+3v9w4P905PetuHD+rgdCEW8P6GJDeUzG/k9LnAqz7Vu4Bx4k1oSkQ/9GKtD+1iU6ZM0ahq5c17",
	"zCXM7djT3+iZHXskPA7NHRzn/U+K7uFKfSGxK9ecXHTxUU3STvf29477uzvu8cnejjvY29p1919vn7hH",
	"g52T3mF37+TwNXS1z3U4PRn8VpxumES3jGxevnV7/a1WaNC1o4EZ0aktc1ZiMVnhp3m+MH03gNt8Nd5/",
	"dZokvKFJFMqz0R05ksjPvFKrJkinz99RqY7m0X/VSILP9fZZ5+Ly/Oz4xDG4+ifDNOM487lPz8p9PoaK",
	"5RJfsB8RYFpsAguDw39PjgY7g8PevnvcOzp0B693++7h8d6x293ePjzud3e3jvqvWyPuxcmRO9jeqWJu",
	"rpzL6FZTs85VafjhAEH+NsSaBISLA3FCb2hAxqSUUxBHAfVmzgLK6BUpA6qTvk4IhkPPNWSl50l1dndj",
	"29Qt9VOp6DnvYxJae5u/3t0f7BxuHbrb23s9d9A/2nH3e69P3dNB77B30js+3t7aLulOXK/Jw8yPKfOC",
	"iAGfg+IOZZWkoWHQUEwaWgdLl3adqMG5hygokk4ITRC/2VmtS6GR2HFYmNkSCrxqv2mrajKPZoTT63t6",
	"Uxwgx1cKy2mmNX69RmoPcUguq/vOd1o8hXdP2n/URorMoHY99XYf4D/a+LOkHUdJLj8Eo4Kl0pSp9o7L",
	"xQ1+XU61cH0/AOd6JrRsI82PzMbZzpV1niEMVKMyCrRWV6Q/kXlltR2+YNJuKPlkE/DYAS5H8ymLAzyr",
	"a7dpTWCwOvNE8lmcRDfUh5GzWrsXgOAlJNTECZ3iZKa/e9Xarq4WlCes1ZzOfV6x5YKjrSxZAEmkfO35",
	"X6eKCH/9/bKiCfz6+6VMTAUCytIJ358nc72gqCoUiYEpuAIEQ+YoxcV8UQ6P3EEll+A48pit4kHoy7Qp",
	"Q3qdENDPHf6bLa3j/OTicpQF6PDDmSwepHNWboqExZkRSK+jLAjQHztonOB4ggI6TPiBqIJ3NKDpbANd",
	"chrhg8qDYvJ2UWVUAjoOxXCHYfobHw7c2bJoDUwobUMETwN+wRtV68SH/KUkVBadKV+fWAwlbANdqKy/",
	"PA3egL0eROUD4iAYYu+6MEthelFVx43xuBBiXx50FES3bIOfHk2bZ3Iqs8mBk/f0jkmIY+ocOFsb3Y0t",
	"0JjTCZz7JuRJ2HLRzkmaJSEDzwf1SIcPL1qPiqK9xdrIuutfcQ8OTC5gcMZVqJ9JehhTrhOJ5HhIT4SV",
	"9LtdUUNZFDrgokAOmk3IST74IlAbL7zK5RSi933JcwjbgY1wnDLrO993nIFYhW1wvdpNUV77vuNst3gb",
	"gqOnnOEIMFRmh/huKIXwM3iZAlH/ryY/e9GxcV5XTgZHL3/9/W8XwnXNWQmj4xCD2YzrwqM5Z8a/e+iB",
	"VQqciiqB9tQdHIwLOSzOLxd9sD5ULoVrcSHkb6ZT6vKd0XDsikqf1W+ETzn/JrJVgIULp/geo+OFF/Q1",
	"eFUzkPH4NsQSG2XzlIqU2tLqqhhdSfl/dDRWBjkwAOVIbak9oDD6/dnxEVg/ohsohlBBbKj27haEf1f4",
	"XBdiepEpV8pSmNVJYpJAWZK9QW9gQ3MYqqAHXMAgb3ORdIUkUCy6oaLqiwhnL9kga+Nrs2CD8gLjBEvL",
	"eymp30i/Ly5I5iBAETMPzKQJGSWETUTyfLucfBqmScRikdu4zF7zARpsVpQiaTB6s7oMcOALYKfqtgNo",
	"Og71l4ESfLIMdNS0CyujFCa44h/by6KYOxOlFBjxEpJexRE0gQijsFVVhnK4sTigTh0NVEAx5xya8MiG",
	"POKrsc58fQXugwT7QQb/aclRdQ0L1yzX0pCfLqj1pLipLPJk56b1RaYeUf5bMPNcBJmz6WeAHnpTSO3K",
	"ihzw/lzsgEorrldOVZ+PGTEJz46RbPij9eZSMnurCxdGPCo1rvpW71gvwHRaz0hZNjQsBfDfKyF4EyP7",
	"YkxvSHgl/xDV6NRfMVV1QGGtLcviqCvpSgrHVzgYX4lSPbVLFlL3D3LTm1W3HrFo1kOkiQ48QYU/jIfC",
	"NmR9Gy0nkdjKQK28YJMMGFoAkzgbBqI96TMSqDJGEq7ELzOH+rZtE50lhCeN2nMwsP4cmvKORpJY8Q6x",
	"Xx1f76Itrk7foKh8Rc0VwwrFejZlsR628HrFQaB8jsFMlByqKfwjzJkqvm0DHYGIzqDUoq5Yp44fmjjJ",
	"FSJyRxn44PRIQzKKkrzyTDhGNxRzNf4i8q5JumG7to/MRV2o/S11cUtaEZc1bPnKBFh+NG+zIKVQlEQA",
	"huXTykihT6VuZL3+Fhls7+y6ZG9/6Pb6/paLB9s77qC/s9Mb9HYHopOI+sYMIjkNIjO+jpMuZysB9Ugp",
	"uMooOiWCfUrlpJx+tz9wuz23373sDfKYvkIdKFW1Ka/RJN0w1inlQg/5I3QxpVBjWftGHMFd/j2OonFA",
	"/t3r7W1tD/p7+ztb27t7+91ef2uwzWlg4Uq3rSvVhabKKx1GQ/s6X0dD9Gs0CcUFWV0nRFv9e4cvzrmH",
	"XiLCYQXhbLb9y5Nv1XKuGsyzv7c72tkebC3AjsKHckcnLgQ1ceH7Q4BTzrxFil8Y1SDvu2gO2gLTyAXY",
	"Rk5PGwVatO4K+9UVXOdxF8F+eytTxxTfrazmsOTwwDQgPnKR7PbYUY0koRDJFAcc0qo2q8H1H3eRZ6Fw",
	"lSljAbHdIkVn3qfP94VrBaA+H+T5lVI4WnmjVJSR+rtE9NdlwtGZRqjiGy0F2uExMTxcZR/Wx/M3Rd+V",
	"fMHs+4R+llkxDJKhSF4wBz49ujg/VVq1bBNVvFCUyYMotR1WWorr/DTf52u4ejfQseixw/j2X6SEpS+M",
	"90IURqGbB56iYUYDnyE6QmGUqr6txOfrpHwiUb9XszPqx45JrhVZrZL2YwHpLRSnvHx7htgkygIfJfLc",
	"EB5xuLEMIjxHWSDPzxOZSdrXKEspY4ZgeUaNog10JnYit+x39MuQrMdlDeLzL8Fer67suu2qQqpy9YWt",
	"z5FzB/2ulnONbxfJudWmggXcKePXBjJTNQWeCpLcQL/TIEBDgmjoBZmvCjGQ/BwW7RzmqtlvgkM/ml7B",
	"K1d46ImY7oXbgQwsganpDE1Us2SOoiU63UDQN5tJfJyJbro+YdBMNyuMo4YQneV83VeEk+b7MJiVC/ES",
	"MaEmiZd0HEaJeGrQhXrOUECvCfoZ5IkOEqHXHURSb+PVBnqbsZSDecvtd5E3wQn2OBZ2EA7iCQ5lpihf",
	"1mQWTzgaRmEwq4N5EI1peDURSosN8CAPODXdDd3PX7Y6/e79fzY5i9ymJooWG0h1GiUlW1cHTfk+JS6h",
	"f0rF95+OwTr/qZTffzqw338K0eifjpiAbaD3kKss/gJqZDQQwr48gQ10EWOPuKqxji9LKdeiKB/KMbVD",
	"EfZkg5xYMZJrREphL8Ppc0mK3+r262+Z6v1iuV2gAQgXGmG8N5FXE9o3dyBdtVvyIy4cKJ7JFdsOKui1",
	"HQHljmzJWmAarIBaCzjSfa6JPraUASJPvn/RGVr8m7NzpSkT/+tKPkjmwAK3KZ9RKczhLKQpdDISZ1t8",
	"fRRAMrYSe4qyYFHu0TdIndhzcudNcDgmzDqTTm7R8VPilizdbegWM31rIj9LKlvMcQ5kCykLGReypPFb",
	"ytRVy4yrunLhFuWgX3DoB0IIOsqvzLlC0KFln6pWdJGe6q53YWisZyCL+Wis6kEulv0a37SLuNJKg4Wy",
	"dHLJz0hXVLcFWWjMEUG1viGiBTP0MiBj7M0gjowLd1zIrKCXQq1XnIAX8lWbJG6Kfi9hmnko/Kop5z2q",
	"m8osls9x33D/dxC5i2lC2BUNpYQpOW/Oci3S6UPkx/82l/MTmf06Gf7s0ff017OPf5313tEzdhaeb3tH",
	"Zztn1/Efvx39ur+xsSEC8QtLb/dpvs2ftna6XfFjvt+fXoPeJ36Gbf9kFw6bXzQNTZ5SQ3/sUDXBlZQa",
	"kvOlJnzbcOWIgtTWfAH1DkM459BgtZS9E4nonMjvRy7vcgSzORl3d3b6FaaaD38pTfoyUPa17BdWw0Pu",
	"3NvbW5cfmpslAQk5o/TneRqFUcIa913YVMG9lVNAQ5ysD+rgPwvJ+aCWRYPGkbfwhwK00UiubUigR6Ve",
	"Hhj+DcnbIL7F3dKVp8niDyjeNferdfeCjWVBnSDhDmPSILMJeGVutZA6YJQMmhMaXwmMz+FmScitnGDJ",
	"Fzx3+WImypDhOl689LvY1guCAwL4W16OAb38GNK7vDJDoVV+b2fQ3d/f7nftVTttRR8uJbThzsRp0zl6",
	"OzVzMDZ3jqRRL6F2aQoQpC5d8PnYv0aTEB1HxLFXQbZWQBZdVA3tfURF2kEbdCmRmkT5Jr43CSfTQc/F",
	"0SwwY0afRs2RTLh014gFnpkLbHjTaGPFYi+bKGIcjQyNqiQrm31iSokWdTHthuHyYY4wydPUZj6JEBYj",
	"TXtxpMp/Uz/+Sbh/nI6jFWbnwNnZ3e7t7/R3utv9LZfsxTHJdvrxTb/f/3MSxmRI9vv7w346Dvp/Trsb",
	"OI7ZhhiHY6Vcv0RK6gFUR9gdcnmHoRF29Zwwmf5L5eyrv029fdGmtMDBFY8lIQEOphIkZlGWuOKJK1Oo",
	"4RKwbksNILal/iqUInj6bU2pl0QsGqW2nemHCzdnDgPfmz/ILb41flpul58LHq643LUkJ926dAANogrv",
	"f3tW0va131v5LlTrMaUHLw7j0tC026ikanZ2bB2+GqPk2ZSuMy8KbQlqc0fybeX+Kh6Q5jfcsZGBZ7ST",
	"q11A8fRroJOrkWcmj21/FHNqFANMOzlelJZmHmLrzIscIZtcqtqjqq+M0mXyIO1LeA5rh252OUrtt14H",
	"y81nWGn5Zp4hCsktKDFmY7vKNXguPmynZi0S6IspB9UO0VKYMJZckKb27t68v3ud/iPeu5I/XhVHbNBn",
	"opjyUMGH+4fe9gXFqqEiSGa//uX/fsZf6nn932b/8/Nvg7//3rsd/vwx+3t/Pz2jt/Qfv/cm+Pfbue8M",
	"p6fpPy5g4Bv882B8/vN+wH/Hv592z/6M7t5dnvTf/vl2++3x2ezN0a8B+eWQvv/zpPf28u+zd8dn/bd/",
	"/rq/EZLbqz9v0yudTgZHoKwmzsEWyPKlk3T2Z28/zI7Sf/xr/4oPUDkWrdQ6B46wsTiFS+TBJr13Eqkt",
	"9rzm4rAZviSjFq4UU/tSsIQLuVdT1RQbdZC+OCKowJSPS1Qo3ofXrirNXIxXp9Ifh4W9BH38eHaMDOSW",
	"ERU5QRkRVuJRhZzmLBJI/ECFaSBFOXkVGtuCLycEvSic9wvDbAx9gXXFjsZHXqtxvMZ6ocjVK4XsVQuo",
	"m4e+mCcvsN23AfVEPGoD1BIzq4FgEUMmmEmDLJQs1kWQE3ITXcvaJwo/Lausm/zBq9TulOJyKQOfljC9",
	"rOKUCzWydAARBwWxHsAzCB7SwFcErM2Eja91frbzLKsABAjMUaUPXjDDGjmcQRGOcIwouBwwGgbYu+b6",
	"cQeR0YiAaSGYcZFat7sSAUsb6H3oERRE4zHHuCztGLY1D4f8dIckr3MxyhKwYNlrFqAsTGnAVwEXCA74",
	"nOIG2UCXely9Oo4/U0zDFOtm88Snsh+RCn/wkBcQHGYxGmK+jCiUw5QsXqzqiXsTjaMs/SjaXi4ryORX",
	"/H0DMfJkGqczzaiGkT9Dbk4smoxuKC6liMl241UxZFBjqszPrHDnCUDnyKFZCNVo5IvwEt/PS6PqI9ko",
	"Opv+cM/FVtyz49qytGq3ZS1I1qupi70h/5JeFZ+MBrakcOlMacvF9V7snFwYp3CQEOzPkPGyjU9mBj+q",
	"Y49FMNs49TxJwoYFcwSLBgtqMjKIECoQ0ypE6ChNk509ZDkFEaihCGMlkeWWMXfIVVxd324QrOZQmhg4",
	"oMQGWgbIAsNFstFwk8tPH7797lNWETckWZrgoJANQaS6WxssIvIrLt+eFSJGdKRXORSOc0VtIyvr6NXb",
	"RWnbItJDBGB8k6Gun1el5XvWMt2W4JaEeITeqI7olQiX/JIYbHYP/xj8Mfqd/vH3/ut/aO0fDEZ8qCs+",
	"wpW2Ube0dOlAjY/nZ0LIkdGlRVxSF9xL0MqmOPUmiNxhLw1mryqOKnawuQnG21sydHEcQ/XVtiG0HRlM",
	"U/U+LY7OQS8j5SgeZimHtQqtLS62EN8ALHVOCGzBmqKjjQzYPp6T+HuysSj8bW9naWICe3Rbi6BUzXdz",
	"ubNT4rLSGvMwA4zmCFbByeAXteqteucAVca0SwnaCv+i/MELpewapvAoyWOyCwKfJt7qskvhdfNWX33V",
	"tuQyR5BSfkEGiSPG6DAgglXgNAVvjiGDKc5dFcGqt+pjmZL42E9nQaIlFNHymRHl1jHtS+JMGwtqJkKr",
	"Oa4kuL5UakIYNRim0ywsCpE2gJ+KozWloOpJHSBx7xwoVX5E+NUFJHqABt0u4jCRGl7N0XwMwWORRsbS",
	"iNDQS0s3YGVBmntd+BHSrKuAyHc0JqkqcWmWVZsDg8IXfGc99HGxSlBav09CynVj5RyprmEVWFgngTfB",
	"g6K96WSR+FuKlW4oket09kURGGbZwDwYzch8LtiIpE5QzUEW72sjzUPEA5XDagm+aZNkKsVmIzKoGMlB",
	"2ZWsOaoitfKbSoVLzHWVt4lA03JiTaZH24ZBonBqw0ZBLQKsylVgLZ3ujPiAsu81vK5G75iFg4vwMw+g",
	"PsaOcilEusJFhdhSYU5RMcvaVtAUPeYyDftu79v6qhsVn63wEtW7rsqoHjusuKlB4GeS6vrrFpY+lx+Z",
	"Kdtt4sHMCrVMsnMq7zCl2xX5krjOiOqZX+iCL5PzdDP8koWZstQog84WmQDK/aXVKtNI5pnUJdTRKS3m",
	"0vnCYuAc9C0BltX0jg94TEMsy5qPGFR1tE2kH1pmajTRRZSkKEogIZFsjDc6KO+UcsBfFW36DzDzXtXl",
	"kURJzQqc0lhNEgRPacClyeFMNACQMTKJzpyzQkG1wGqeP5NPU6iCDrO9hOoSOBCmg7ptq+6OD57TeKnh",
	"1OawS65A1Kj/eP6m4ZR5EfxlJixSj8QKmXQNnN/nUqrqRietznVL0Ug1Skunbm1h97A1yjotSy9SfP9Y",
	"q1RtepYFZd7m5zFhqVe5LDD1MpeF5ueHiqq6rVbrNnrYn9Jwbh+9o2gaJ2RCQlYu2A5SYJQl6JYMCyXL",
	"dReBYi//g16l+//BVjth2taeyuzMJfYhO1ZtyqZqtc2iBnXd9Nq2UVO76evSMGrH24vbgkF1G32h8uOc",
	"YHY1ha5UsnuWuLDhcpZXKlyfUYoD56BX1CObtb2VNzjUwZQGuk5ZMFZdO5o1knzLpZczfu6WijOfLfKm",
	"XkKNrNVYjHo28inEZRY2YUilJk4xhyt0dicVNASGoMuQ3BbpTXa0tQqdmOmWREWhUoxX7K6zrIOmYSNl",
	"0QSokcm+19Jk/w22GS113fzcjuN9rZaQLfsZfm5syzIx0ZaOZCK8EnMKYZgN85e58CiD18uENFdIfG45",
	"t02Zj6BzhCuNg2r4T0Up3vxSqod2L4AaEJvr8Bh+Z6X5/g9KCIekJxslCyUJaLTMl8QApa5f87TdqhXK",
	"1lILMoShXbs2S4HMFmOoiCdpo1z5bV6xg3ZWLYswN7AlABc0LL5eW7BxrxUWbrV6e/AMcFbgQHOc7dRa",
	"bRJKbmREI2Rm+iTFNICufVjFNHhFTKGj3IQ5wSzvn1qxKj8GkiZyzc8HTbuPIQrYWPwpP6CSjQFO68dA",
	"eoWtbdA+xqk3sQTD8CMisobMB4gk0cjLRPDuPO4sCoxu5ky6iv0w6GPgP/R9/LrY31QGdgH6/1WlgRqH",
	"QmRJqy8dDpLdzkmYTSFf2xfbiwPsiWCYaXQD7e/Ef7wohp5FhKWGLd9wh+DUgh6AFvwRGKtxMibWhkba",
	"FVpJo8rAzM3hUXUyRLFsGdYkl+7+/uuxm8JdK9CuNrHnUSS+b5FJfRBW12CmCLUNs7J1gD3N8sHYw/nS",
	"RxjoB2dMj62cr0n0OZPox5aE2UDh28zNFg3K0quXEWYs8igcmki2sUvcC0TrYzX3Sij5K9FvxeXwFt/R",
	"aTZFofbVgtTwUB/tVAzrHPS6XWidLv9q4lR9V10Ku6bxcj5cPbXNn/tAx8anL06bmv1Fu9dh4k1oSqA5",
	"jlG1X67x+PTYVa1Q5SyD7R2yu7ffnTNLL5/F1hGgOvbn1jXc5WjzjOl1xQY08f4Q7K9ibM/3b+eB6CIb",
	"uqpBVnMLvBwVOJvqkq1yJOazt4rlPceUb5fBPZKAImAlAXSu60CtyIPQbA3qeCwkJh/ZDdJr2aTeGG1Q",
	"UFOybCOnbH7Jm7vMNVd/IMkUhyKUVCjXnL4VbevyuHPpuWKx/h7oudN4tQpY8xZqtNp5apO6ItG1Nb0t",
	"wS20qhvyfDuKsQr4a3J5cnLpPuUd+UMZ838mqYU8Wkig9Yb9Wb1ZX9qo9LQxTlLp68pXMN+QvybGJyTG",
	"JT0NhTZ4vn9EgqCY5XTo+1LG8kgQqJD0HAXyHnhRDMF+vrLZHzib/BO26Zq5UBNCx5PUOdjpyiCVkNy6",
	"/D1RKjLAQxLIIlkfkki6S9kEw5Zj/cst9fkUvX6349xJE8UM/nsPmSzY93V/4sp+dKAXdChstBP1SXEz",
	"14QPeUMSVsj4cvob0FLuvuMIMnons1AqljWFNDKUurSE3FmjllF8T47iK/sAgnnu6/q6FV1I/Hq19jIV",
	"vqWy20h6ifIltXQb1bqEHub0eUoLc4OL6XszLA/6/efpKWp/C9o8RkeiuxkBjQ0Q21TZwNAM2qXocr7A",
	"PbS+7p7hdbckda+ZyrfsrXoqa5DRcJnMswxdQjcRXQ9vXkNOWfi2TsQ+CX2JFdZGrGvW8wysREfWcxWt",
	"In88i9FJ6OsDs2L8nA60jWIxVbaunZxUkGaBrETJQfVKjGdBhH1EQx+yHRi6nUR5fTyjvqdUfuSHHaiu",
	"wt+lrNo/XfpxdD/zvIAln7vf7UJ9jowZ0xrNV2XoJg6QK6u+M1Fh9937S8R/zzing1RxufpC2yK1NTGF",
	"tZX6mo18n9Yze4NuSyr+PHL5cQxry7OmJo7d+is+ITiAXE29AuLTlIZj2To3CusEBA+HiNxRlkL/MfU1",
	"ThGGqrLQYBLrt1XZUPiCdXRzyEF3XwXSBDS85uzjz0jyLHiXhmPNsmrczmsW8pxYSO+ZsBCb/1pder25",
	"lx58yYdY7s4TA2180+aW7v4DqlnqGlWlCs9QsGlKGMNjoiBvkHeJR9jCtzlrsLfB+Xj+xs476hhqXs5x",
	"BTrXorqPAiLG+hsVqbGidRFIeVMZpak9fqTDslfV8urt1LCgL/LfBkFuVich/5npEk55MFOdXpsLpNpq",
	"v75BnrcQ2ijUUJ9mixjDMhr9eMLoNKeBFUYZFuA6a0GcBWlvTZ/ftpk7p8injXwszlsKYC9i5joCcim5",
	"oC3XeLhcsDnMguv6WviK/UyzIKVxQKoCAg25qkrDcUCMxMXmnOl1FlyvudM3xp1aCw5TfHcmvjFKB7aI",
	"AOh9XbnmbRnr1/ytGX/j1C2B9TWZ3JdrMpsb+H2ug711tFyNrKV2MZyhazKrif4usbLXs7/Bq2t+9pj8",
	"rJpUp07wmszyii/2JYmzrF+LMXd/e1m3YklI+uFj0MscISeqlUekL0fNVZvGmpSfBSmrujhPRczdr6BE",
	"/bhGk9Z8wBoZ+FFWkYgSKYFwhrCAD+jaibniYuMLYug1a3iOrEGE2j0iY1hF17KaYjp6L+J5ARi9bn+w",
	"yFkiPnu8tlgrtxOt4yJbxUU+kFE20qTyIqQLux/Eldq8+uslEuFLaYB6Hd95oY8cZM+i2EdhOc+x4Ico",
	"Oi1X+YayUo/bN1ZMREbpbLOUmVFxt1q6NBW9nhSRqs5gYlQc+ohTd0Bx6BHEUhz6OIFuY00L9/aKhXtV",
	"LpIXYMa40lJaLgAwCXEAxUjq8pZ6G30oKKLKnKjFn5uLV8TldJxilXQ/8tgG3xYOZ1ArXW3eNTe/Efsj",
	"x9KGQ5RUwWZJFQ4mnzA6DrUuJhIUW8Cp/xhw6svCKxJOxTowYsHNoWRu2RXbFTD6LOuvq0rv25wHk2mc",
	"zqqYK9p4K5QEllqHq+Vhu6UuYaUK7SZLb1ZeRu28YhstTVwJk+cPrcxN3gXlKlQVzlSQZ3zjEjDnbRID",
	"UmEEP1DBmwLYG5X+WrbsjcLWVdS9ycntByp8Y95qQk3VcChwh0KtFH0l+TnMalSK5a+xR7iausZzVYtf",
	"PdU3TUrw9ImusOa9FXOOuOJ+BcbB+/aTvzB0I+14KhAeGpOQkxbx0dnxY6DCV5Zovhe0KR2HOsK1M3GZ",
	"clH5Qa5e920bFVG6bxuEQ8y9GvOYiO9OIX7Q/TjMY0VMkbaCIZZzwSmKQq9YoGGx9qK+V3zLwttkiW7F",
	"jszPF+gfvXr9YynFo04re+J73ycxTtKiUJLT+CIG3ZwvSwWryItL9XG4zlIxagh2a3Z6baoKPUUUix3f",
	"/RqEnysbsKpwwAoE0KTPUXsieaCw8FCCatP8aJVUtwQwH0sM6z8FFbdqMvUIpP5AQ0a9PLaO7loquss0",
	"1axeIPuiW0I27jiVl1tTgvayBTy/B8NEC9+uAtdc525+HE9fw1MtcF3Es7Ua1Jnv07M3xLJZ+ZZw5a3p",
	"5yvQzwrLHDWxZfzQZT1b0+LcuKWHEGC1stmaBp+UBh+huFkrC/QTk/06jqdtfbNHNV8WpOVGOeC6Xc/U",
	"CKdzQfFDMaaJNRM830M1bFo++9Gyub7hu3/lWVOaO2icgpiGHyesubz/Vfnem6WC11Fn0YK+JtBvXTBY",
	"p4N/d+ngyzKOVUgJT5cRXsegXlfcfGsm9S0wqXVW+JrNLe03+Dq8bmFiuMWdUJK8RApGG/4mc8RLvO2H",
	"Sh/7igzu6dLEt9dp4qtJE6/okavKE5d5TKsjbYvlY03Xz4SuV5gzvr3OGX92xpXVJo2vkinIbPE1X3ie",
	"fGFlCePbT58w/o7cilxxjY9FbHXWGeM/eMb4A9lkEy3rsfxLLUJMvgsD0bNz4FyaQPlBnTipDQZP6shp",
	"l0X5/VDC2lOyvt4WeUoeRJ1t7rYn84q0Twz70Sl+7XZY84zWboenYxyP6WJol8fwHVse1jb8Z27Dt9Lb",
	"V7fjL6Fh/gDEszaUf/cK7Fc3lrfLXviBiG9tjV5bo79ba/QqeFET4Vu9vUwJU/Et8iKfoISMSEJCjzy8",
	"numFXNJ3Xs1UQv551DI1FvNsK5mKNdbXMbWjo1nkSyP7p2ob+4RA83OOTGINUF5C9UNX7SeTGwqlcRrW",
	"l+h17fUlAhyOMzw2q3eMI6OmhBfdkKT4fG/7/zNeUOzkinnYrE8RY8aIXyiXU9zUhd6CSVxfnISMLsWR",
	"DRMcehMghtFvctgppqFhcBnTaumPMU0n2RCKUcjCFJsceK6CWRX7jnGKh5gRhOFGQAGekQSg/v78LaL8",
	"3JcoltLrLQdyX67GBGbE0nFC2L8CE6B62W/4eucAMsXjIhRvehv9ja32cPSHLsCmWiR1a241U4O3NzKt",
	"Ccb74EqmipcsVceUaea/bBXTGjbw45Q0NeD/mAVNrXBeRXVTiYZrr1wtgT6tT86ctVSWSaBAfvpr+/oS",
	"9RlZCYqPIN639cmVl/SYTrnvQdxfUa3Gi/zCrq/UWD2bxRUbQbzNGBeviuJgEI2pt5zAxGXCFNOGNWY/",
	"8slLsujbyM8C0kQCSkgcbQ6DaLjJZ92M+C76m3xDG3JNNaKlF4Uh8WC2KQ7xmMiw08XV9Gg4SjBLk6xc",
	"T89LKN9BwOk8f31CxxOrlHiUr+BDFAVL7NYfbsZRFMBOmxVxrKJI62KOuSz4FUs5WunBWshRyTwrL+O4",
	"kHJALdlZuobjiqisTYnBxybF9kBeSK5Ngdx/VNJuA+Snof8HqXV18tw6TGKZMAlDcV218PZF/GOJeo52",
	"HW3J4o7fgV7WPA+jfIXOXbE+nycv8FjRwNaFHpfWp5Yq+LjQCtLa8bEmsK9GYN2vYTP5ketALk+qTaMs",
	"HkaflfCKNYk+PYl+XTvqV+EJ62CJlkUin8KGaojhj5bIZ9lHRWIQ2PKDFXr69sWFlWc3SK7xg2YbsuLu",
	"nzTPcCGVmub8NaF+H0LDOiXye3O/LslCHiozPFmC5EI29brkeVyzqm+HVa1zOdfMbkknxdNzvMfM7FzI",
	"5cTYRQ73I5WU+vpsbp2E+q15UUqM4qunn7a3i6wp/FlR+DpT9js2vnz1HNmF7EGMveYQz5hDrNN51+m8",
	"362H6mEMs4n+JX5YLpFXfvvgzN1LuYbvPHNXgetZZO4ai3m2mbtijfWZuyb+mcYJzW01cttjuHtub/uy",
	"1z3YWhBeTMM/ZShuOkmibDxBUxxQj0YZQxf/8wZxoFHSpn/8Vk3/eJyScZSYUcT8jasbHFBfJLTmUcfR",
	"LWbxVRrFV5AurD447G4ZL2HG6Dgk/lUazQ8Epykdc/g4ByMcMGKPWhYAGxwMtkvd5//nDTrTQPotC0KS",
	"4CGVAdFxQiPB9JwsGYvIbEZuiPztFzrmJMpSnGaML9lLKQj8ZWptBNluXSy5WHuvNmA/oCRMXUZ9gsTv",
	"xrHflHbUdDGDxsdMwzhLW57zbuuT61XizY+SiDH3gqYEXQhohGP08o+Li1fFg5sSn2bT4sG91b+po9Os",
	"2X/A8ZWTlXv9udnKxgXWyHgsLpsHZysr3rNUtnKqL7xls5XVCD9OerIB8MdMT5YjryAfWSLaOh+5hgTP",
	"OMt7aq+4ov7aUtxr99ASqcipQvVVqyWbQ5x6kyYeIO32LvCJB2ce8+krGS3fpb5yFE2n2GWEb6mq5KGz",
	"Y5Z7XNBLsjHe6CDq9zrU73eov8V3QO7iIPKJFkRsGoXcEvXZ3N3oq7y8rdI+yv7pKQ3lX73qBc/SWcB/",
	"4GM6Dzb+FsUQ6fqpEx+qipfJYJTjyCI5dPTIHGRzcnctwxlnZ+bvLgRpyadelF2KGy0ur4kEI4lnjq9s",
	"zWgLfnjOghTdGYLjo3DazVjxW7usdMgpgjD068X7d+gDrEwzTOAPzdiwnc/CeN8Zm20lQbkA/f+yZreX",
	"AFRKbhdHUQE+GEZ8OgLrfWoclWkkgUlldTPjDfGnc+AkJA6wTF7h23Q2E8qur/h74dhQSKU6yG+Wmu8C",
	"ek0COoki3/jsTXQrdD51MTgHzm6TvHgxUXW92PeNOXUsiWvuWWjWCbmh5JaYq+HHLY6t5Xr6kGQ9R0/V",
	"YDYut+Ib5mbmvFSlyhIhIpm3TsJsylmEAEh+HAmZRmBgkf/xohhMyoSZOmh+HQhQlicFFsAfcbJPcTIG",
	"O2Hl4xrPB9Q2419yGqheMlGsjrB6pVgU9/yoyvOcHZe4QRohweM6i+5Bq84u2INxUrb15SJJr7vgNlVY",
	"8RQunAeZR+ovcrGF9UXe7CIHaD3qPd4uSni16pKtUNMPd43XV6ax3t3lQk3qRBaXZzpMU+xdk0RaqlnJ",
	"LQHJq8pjAbVowMrMgTeNsZfmtnfjYjbMuk0t19JKbpYZTRPqm6VTUjyNiYDl5xqvgdgMPzRDupArtHnX",
	"1E7FrwyRO+JlXKGgIWz2BUPDJLplUAFHb1hvrrBlCYZmG75jrPVW55rZbRtuVrDJcOK1K9OUc/lnGN7d",
	"/gpaG+2W7c/DVhR89Xj3SSWXfn2flKBSuk9k6MgS98lHGZxj/Aonxhn1AmfobrNKZnMvHq4JPuTWkZ5Q",
	"YV/IK1tLHKF/Ed9VnnqzwqDcdKPbSOm4rdmziHtCL6cZSxENvSDzOW6iESWB/+rp2faz0BzWwWAt2HZm",
	"Nnh4FM3hi1Zx2+bcSJa6ZIGw78BR2mm72gbr/AplwSQqrYuBtfRoLlUCrBpp0Dpkck0zT0wz3acLRPiR",
	"63u1pb44jxKo9VbFFm/V8tRo91Wt6fHx6XEFzjTs+2+NQkw5Gh76fh5rD/ihMTHXmVo6mXQQZa6TyCjY",
	"e+0qaz5ao3jee04TQl68kKGZX2pbhYngTeifY1Og6r2AMuozX0UeiTrHB5i/pD8UGsqiL4pq3Zlq8wMG",
	"vzhLUR47C3sp6H0o1/s0ZATFHksuOwdAHKNhSB362gA4QAb5cu1KptaY6mFcmdI5ksWm531m0nF1EaZ6",
	"L0Lno8SoJ1lXK7roh+SyPoTflh1+wkFZ9j1KV2O+1Ja+x1q/4kM8h6tSlE3eIr1h8mjrK9Arr5lx72h9",
	"GIwCBR99++SFZof94IyFOdytXQ5CXkz9hlyZCZka7387cfvd/sDt9bcGK8hZmEuSC5MWNBWuMnGhSHgP",
	"kh7XTtlmgucHnKQUc4LMVE3I1sJnw6TklhJmjd17LWI+HxHzESPen1DRXFthWxaNfbxod8MC+2ilYvXq",
	"68xLP1Yxt2/VtrTyQmkSiX/QsrBpcfdPWha2hiILgVRrovyGb/91CdjvLe1tSXbxUFngyUrA1rCkSnzn",
	"mi09c7a0Lve6ZmxLhgY+PXd7zHKvNRytEIzyAxZ4+1osbV3a9VuLiSkxha9e2rWpHWNNzc+AmtdlXL9j",
	"Y8lXL+NawwoKHpQ1N3g+3GBdsnVdsvW79Q89jDmKGZMbO2N6E3k4QD65IUEUT0mYIvFuoTv8weZmwN+b",
	"RCw92OvudZ37z/f/LwAA//8rw2mCykICAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
