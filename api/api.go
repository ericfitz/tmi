// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiInfoStatusCode.
const (
	ERROR ApiInfoStatusCode = "ERROR"
	OK    ApiInfoStatusCode = "OK"
)

// Defines values for AuthorizationRole.
const (
	Owner  AuthorizationRole = "owner"
	Reader AuthorizationRole = "reader"
	Writer AuthorizationRole = "writer"
)

// Defines values for PatchDiagramsIdJSONBodyOp.
const (
	PatchDiagramsIdJSONBodyOpAdd     PatchDiagramsIdJSONBodyOp = "add"
	PatchDiagramsIdJSONBodyOpCopy    PatchDiagramsIdJSONBodyOp = "copy"
	PatchDiagramsIdJSONBodyOpMove    PatchDiagramsIdJSONBodyOp = "move"
	PatchDiagramsIdJSONBodyOpRemove  PatchDiagramsIdJSONBodyOp = "remove"
	PatchDiagramsIdJSONBodyOpReplace PatchDiagramsIdJSONBodyOp = "replace"
	PatchDiagramsIdJSONBodyOpTest    PatchDiagramsIdJSONBodyOp = "test"
)

// Defines values for PatchThreatModelsIdJSONBodyOp.
const (
	PatchThreatModelsIdJSONBodyOpAdd     PatchThreatModelsIdJSONBodyOp = "add"
	PatchThreatModelsIdJSONBodyOpCopy    PatchThreatModelsIdJSONBodyOp = "copy"
	PatchThreatModelsIdJSONBodyOpMove    PatchThreatModelsIdJSONBodyOp = "move"
	PatchThreatModelsIdJSONBodyOpRemove  PatchThreatModelsIdJSONBodyOp = "remove"
	PatchThreatModelsIdJSONBodyOpReplace PatchThreatModelsIdJSONBodyOp = "replace"
	PatchThreatModelsIdJSONBodyOpTest    PatchThreatModelsIdJSONBodyOp = "test"
)

// ApiInfo API information response for the root endpoint
type ApiInfo struct {
	Api struct {
		// Specification URL to the API specification
		Specification string `json:"specification"`

		// Version API version
		Version string `json:"version"`
	} `json:"api"`
	Operator *struct {
		// Contact Operator contact information from environment variables
		Contact string `json:"contact"`

		// Name Operator name from environment variables
		Name string `json:"name"`
	} `json:"operator,omitempty"`
	Service struct {
		// Build Current build number
		Build string `json:"build"`

		// Name Name of the service
		Name string `json:"name"`
	} `json:"service"`
	Status struct {
		// Code Status code indicating if the API is functioning correctly
		Code ApiInfoStatusCode `json:"code"`

		// Time Current server time in UTC, formatted as RFC 3339
		Time time.Time `json:"time"`
	} `json:"status"`
}

// ApiInfoStatusCode Status code indicating if the API is functioning correctly
type ApiInfoStatusCode string

// Authorization A user-role pair defining access permissions
type Authorization struct {
	// Role Role: reader (view), writer (edit), owner (full control)
	Role AuthorizationRole `json:"role"`

	// Subject Username or identifier of the user (may be email address or other format)
	Subject string `json:"subject"`
}

// AuthorizationRole Role: reader (view), writer (edit), owner (full control)
type AuthorizationRole string

// CollaborationSession Details of an active collaboration session for a diagram
type CollaborationSession struct {
	// DiagramId UUID of the associated diagram
	DiagramId openapi_types.UUID `json:"diagram_id"`

	// Participants List of active participants
	Participants []struct {
		// JoinedAt Join timestamp
		JoinedAt *time.Time `json:"joined_at,omitempty"`

		// UserId Username or identifier of the participant (may be email address or other format)
		UserId *string `json:"user_id,omitempty"`
	} `json:"participants"`

	// SessionId Unique identifier for the session
	SessionId string `json:"session_id"`

	// WebsocketUrl WebSocket URL for real-time updates
	WebsocketUrl string `json:"websocket_url"`
}

// Diagram A diagram object supporting collaborative editing
type Diagram struct {
	// Authorization List of users and their roles for this diagram
	Authorization []Authorization `json:"authorization"`

	// Components List of diagram components (maxGraph cells)
	Components *[]DiagramComponent `json:"components,omitempty"`

	// CreatedAt Creation timestamp (ISO8601)
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the diagram
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the diagram
	Id openapi_types.UUID `json:"id"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (ISO8601)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Owner Username or identifier of the current owner (may be email address or other format)
	Owner string `json:"owner"`
}

// DiagramComponent A component within a diagram, based on maxGraph cells
type DiagramComponent struct {
	// Data Component properties (e.g., position, label)
	Data map[string]interface{} `json:"data"`

	// Id Unique identifier for the component
	Id openapi_types.UUID `json:"id"`

	// Metadata Key-value pairs for component metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// Type Component type (e.g., vertex, edge)
	Type string `json:"type"`
}

// Error Standard error response format
type Error struct {
	// Error Error code
	Error string `json:"error"`

	// Message Error description
	Message string `json:"message"`
}

// ListItem A simplified item for list endpoints, containing name and ID
type ListItem struct {
	// Id Unique identifier of the resource
	Id openapi_types.UUID `json:"id"`

	// Name Name of the resource
	Name string `json:"name"`
}

// Metadata A key-value pair for extensible metadata
type Metadata struct {
	// Key Metadata key
	Key string `json:"key"`

	// Value Metadata value
	Value string `json:"value"`
}

// Threat A threat within a threat model
type Threat struct {
	// CreatedAt Creation timestamp (ISO8601)
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the threat
	Description *string `json:"description,omitempty"`

	// Id Unique identifier for the threat
	Id openapi_types.UUID `json:"id"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (ISO8601)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat
	Name string `json:"name"`

	// ThreatModelId UUID of the parent threat model
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`
}

// ThreatModel A threat model object for documenting threats
type ThreatModel struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// CreatedAt Creation timestamp (ISO8601)
	CreatedAt time.Time `json:"created_at"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Diagrams List of diagram UUIDs associated with this threat model
	Diagrams *[]openapi_types.UUID `json:"diagrams,omitempty"`

	// Id Unique identifier for the threat model
	Id openapi_types.UUID `json:"id"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (ISO8601)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat model
	Name string `json:"name"`

	// Owner Username or identifier of the current owner (may be email address or other format)
	Owner string `json:"owner"`

	// Threats List of threats within the threat model
	Threats *[]Threat `json:"threats,omitempty"`
}

// GetAuthCallbackParams defines parameters for GetAuthCallback.
type GetAuthCallbackParams struct {
	// Code Authorization code from the OAuth provider
	Code string `form:"code" json:"code"`

	// State Optional state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// GetAuthLoginParams defines parameters for GetAuthLogin.
type GetAuthLoginParams struct {
	// RedirectUri Optional URI to redirect to after login
	RedirectUri *string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty"`
}

// GetDiagramsParams defines parameters for GetDiagrams.
type GetDiagramsParams struct {
	// Limit Number of diagrams to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostDiagramsJSONBody defines parameters for PostDiagrams.
type PostDiagramsJSONBody struct {
	// Description Description of the diagram
	Description *string `json:"description,omitempty"`

	// Name Name of the diagram
	Name string `json:"name"`
}

// PatchDiagramsIdJSONBody defines parameters for PatchDiagramsId.
type PatchDiagramsIdJSONBody = []struct {
	// Op Patch operation type
	Op PatchDiagramsIdJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchDiagramsIdJSONBodyOp defines parameters for PatchDiagramsId.
type PatchDiagramsIdJSONBodyOp string

// GetThreatModelsParams defines parameters for GetThreatModels.
type GetThreatModelsParams struct {
	// Limit Number of threat models to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`
}

// PostThreatModelsJSONBody defines parameters for PostThreatModels.
type PostThreatModelsJSONBody struct {
	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Name Name of the threat model
	Name string `json:"name"`
}

// PatchThreatModelsIdJSONBody defines parameters for PatchThreatModelsId.
type PatchThreatModelsIdJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelsIdJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelsIdJSONBodyOp defines parameters for PatchThreatModelsId.
type PatchThreatModelsIdJSONBodyOp string

// PostDiagramsJSONRequestBody defines body for PostDiagrams for application/json ContentType.
type PostDiagramsJSONRequestBody PostDiagramsJSONBody

// PatchDiagramsIdJSONRequestBody defines body for PatchDiagramsId for application/json ContentType.
type PatchDiagramsIdJSONRequestBody = PatchDiagramsIdJSONBody

// PutDiagramsIdJSONRequestBody defines body for PutDiagramsId for application/json ContentType.
type PutDiagramsIdJSONRequestBody = Diagram

// PostThreatModelsJSONRequestBody defines body for PostThreatModels for application/json ContentType.
type PostThreatModelsJSONRequestBody PostThreatModelsJSONBody

// PatchThreatModelsIdJSONRequestBody defines body for PatchThreatModelsId for application/json ContentType.
type PatchThreatModelsIdJSONRequestBody = PatchThreatModelsIdJSONBody

// PutThreatModelsIdJSONRequestBody defines body for PutThreatModelsId for application/json ContentType.
type PutThreatModelsIdJSONRequestBody = ThreatModel

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	GetApiInfo(ctx echo.Context) error
	// Handle OAuth callback
	// (GET /auth/callback)
	GetAuthCallback(ctx echo.Context, params GetAuthCallbackParams) error
	// Initiate OAuth login
	// (GET /auth/login)
	GetAuthLogin(ctx echo.Context, params GetAuthLoginParams) error
	// Logout user
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// List diagrams
	// (GET /diagrams)
	GetDiagrams(ctx echo.Context, params GetDiagramsParams) error
	// Create a diagram
	// (POST /diagrams)
	PostDiagrams(ctx echo.Context) error
	// Delete a diagram
	// (DELETE /diagrams/{id})
	DeleteDiagramsId(ctx echo.Context, id openapi_types.UUID) error
	// Retrieve a diagram
	// (GET /diagrams/{id})
	GetDiagramsId(ctx echo.Context, id openapi_types.UUID) error
	// Partially update a diagram
	// (PATCH /diagrams/{id})
	PatchDiagramsId(ctx echo.Context, id openapi_types.UUID) error
	// Update a diagram
	// (PUT /diagrams/{id})
	PutDiagramsId(ctx echo.Context, id openapi_types.UUID) error
	// Leave collaboration session
	// (DELETE /diagrams/{id}/collaborate)
	DeleteDiagramsIdCollaborate(ctx echo.Context, id openapi_types.UUID) error
	// Get collaboration session status
	// (GET /diagrams/{id}/collaborate)
	GetDiagramsIdCollaborate(ctx echo.Context, id openapi_types.UUID) error
	// Join or start collaboration session
	// (POST /diagrams/{id}/collaborate)
	PostDiagramsIdCollaborate(ctx echo.Context, id openapi_types.UUID) error
	// List threat models
	// (GET /threat_models)
	GetThreatModels(ctx echo.Context, params GetThreatModelsParams) error
	// Create a threat model
	// (POST /threat_models)
	PostThreatModels(ctx echo.Context) error
	// Delete a threat model
	// (DELETE /threat_models/{id})
	DeleteThreatModelsId(ctx echo.Context, id openapi_types.UUID) error
	// Retrieve a threat model
	// (GET /threat_models/{id})
	GetThreatModelsId(ctx echo.Context, id openapi_types.UUID) error
	// Partially update a threat model
	// (PATCH /threat_models/{id})
	PatchThreatModelsId(ctx echo.Context, id openapi_types.UUID) error
	// Update a threat model
	// (PUT /threat_models/{id})
	PutThreatModelsId(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiInfo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiInfo(ctx)
	return err
}

// GetAuthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthCallback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthCallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthCallback(ctx, params)
	return err
}

// GetAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetAuthLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAuthLoginParams
	// ------------- Optional query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAuthLogin(ctx, params)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetDiagrams converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiagrams(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiagramsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiagrams(ctx, params)
	return err
}

// PostDiagrams converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiagrams(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDiagrams(ctx)
	return err
}

// DeleteDiagramsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDiagramsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDiagramsId(ctx, id)
	return err
}

// GetDiagramsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiagramsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiagramsId(ctx, id)
	return err
}

// PatchDiagramsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchDiagramsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchDiagramsId(ctx, id)
	return err
}

// PutDiagramsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutDiagramsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutDiagramsId(ctx, id)
	return err
}

// DeleteDiagramsIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDiagramsIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteDiagramsIdCollaborate(ctx, id)
	return err
}

// GetDiagramsIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiagramsIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiagramsIdCollaborate(ctx, id)
	return err
}

// PostDiagramsIdCollaborate converts echo context to params.
func (w *ServerInterfaceWrapper) PostDiagramsIdCollaborate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDiagramsIdCollaborate(ctx, id)
	return err
}

// GetThreatModels converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModels(ctx, params)
	return err
}

// PostThreatModels converts echo context to params.
func (w *ServerInterfaceWrapper) PostThreatModels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostThreatModels(ctx)
	return err
}

// DeleteThreatModelsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteThreatModelsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteThreatModelsId(ctx, id)
	return err
}

// GetThreatModelsId converts echo context to params.
func (w *ServerInterfaceWrapper) GetThreatModelsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetThreatModelsId(ctx, id)
	return err
}

// PatchThreatModelsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchThreatModelsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchThreatModelsId(ctx, id)
	return err
}

// PutThreatModelsId converts echo context to params.
func (w *ServerInterfaceWrapper) PutThreatModelsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutThreatModelsId(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetApiInfo)
	router.GET(baseURL+"/auth/callback", wrapper.GetAuthCallback)
	router.GET(baseURL+"/auth/login", wrapper.GetAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/diagrams", wrapper.GetDiagrams)
	router.POST(baseURL+"/diagrams", wrapper.PostDiagrams)
	router.DELETE(baseURL+"/diagrams/:id", wrapper.DeleteDiagramsId)
	router.GET(baseURL+"/diagrams/:id", wrapper.GetDiagramsId)
	router.PATCH(baseURL+"/diagrams/:id", wrapper.PatchDiagramsId)
	router.PUT(baseURL+"/diagrams/:id", wrapper.PutDiagramsId)
	router.DELETE(baseURL+"/diagrams/:id/collaborate", wrapper.DeleteDiagramsIdCollaborate)
	router.GET(baseURL+"/diagrams/:id/collaborate", wrapper.GetDiagramsIdCollaborate)
	router.POST(baseURL+"/diagrams/:id/collaborate", wrapper.PostDiagramsIdCollaborate)
	router.GET(baseURL+"/threat_models", wrapper.GetThreatModels)
	router.POST(baseURL+"/threat_models", wrapper.PostThreatModels)
	router.DELETE(baseURL+"/threat_models/:id", wrapper.DeleteThreatModelsId)
	router.GET(baseURL+"/threat_models/:id", wrapper.GetThreatModelsId)
	router.PATCH(baseURL+"/threat_models/:id", wrapper.PatchThreatModelsId)
	router.PUT(baseURL+"/threat_models/:id", wrapper.PutThreatModelsId)

}
