// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AuthTokenResponseTokenType.
const (
	Bearer AuthTokenResponseTokenType = "Bearer"
)

// AuthTokenResponse JWT token response for authentication endpoints
type AuthTokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token"`

	// TokenType Token type
	TokenType AuthTokenResponseTokenType `json:"token_type"`
}

// AuthTokenResponseTokenType Token type
type AuthTokenResponseTokenType string

// Error Standard error response format
type Error struct {
	// Details Additional context-specific error information
	Details *struct {
		// Code Machine-readable error code for programmatic handling
		Code *string `json:"code,omitempty"`

		// Context Contextual information about the error
		Context *map[string]interface{} `json:"context,omitempty"`

		// Suggestion Human-readable suggestion for resolving the error
		Suggestion *string `json:"suggestion,omitempty"`
	} `json:"details"`

	// Error Error code
	Error string `json:"error"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `json:"error_description"`

	// ErrorUri URI to documentation about the error
	ErrorUri *string `json:"error_uri,omitempty"`
}

// MarkupElement SVG/HTML markup element for custom shape definitions in X6
type MarkupElement struct {
	// Attrs Element attributes and styling properties
	Attrs *map[string]interface{} `json:"attrs,omitempty"`

	// Children Nested child elements
	Children *[]MarkupElement `json:"children,omitempty"`

	// Selector CSS selector for targeting this element in styling
	Selector *string `json:"selector,omitempty"`

	// TagName SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')
	TagName string `json:"tagName"`
}

// ProcessSAMLResponseFormdataBody defines parameters for ProcessSAMLResponse.
type ProcessSAMLResponseFormdataBody struct {
	// RelayState State parameter for CSRF protection
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`

	// SAMLResponse Base64-encoded SAML response
	SAMLResponse string `form:"SAMLResponse" json:"SAMLResponse"`
}

// InitiateSAMLLoginParams defines parameters for InitiateSAMLLogin.
type InitiateSAMLLoginParams struct {
	// ClientCallback Client callback URL to redirect after authentication
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`
}

// ProcessSAMLLogoutParams defines parameters for ProcessSAMLLogout.
type ProcessSAMLLogoutParams struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ProcessSAMLLogoutPostFormdataBody defines parameters for ProcessSAMLLogoutPost.
type ProcessSAMLLogoutPostFormdataBody struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ProcessSAMLResponseFormdataRequestBody defines body for ProcessSAMLResponse for application/x-www-form-urlencoded ContentType.
type ProcessSAMLResponseFormdataRequestBody ProcessSAMLResponseFormdataBody

// ProcessSAMLLogoutPostFormdataRequestBody defines body for ProcessSAMLLogoutPost for application/x-www-form-urlencoded ContentType.
type ProcessSAMLLogoutPostFormdataRequestBody ProcessSAMLLogoutPostFormdataBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// SAML Assertion Consumer Service
	// (POST /saml/acs)
	ProcessSAMLResponse(c *gin.Context)
	// Initiate SAML authentication
	// (GET /saml/login)
	InitiateSAMLLogin(c *gin.Context, params InitiateSAMLLoginParams)
	// Get SAML service provider metadata
	// (GET /saml/metadata)
	GetSAMLMetadata(c *gin.Context)
	// SAML Single Logout
	// (GET /saml/slo)
	ProcessSAMLLogout(c *gin.Context, params ProcessSAMLLogoutParams)
	// SAML Single Logout (POST)
	// (POST /saml/slo)
	ProcessSAMLLogoutPost(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ProcessSAMLResponse operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLResponse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLResponse(c)
}

// InitiateSAMLLogin operation middleware
func (siw *ServerInterfaceWrapper) InitiateSAMLLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InitiateSAMLLoginParams

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InitiateSAMLLogin(c, params)
}

// GetSAMLMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetSAMLMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSAMLMetadata(c)
}

// ProcessSAMLLogout operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogout(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProcessSAMLLogoutParams

	// ------------- Required query parameter "SAMLRequest" -------------

	if paramValue := c.Query("SAMLRequest"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument SAMLRequest is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "SAMLRequest", c.Request.URL.Query(), &params.SAMLRequest)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter SAMLRequest: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogout(c, params)
}

// ProcessSAMLLogoutPost operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogoutPost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogoutPost(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/saml/acs", wrapper.ProcessSAMLResponse)
	router.GET(options.BaseURL+"/saml/login", wrapper.InitiateSAMLLogin)
	router.GET(options.BaseURL+"/saml/metadata", wrapper.GetSAMLMetadata)
	router.GET(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogout)
	router.POST(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogoutPost)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
