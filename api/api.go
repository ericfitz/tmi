// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiInfoStatusCode.
const (
	ERROR ApiInfoStatusCode = "ERROR"
	OK    ApiInfoStatusCode = "OK"
)

// Defines values for AssetType.
const (
	AssetTypeData           AssetType = "data"
	AssetTypeHardware       AssetType = "hardware"
	AssetTypeInfrastructure AssetType = "infrastructure"
	AssetTypePersonnel      AssetType = "personnel"
	AssetTypeService        AssetType = "service"
	AssetTypeSoftware       AssetType = "software"
)

// Defines values for AssetBaseType.
const (
	AssetBaseTypeData           AssetBaseType = "data"
	AssetBaseTypeHardware       AssetBaseType = "hardware"
	AssetBaseTypeInfrastructure AssetBaseType = "infrastructure"
	AssetBaseTypePersonnel      AssetBaseType = "personnel"
	AssetBaseTypeService        AssetBaseType = "service"
	AssetBaseTypeSoftware       AssetBaseType = "software"
)

// Defines values for AuthTokenResponseTokenType.
const (
	Bearer AuthTokenResponseTokenType = "Bearer"
)

// Defines values for AuthorizationRole.
const (
	AuthorizationRoleOwner  AuthorizationRole = "owner"
	AuthorizationRoleReader AuthorizationRole = "reader"
	AuthorizationRoleWriter AuthorizationRole = "writer"
)

// Defines values for AuthorizationSubjectType.
const (
	AuthorizationSubjectTypeGroup AuthorizationSubjectType = "group"
	AuthorizationSubjectTypeUser  AuthorizationSubjectType = "user"
)

// Defines values for BaseDiagramType.
const (
	BaseDiagramTypeDFD100 BaseDiagramType = "DFD-1.0.0"
)

// Defines values for CreateDiagramRequestType.
const (
	CreateDiagramRequestTypeDFD100 CreateDiagramRequestType = "DFD-1.0.0"
)

// Defines values for DfdDiagramType.
const (
	DfdDiagramTypeDFD100 DfdDiagramType = "DFD-1.0.0"
)

// Defines values for DiagramListItemType.
const (
	DiagramListItemTypeDFD100 DiagramListItemType = "DFD-1.0.0"
)

// Defines values for EdgeShape.
const (
	EdgeShapeEdge EdgeShape = "edge"
)

// Defines values for EdgeAttrsLineSourceMarkerName.
const (
	EdgeAttrsLineSourceMarkerNameBlock   EdgeAttrsLineSourceMarkerName = "block"
	EdgeAttrsLineSourceMarkerNameCircle  EdgeAttrsLineSourceMarkerName = "circle"
	EdgeAttrsLineSourceMarkerNameClassic EdgeAttrsLineSourceMarkerName = "classic"
	EdgeAttrsLineSourceMarkerNameDiamond EdgeAttrsLineSourceMarkerName = "diamond"
)

// Defines values for EdgeAttrsLineTargetMarkerName.
const (
	EdgeAttrsLineTargetMarkerNameBlock   EdgeAttrsLineTargetMarkerName = "block"
	EdgeAttrsLineTargetMarkerNameCircle  EdgeAttrsLineTargetMarkerName = "circle"
	EdgeAttrsLineTargetMarkerNameClassic EdgeAttrsLineTargetMarkerName = "classic"
	EdgeAttrsLineTargetMarkerNameDiamond EdgeAttrsLineTargetMarkerName = "diamond"
)

// Defines values for EdgeConnector0.
const (
	EdgeConnector0Jumpover EdgeConnector0 = "jumpover"
	EdgeConnector0Normal   EdgeConnector0 = "normal"
	EdgeConnector0Rounded  EdgeConnector0 = "rounded"
	EdgeConnector0Smooth   EdgeConnector0 = "smooth"
)

// Defines values for EdgeConnector1ArgsJump.
const (
	Arc   EdgeConnector1ArgsJump = "arc"
	Cubic EdgeConnector1ArgsJump = "cubic"
	Gap   EdgeConnector1ArgsJump = "gap"
)

// Defines values for EdgeConnector1Name.
const (
	EdgeConnector1NameJumpover EdgeConnector1Name = "jumpover"
	EdgeConnector1NameNormal   EdgeConnector1Name = "normal"
	EdgeConnector1NameRounded  EdgeConnector1Name = "rounded"
	EdgeConnector1NameSmooth   EdgeConnector1Name = "smooth"
)

// Defines values for EdgeRouter0.
const (
	EdgeRouter0Er        EdgeRouter0 = "er"
	EdgeRouter0Manhattan EdgeRouter0 = "manhattan"
	EdgeRouter0Metro     EdgeRouter0 = "metro"
	EdgeRouter0Normal    EdgeRouter0 = "normal"
	EdgeRouter0OneSide   EdgeRouter0 = "oneSide"
	EdgeRouter0Orth      EdgeRouter0 = "orth"
)

// Defines values for EdgeRouter1ArgsDirections.
const (
	EdgeRouter1ArgsDirectionsBottom EdgeRouter1ArgsDirections = "bottom"
	EdgeRouter1ArgsDirectionsLeft   EdgeRouter1ArgsDirections = "left"
	EdgeRouter1ArgsDirectionsRight  EdgeRouter1ArgsDirections = "right"
	EdgeRouter1ArgsDirectionsTop    EdgeRouter1ArgsDirections = "top"
)

// Defines values for EdgeRouter1Name.
const (
	EdgeRouter1NameEr        EdgeRouter1Name = "er"
	EdgeRouter1NameManhattan EdgeRouter1Name = "manhattan"
	EdgeRouter1NameMetro     EdgeRouter1Name = "metro"
	EdgeRouter1NameNormal    EdgeRouter1Name = "normal"
	EdgeRouter1NameOneSide   EdgeRouter1Name = "oneSide"
	EdgeRouter1NameOrth      EdgeRouter1Name = "orth"
)

// Defines values for ExtendedAssetType.
const (
	Data           ExtendedAssetType = "data"
	Hardware       ExtendedAssetType = "hardware"
	Infrastructure ExtendedAssetType = "infrastructure"
	Personnel      ExtendedAssetType = "personnel"
	Service        ExtendedAssetType = "service"
	Software       ExtendedAssetType = "software"
)

// Defines values for NodeShape.
const (
	Actor            NodeShape = "actor"
	Process          NodeShape = "process"
	SecurityBoundary NodeShape = "security-boundary"
	Store            NodeShape = "store"
	TextBox          NodeShape = "text-box"
)

// Defines values for ParticipantPermissions.
const (
	ParticipantPermissionsReader ParticipantPermissions = "reader"
	ParticipantPermissionsWriter ParticipantPermissions = "writer"
)

// Defines values for PortConfigurationGroupsPosition.
const (
	PortConfigurationGroupsPositionBottom PortConfigurationGroupsPosition = "bottom"
	PortConfigurationGroupsPositionLeft   PortConfigurationGroupsPosition = "left"
	PortConfigurationGroupsPositionRight  PortConfigurationGroupsPosition = "right"
	PortConfigurationGroupsPositionTop    PortConfigurationGroupsPosition = "top"
)

// Defines values for RepositoryParametersRefType.
const (
	RepositoryParametersRefTypeBranch RepositoryParametersRefType = "branch"
	RepositoryParametersRefTypeCommit RepositoryParametersRefType = "commit"
	RepositoryParametersRefTypeTag    RepositoryParametersRefType = "tag"
)

// Defines values for RepositoryType.
const (
	RepositoryTypeGit       RepositoryType = "git"
	RepositoryTypeMercurial RepositoryType = "mercurial"
	RepositoryTypeOther     RepositoryType = "other"
	RepositoryTypeSvn       RepositoryType = "svn"
)

// Defines values for RepositoryBaseParametersRefType.
const (
	RepositoryBaseParametersRefTypeBranch RepositoryBaseParametersRefType = "branch"
	RepositoryBaseParametersRefTypeCommit RepositoryBaseParametersRefType = "commit"
	RepositoryBaseParametersRefTypeTag    RepositoryBaseParametersRefType = "tag"
)

// Defines values for RepositoryBaseType.
const (
	RepositoryBaseTypeGit       RepositoryBaseType = "git"
	RepositoryBaseTypeMercurial RepositoryBaseType = "mercurial"
	RepositoryBaseTypeOther     RepositoryBaseType = "other"
	RepositoryBaseTypeSvn       RepositoryBaseType = "svn"
)

// Defines values for ThreatSeverity.
const (
	ThreatSeverityCritical ThreatSeverity = "Critical"
	ThreatSeverityHigh     ThreatSeverity = "High"
	ThreatSeverityLow      ThreatSeverity = "Low"
	ThreatSeverityMedium   ThreatSeverity = "Medium"
	ThreatSeverityNone     ThreatSeverity = "None"
	ThreatSeverityUnknown  ThreatSeverity = "Unknown"
)

// Defines values for ThreatBaseSeverity.
const (
	ThreatBaseSeverityCritical ThreatBaseSeverity = "Critical"
	ThreatBaseSeverityHigh     ThreatBaseSeverity = "High"
	ThreatBaseSeverityLow      ThreatBaseSeverity = "Low"
	ThreatBaseSeverityMedium   ThreatBaseSeverity = "Medium"
	ThreatBaseSeverityNone     ThreatBaseSeverity = "None"
	ThreatBaseSeverityUnknown  ThreatBaseSeverity = "Unknown"
)

// Defines values for PatchThreatModelApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for GetThreatModelThreatsParamsSeverity.
const (
	Critical GetThreatModelThreatsParamsSeverity = "Critical"
	High     GetThreatModelThreatsParamsSeverity = "High"
	Low      GetThreatModelThreatsParamsSeverity = "Low"
	Medium   GetThreatModelThreatsParamsSeverity = "Medium"
	None     GetThreatModelThreatsParamsSeverity = "None"
	Unknown  GetThreatModelThreatsParamsSeverity = "Unknown"
)

// Defines values for BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp.
const (
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpAdd     BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "add"
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpCopy    BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "copy"
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpMove    BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "move"
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpRemove  BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "remove"
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpReplace BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "replace"
	BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpTest    BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "test"
)

// Defines values for PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "test"
)

// ApiInfo API information response for the root endpoint
type ApiInfo struct {
	Api struct {
		// Specification URL to the API specification
		Specification string `json:"specification"`

		// Version API version
		Version string `json:"version"`
	} `json:"api"`
	Operator struct {
		// Contact Operator contact information from environment variables
		Contact string `json:"contact"`

		// Name Operator name from environment variables
		Name string `json:"name"`
	} `json:"operator"`
	Service struct {
		// Build Current build number
		Build string `json:"build"`

		// Name Name of the service
		Name string `json:"name"`
	} `json:"service"`
	Status struct {
		// Code Status code indicating if the API is functioning correctly
		Code ApiInfoStatusCode `json:"code"`

		// Time Current server time in UTC, formatted as RFC 3339
		Time time.Time `json:"time"`
	} `json:"status"`
}

// ApiInfoStatusCode Status code indicating if the API is functioning correctly
type ApiInfoStatusCode string

// Asset defines model for Asset.
type Asset struct {
	// Classification Classification tags for the asset
	Classification *[]string `json:"classification"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Criticality Criticality level of the asset
	Criticality *string `json:"criticality"`

	// Description Description of the asset
	Description *string `json:"description"`

	// Id Unique identifier for the asset
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Optional metadata key-value pairs
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Asset name
	Name string `binding:"required" json:"name"`

	// Sensitivity Sensitivity labels for the asset
	Sensitivity *[]string `json:"sensitivity"`

	// Type Type of asset
	Type AssetType `binding:"required" json:"type"`
}

// AssetType Type of asset
type AssetType string

// AssetBase Base fields for Asset (user-writable only)
type AssetBase struct {
	// Classification Classification tags for the asset
	Classification *[]string `json:"classification"`

	// Criticality Criticality level of the asset
	Criticality *string `json:"criticality"`

	// Description Description of the asset
	Description *string `json:"description"`

	// Name Asset name
	Name string `binding:"required" json:"name"`

	// Sensitivity Sensitivity labels for the asset
	Sensitivity *[]string `json:"sensitivity"`

	// Type Type of asset
	Type AssetBaseType `binding:"required" json:"type"`
}

// AssetBaseType Type of asset
type AssetBaseType string

// AssetInput Base fields for Asset (user-writable only)
type AssetInput = AssetBase

// AuthTokenResponse JWT token response for authentication endpoints
type AuthTokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token"`

	// TokenType Token type
	TokenType AuthTokenResponseTokenType `json:"token_type"`
}

// AuthTokenResponseTokenType Token type
type AuthTokenResponseTokenType string

// Authorization Authorization entry defining access permissions for users or groups
type Authorization struct {
	// Idp Identity provider (required for groups, optional for users)
	Idp *string `json:"idp,omitempty"`

	// Role Role: reader (view), writer (edit), owner (full control)
	Role AuthorizationRole `binding:"required" json:"role"`

	// Subject Email address or user id for users, group name for groups
	Subject string `binding:"required" json:"subject"`

	// SubjectType Type of authorization subject: user (individual) or group
	SubjectType AuthorizationSubjectType `binding:"required" json:"subject_type"`
}

// AuthorizationRole Role: reader (view), writer (edit), owner (full control)
type AuthorizationRole string

// AuthorizationSubjectType Type of authorization subject: user (individual) or group
type AuthorizationSubjectType string

// BaseDiagram Base diagram object with common properties
type BaseDiagram struct {
	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the diagram
	Description *string `json:"description"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Image Image data with version information
	Image *struct {
		// Svg BASE64 encoded SVG representation of the diagram, used for thumbnails and reports
		Svg *[]byte `json:"svg,omitempty"`

		// UpdateVector Version of the diagram when this SVG was generated. If not provided when svg is updated, will be auto-set to BaseDiagram.update_vector
		UpdateVector *int64 `json:"update_vector,omitempty"`
	} `json:"image"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type BaseDiagramType `json:"type"`

	// UpdateVector Server-managed monotonic version counter, incremented on each diagram update
	UpdateVector *int64 `json:"update_vector,omitempty"`
}

// BaseDiagramType Type of diagram with version
type BaseDiagramType string

// Cell Base schema for all diagram cells (nodes and edges) in AntV X6 native format. This schema matches X6's toJSON() output exactly, enabling zero-transformation persistence. X6-specific properties like markup, tools, router, and connector are fully supported.
type Cell struct {
	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Cell_Data `json:"data,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Shape Shape type identifier that determines cell structure and behavior
	Shape string `json:"shape"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Cell_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Cell_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CellTool Interactive tool configuration for X6 cells
type CellTool struct {
	// Args Tool-specific configuration arguments
	Args *map[string]interface{} `json:"args,omitempty"`

	// Name Tool identifier (e.g., 'boundary', 'button', 'remove')
	Name string `json:"name"`
}

// CollaborationSession Details of an active collaboration session for a diagram
type CollaborationSession struct {
	// DiagramId Unique identifier of the associated diagram (UUID)
	DiagramId openapi_types.UUID `json:"diagram_id"`

	// DiagramName Name of the associated diagram
	DiagramName string `json:"diagram_name"`

	// Host Email address of the session host
	Host *string `json:"host,omitempty"`

	// Participants List of active participants
	Participants []Participant `json:"participants"`

	// Presenter Email address of the current presenter
	Presenter *string `json:"presenter,omitempty"`

	// SessionId Unique identifier for the session (UUID)
	SessionId *openapi_types.UUID `json:"session_id,omitempty"`

	// ThreatModelId Unique identifier of the associated threat model (UUID)
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// ThreatModelName Name of the associated threat model
	ThreatModelName string `json:"threat_model_name"`

	// WebsocketUrl WebSocket URL for real-time updates
	WebsocketUrl string `json:"websocket_url"`
}

// CreateDiagramRequest Request body for creating a new diagram - only includes client-provided fields
type CreateDiagramRequest struct {
	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type CreateDiagramRequestType `json:"type"`
}

// CreateDiagramRequestType Type of diagram with version
type CreateDiagramRequestType string

// DeletionChallenge Challenge response for user account deletion
type DeletionChallenge struct {
	// ChallengeText The exact challenge string that must be provided to confirm deletion
	ChallengeText string `json:"challenge_text"`

	// ExpiresAt When the challenge expires (3 minutes from issuance)
	ExpiresAt time.Time `json:"expires_at"`
}

// DfdDiagram defines model for DfdDiagram.
type DfdDiagram struct {
	// Cells List of diagram cells (nodes and edges) following X6 structure
	Cells []DfdDiagram_Cells_Item `json:"cells"`

	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Description Optional description of the diagram
	Description *string `json:"description"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Image Image data with version information
	Image *struct {
		// Svg BASE64 encoded SVG representation of the diagram, used for thumbnails and reports
		Svg *[]byte `json:"svg,omitempty"`

		// UpdateVector Version of the diagram when this SVG was generated. If not provided when svg is updated, will be auto-set to BaseDiagram.update_vector
		UpdateVector *int64 `json:"update_vector,omitempty"`
	} `json:"image"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type DFD diagram type with version
	Type DfdDiagramType `json:"type"`

	// UpdateVector Server-managed monotonic version counter, incremented on each diagram update
	UpdateVector *int64 `json:"update_vector,omitempty"`
}

// DfdDiagram_Cells_Item defines model for DfdDiagram.cells.Item.
type DfdDiagram_Cells_Item struct {
	union json.RawMessage
}

// DfdDiagramType DFD diagram type with version
type DfdDiagramType string

// Diagram defines model for Diagram.
type Diagram struct {
	union json.RawMessage
}

// DiagramListItem A simplified diagram item for list endpoints, containing id, name, and type
type DiagramListItem struct {
	// Id Unique identifier of the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of the diagram
	Type DiagramListItemType `json:"type"`
}

// DiagramListItemType Type of the diagram
type DiagramListItemType string

// Document defines model for Document.
type Document struct {
	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of document purpose or content
	Description *string `json:"description"`

	// Id Unique identifier for the document
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Optional metadata key-value pairs
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Document name
	Name string `binding:"required" json:"name"`

	// Uri URL location of the document
	Uri string `binding:"required,url" json:"uri"`
}

// DocumentBase Base fields for Document (user-writable only)
type DocumentBase struct {
	// Description Description of document purpose or content
	Description *string `json:"description"`

	// Name Document name
	Name string `binding:"required" json:"name"`

	// Uri URL location of the document
	Uri string `binding:"required,url" json:"uri"`
}

// DocumentInput Base fields for Document (user-writable only)
type DocumentInput = DocumentBase

// Edge defines model for Edge.
type Edge struct {
	// Attrs Visual styling attributes for the edge
	Attrs *EdgeAttrs `json:"attrs,omitempty"`

	// Connector Edge connector style configuration for visual appearance
	Connector *EdgeConnector `json:"connector,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Edge_Data `json:"data,omitempty"`

	// DefaultLabel Default label configuration applied to edges without explicit labels
	DefaultLabel *EdgeLabel `json:"defaultLabel,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Labels Text labels positioned along the edge
	Labels *[]EdgeLabel `json:"labels,omitempty"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Router Edge routing algorithm configuration for path calculation
	Router *EdgeRouter `json:"router,omitempty"`

	// Shape Edge type identifier
	Shape EdgeShape `json:"shape"`

	// Source Source connection point
	Source EdgeTerminal `json:"source"`

	// Target Target connection point
	Target EdgeTerminal `json:"target"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Vertices Intermediate waypoints for edge routing
	Vertices *[]Point `json:"vertices,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Edge_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Edge_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeShape Edge type identifier
type EdgeShape string

// EdgeAttrs Visual attributes for an edge
type EdgeAttrs struct {
	// Line Line styling attributes
	Line *struct {
		// SourceMarker Source marker configuration
		SourceMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineSourceMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"sourceMarker,omitempty"`

		// Stroke Line color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for the line
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Line width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`

		// TargetMarker Arrowhead marker configuration
		TargetMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineTargetMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"targetMarker,omitempty"`
	} `json:"line,omitempty"`
}

// EdgeAttrsLineSourceMarkerName Marker type
type EdgeAttrsLineSourceMarkerName string

// EdgeAttrsLineTargetMarkerName Marker type
type EdgeAttrsLineTargetMarkerName string

// EdgeConnector Edge connector style configuration for visual appearance
type EdgeConnector struct {
	union json.RawMessage
}

// EdgeConnector0 Built-in connector name
type EdgeConnector0 string

// EdgeConnector1 Connector with custom configuration
type EdgeConnector1 struct {
	// Args Connector-specific arguments
	Args *EdgeConnector_1_Args `json:"args,omitempty"`

	// Name Connector style name
	Name EdgeConnector1Name `json:"name"`
}

// EdgeConnector1ArgsJump Jump style for jumpover connectors
type EdgeConnector1ArgsJump string

// EdgeConnector_1_Args Connector-specific arguments
type EdgeConnector_1_Args struct {
	// Jump Jump style for jumpover connectors
	Jump *EdgeConnector1ArgsJump `json:"jump,omitempty"`

	// Precision Precision for smooth connectors
	Precision *float32 `json:"precision,omitempty"`

	// Radius Radius for rounded connectors
	Radius *float32 `json:"radius,omitempty"`

	// Size Jump size for jumpover connectors
	Size                 *float32               `json:"size,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeConnector1Name Connector style name
type EdgeConnector1Name string

// EdgeLabel Label positioned along an edge
type EdgeLabel struct {
	// Attrs Label styling attributes
	Attrs *struct {
		// Text Text styling
		Text *struct {
			// Fill Text color
			Fill *string `json:"fill,omitempty"`

			// FontFamily Font family
			FontFamily *string `json:"fontFamily,omitempty"`

			// FontSize Font size in pixels
			FontSize *float32 `json:"fontSize,omitempty"`

			// Text Label text content
			Text *string `json:"text,omitempty"`
		} `json:"text,omitempty"`
	} `json:"attrs,omitempty"`

	// Position Position along the edge (0 = start, 1 = end)
	Position *float32 `json:"position,omitempty"`
}

// EdgeRouter Edge routing algorithm configuration for pathfinding
type EdgeRouter struct {
	union json.RawMessage
}

// EdgeRouter0 Built-in router name
type EdgeRouter0 string

// EdgeRouter1 Router with custom configuration
type EdgeRouter1 struct {
	// Args Router-specific arguments
	Args *EdgeRouter_1_Args `json:"args,omitempty"`

	// Name Router algorithm name
	Name EdgeRouter1Name `json:"name"`
}

// EdgeRouter1ArgsDirections defines model for EdgeRouter.1.Args.Directions.
type EdgeRouter1ArgsDirections string

// EdgeRouter_1_Args Router-specific arguments
type EdgeRouter_1_Args struct {
	// Directions Allowed routing directions
	Directions *[]EdgeRouter1ArgsDirections `json:"directions,omitempty"`

	// Padding Padding around obstacles for routing
	Padding *float32 `json:"padding,omitempty"`

	// Step Grid step size for orthogonal routing
	Step                 *float32               `json:"step,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeRouter1Name Router algorithm name
type EdgeRouter1Name string

// EdgeTerminal Connection point for an edge (source or target)
type EdgeTerminal struct {
	// Cell ID of the connected node (UUID)
	Cell openapi_types.UUID `json:"cell"`

	// Port ID of the specific port on the node (optional)
	Port *string `json:"port"`
}

// Error Standard error response format
type Error struct {
	// Details Additional context-specific error information
	Details *struct {
		// Code Machine-readable error code for programmatic handling
		Code *string `json:"code,omitempty"`

		// Context Contextual information about the error
		Context *map[string]interface{} `json:"context,omitempty"`

		// Suggestion Human-readable suggestion for resolving the error
		Suggestion *string `json:"suggestion,omitempty"`
	} `json:"details"`

	// Error Error code
	Error string `json:"error"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `json:"error_description"`

	// ErrorUri URI to documentation about the error
	ErrorUri *string `json:"error_uri,omitempty"`
}

// ExtendedAsset defines model for ExtendedAsset.
type ExtendedAsset struct {
	// Classification Classification tags for the asset
	Classification *[]string `json:"classification"`

	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Criticality Criticality level of the asset
	Criticality *string `json:"criticality"`

	// Description Description of the asset
	Description *string `json:"description"`

	// Id Unique identifier for the asset
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Optional metadata key-value pairs
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Asset name
	Name string `binding:"required" json:"name"`

	// Sensitivity Sensitivity labels for the asset
	Sensitivity *[]string `json:"sensitivity"`

	// ThreatModelId ID of the threat model this asset belongs to
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// Type Type of asset
	Type ExtendedAssetType `binding:"required" json:"type"`
}

// ExtendedAssetType Type of asset
type ExtendedAssetType string

// MarkupElement SVG/HTML markup element for custom shape definitions in X6
type MarkupElement struct {
	// Attrs Element attributes and styling properties
	Attrs *map[string]interface{} `json:"attrs,omitempty"`

	// Children Nested child elements
	Children *[]MarkupElement `json:"children,omitempty"`

	// Selector CSS selector for targeting this element in styling
	Selector *string `json:"selector,omitempty"`

	// TagName SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')
	TagName string `json:"tagName"`
}

// Metadata A key-value pair for extensible metadata
type Metadata struct {
	// Key Metadata key
	Key string `binding:"required" json:"key"`

	// Value Metadata value
	Value string `binding:"required" json:"value"`
}

// Node defines model for Node.
type Node struct {
	// Angle Rotation angle in degrees
	Angle *float32 `json:"angle,omitempty"`

	// Attrs Visual styling attributes for the node
	Attrs *NodeAttrs `json:"attrs,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Node_Data `json:"data,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Parent ID of the parent cell for nested/grouped nodes (UUID)
	Parent *openapi_types.UUID `json:"parent"`

	// Ports Port configuration for connections
	Ports *PortConfiguration `json:"ports,omitempty"`

	// Position Node position in X6 format
	Position struct {
		// X X coordinate
		X float32 `json:"x"`

		// Y Y coordinate
		Y float32 `json:"y"`
	} `json:"position"`

	// Shape Node type determining its visual representation and behavior
	Shape NodeShape `json:"shape"`

	// Size Node size in X6 format
	Size struct {
		// Height Height in pixels
		Height float32 `json:"height"`

		// Width Width in pixels
		Width float32 `json:"width"`
	} `json:"size"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Node_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Node_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NodeShape Node type determining its visual representation and behavior
type NodeShape string

// NodeAttrs Visual attributes for a node
type NodeAttrs struct {
	// Body Body/shape styling attributes
	Body *struct {
		// Fill Fill color
		Fill *string `json:"fill,omitempty"`

		// Stroke Stroke color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for strokes
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Stroke width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`
	} `json:"body,omitempty"`

	// Text Text/label styling attributes
	Text *struct {
		// Fill Text color
		Fill *string `json:"fill,omitempty"`

		// FontFamily Font family
		FontFamily *string `json:"fontFamily,omitempty"`

		// FontSize Font size in pixels
		FontSize *float32 `json:"fontSize,omitempty"`

		// Text Label text content
		Text *string `json:"text,omitempty"`
	} `json:"text,omitempty"`
}

// Note defines model for Note.
type Note struct {
	// Content Note content in markdown format
	Content string `binding:"required" json:"content"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of note purpose or context
	Description *string `json:"description"`

	// Id Unique identifier for the note
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Optional metadata key-value pairs
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Note name
	Name string `binding:"required" json:"name"`
}

// NoteBase Base fields for Note (user-writable only)
type NoteBase struct {
	// Content Note content in markdown format
	Content string `binding:"required" json:"content"`

	// Description Description of note purpose or context
	Description *string `json:"description"`

	// Name Note name
	Name string `binding:"required" json:"name"`
}

// NoteInput Base fields for Note (user-writable only)
type NoteInput = NoteBase

// NoteListItem Summary information for Note in list responses
type NoteListItem struct {
	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of note purpose or context
	Description *string `json:"description"`

	// Id Unique identifier for the note
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional note metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Note name
	Name string `binding:"required" json:"name"`
}

// OAuthProtectedResourceMetadata OAuth 2.0 protected resource metadata as defined in RFC 9728
type OAuthProtectedResourceMetadata struct {
	// AuthorizationServers List of authorization server issuer identifiers that can issue tokens for this resource
	AuthorizationServers *[]string `json:"authorization_servers,omitempty"`

	// BearerMethodsSupported Supported token presentation methods for bearer tokens
	BearerMethodsSupported *[]string `json:"bearer_methods_supported,omitempty"`

	// JwksUrl URL of the protected resource's JSON Web Key Set
	JwksUrl *string `json:"jwks_url,omitempty"`

	// Resource The protected resource's resource identifier URL
	Resource string `json:"resource"`

	// ResourceDocumentation URL with information for developers on how to use this protected resource
	ResourceDocumentation *string `json:"resource_documentation,omitempty"`

	// ResourceName Human-readable name of the protected resource
	ResourceName *string `json:"resource_name,omitempty"`

	// ScopesSupported JSON array of OAuth scope values supported by this protected resource
	ScopesSupported *[]string `json:"scopes_supported,omitempty"`

	// TlsClientCertificateBoundAccessTokens Whether the protected resource supports TLS client certificate bound access tokens
	TlsClientCertificateBoundAccessTokens *bool `json:"tls_client_certificate_bound_access_tokens,omitempty"`
}

// Participant A participant in a collaboration session
type Participant struct {
	// LastActivity Last activity timestamp
	LastActivity time.Time `json:"last_activity"`

	// Permissions Access permissions in the collaboration session
	Permissions ParticipantPermissions `json:"permissions"`

	// User Represents a user in the system
	User User `json:"user"`
}

// ParticipantPermissions Access permissions in the collaboration session
type ParticipantPermissions string

// Point A 2D point with x and y coordinates
type Point struct {
	// X X coordinate
	X float32 `json:"x"`

	// Y Y coordinate
	Y float32 `json:"y"`
}

// PortConfiguration Port configuration for node connections
type PortConfiguration struct {
	// Groups Port group definitions
	Groups *map[string]struct {
		// Position Port position on the node
		Position *PortConfigurationGroupsPosition `json:"position,omitempty"`
	} `json:"groups,omitempty"`

	// Items Individual port instances
	Items *[]struct {
		// Group Port group this port belongs to
		Group string `json:"group"`

		// Id Unique port identifier
		Id string `json:"id"`
	} `json:"items,omitempty"`
}

// PortConfigurationGroupsPosition Port position on the node
type PortConfigurationGroupsPosition string

// Repository defines model for Repository.
type Repository struct {
	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the referenced source code
	Description *string `json:"description"`

	// Id Unique identifier for the repository
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Optional metadata key-value pairs
	Metadata *[]Metadata `json:"metadata,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name for the source code reference
	Name *string `json:"name,omitempty"`

	// Parameters repo-specific parameters for retrieving the source
	Parameters *struct {
		// RefType Reference type (branch, tag, or commit)
		RefType RepositoryParametersRefType `json:"refType"`

		// RefValue Reference value (branch name, tag value, or commit id)
		RefValue string `json:"refValue"`

		// SubPath Sub-path within the repository
		SubPath *string `json:"subPath,omitempty"`
	} `json:"parameters,omitempty"`

	// Type Source code repository type
	Type *RepositoryType `json:"type,omitempty"`

	// Uri URL to retrieve the referenced source code
	Uri string `json:"uri"`
}

// RepositoryParametersRefType Reference type (branch, tag, or commit)
type RepositoryParametersRefType string

// RepositoryType Source code repository type
type RepositoryType string

// RepositoryBase Base fields for Repository (user-writable only)
type RepositoryBase struct {
	// Description Description of the referenced source code
	Description *string `json:"description"`

	// Name Name for the source code reference
	Name *string `json:"name,omitempty"`

	// Parameters repo-specific parameters for retrieving the source
	Parameters *struct {
		// RefType Reference type (branch, tag, or commit)
		RefType RepositoryBaseParametersRefType `json:"refType"`

		// RefValue Reference value (branch name, tag value, or commit id)
		RefValue string `json:"refValue"`

		// SubPath Sub-path within the repository
		SubPath *string `json:"subPath,omitempty"`
	} `json:"parameters,omitempty"`

	// Type Source code repository type
	Type *RepositoryBaseType `json:"type,omitempty"`

	// Uri URL to retrieve the referenced source code
	Uri string `json:"uri"`
}

// RepositoryBaseParametersRefType Reference type (branch, tag, or commit)
type RepositoryBaseParametersRefType string

// RepositoryBaseType Source code repository type
type RepositoryBaseType string

// RepositoryInput Base fields for Repository (user-writable only)
type RepositoryInput = RepositoryBase

// TMListItem Enhanced item for threat model list endpoints with key metadata and counts
type TMListItem struct {
	// AssetCount Number of assets associated with this threat model
	AssetCount int `json:"asset_count"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy Email address, name or identifier of the creator
	CreatedBy string `json:"created_by"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// DiagramCount Number of diagrams associated with this threat model
	DiagramCount int `json:"diagram_count"`

	// DocumentCount Number of documents associated with this threat model
	DocumentCount int `json:"document_count"`

	// Id Unique identifier of the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system
	IssueUri *string `json:"issue_uri,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat model
	Name string `json:"name"`

	// NoteCount Number of notes associated with this threat model
	NoteCount int `json:"note_count"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// RepoCount Number of source code repository entries associated with this threat model
	RepoCount int `json:"repo_count"`

	// ThreatCount Number of threats defined in this threat model
	ThreatCount int `json:"threat_count"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// Threat defines model for Threat.
type Threat struct {
	// AssetId Unique identifier of the associated asset (if applicable) (UUID)
	AssetId *openapi_types.UUID `json:"asset_id"`

	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// Id Unique identifier for the threat (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatModelId Unique identifier of the parent threat model (UUID)
	ThreatModelId *openapi_types.UUID `json:"threat_model_id,omitempty"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatSeverity Severity level of the threat
type ThreatSeverity string

// ThreatBase Base schema for Threat with client-writable fields
type ThreatBase struct {
	// AssetId Unique identifier of the associated asset (if applicable) (UUID)
	AssetId *openapi_types.UUID `json:"asset_id"`

	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// IssueUri URL to an issue in an issue tracking system for this threat
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatBaseSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatBaseSeverity Severity level of the threat
type ThreatBaseSeverity string

// ThreatInput Base schema for Threat with client-writable fields
type ThreatInput = ThreatBase

// ThreatModel defines model for ThreatModel.
type ThreatModel struct {
	// Assets List of assets associated with the threat model
	Assets *[]ExtendedAsset `json:"assets,omitempty"`

	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy User name, email or identifier of the creator of the threat model
	CreatedBy *string `json:"created_by,omitempty"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Diagrams List of diagram objects associated with this threat model
	Diagrams *[]Diagram `json:"diagrams,omitempty"`

	// Documents List of documents related to the threat model
	Documents *[]Document `json:"documents,omitempty"`

	// Id Unique identifier for the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Notes List of notes associated with the threat model
	Notes *[]Note `json:"notes,omitempty"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// Repositories List of source code repositories related to the threat model
	Repositories *[]Repository `json:"repositories,omitempty"`

	// Status Status of the threat model in the organization's threat modeling or SDLC process. Examples: "Not started", "In progress", "Review", "Approved", "Closed"
	Status *[]string `json:"status"`

	// StatusUpdated Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.
	StatusUpdated *time.Time `json:"status_updated"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`

	// Threats List of threats within the threat model
	Threats *[]Threat `json:"threats,omitempty"`
}

// ThreatModelBase Base schema for ThreatModel with client-writable fields
type ThreatModelBase struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// Status Status of the threat model in the organization's threat modeling or SDLC process. Examples: "Not started", "In progress", "Review", "Approved", "Closed"
	Status *[]string `json:"status"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// ThreatModelInput Input schema for creating/updating ThreatModel
type ThreatModelInput struct {
	// Authorization List of users and their roles for this threat model
	Authorization *[]Authorization `json:"authorization,omitempty"`

	// Description Description of the threat model and its purpose
	Description *string `json:"description"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `json:"name"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework *string `json:"threat_model_framework,omitempty"`
}

// User Represents a user in the system
type User struct {
	// Email User's email address
	Email string `json:"email"`

	// Groups Groups the user belongs to (from identity provider)
	Groups *[]string `json:"groups,omitempty"`

	// Idp Identity provider used for current session
	Idp *string `json:"idp,omitempty"`

	// LastLogin Timestamp of user's last login
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User's display name
	Name string `json:"name"`

	// Picture URL to user's profile picture
	Picture *string `json:"picture,omitempty"`

	// UserId OAuth provider's unique identifier for the user (from primary provider)
	UserId string `json:"user_id"`
}

// AuthorizeOAuthProviderParams defines parameters for AuthorizeOAuthProvider.
type AuthorizeOAuthProviderParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`

	// ClientCallback Client callback URL where TMI should redirect after successful OAuth completion with tokens as query parameters. If not provided, tokens are returned as JSON response.
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`

	// State CSRF protection state parameter. Recommended for security. Will be included in the callback response.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// LoginHint User identity hint for test OAuth provider. Allows specifying a desired user identity for testing and automation. Only supported by the test provider (ignored by production providers like Google, GitHub, etc.). Must be 3-20 characters, alphanumeric and hyphens only.
	LoginHint *string `form:"login_hint,omitempty" json:"login_hint,omitempty"`

	// Scope OAuth 2.0 scope parameter. For OpenID Connect, must include "openid". Supports "profile" and "email" scopes. Other scopes are silently ignored. Space-separated values.
	Scope string `form:"scope" json:"scope"`
}

// HandleOAuthCallbackParams defines parameters for HandleOAuthCallback.
type HandleOAuthCallbackParams struct {
	// Code Authorization code from the OAuth provider
	Code string `form:"code" json:"code"`

	// State Optional state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// IntrospectTokenFormdataBody defines parameters for IntrospectToken.
type IntrospectTokenFormdataBody struct {
	// Token The JWT token to introspect
	Token string `form:"token" json:"token"`

	// TokenTypeHint Optional hint about the type of token being introspected
	TokenTypeHint *string `form:"token_type_hint" json:"token_type_hint"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	// RefreshToken Valid refresh token
	RefreshToken string `json:"refresh_token"`
}

// LogoutUserJSONBody defines parameters for LogoutUser.
type LogoutUserJSONBody = map[string]interface{}

// ExchangeOAuthCodeJSONBody defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeJSONBody struct {
	// Code Authorization code received from OAuth provider
	Code string `json:"code"`

	// RedirectUri Redirect URI used in the authorization request (must match exactly)
	RedirectUri string `json:"redirect_uri"`

	// State State parameter for CSRF protection (optional but recommended)
	State *string `json:"state,omitempty"`
}

// ExchangeOAuthCodeParams defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`
}

// ProcessSAMLResponseFormdataBody defines parameters for ProcessSAMLResponse.
type ProcessSAMLResponseFormdataBody struct {
	// RelayState State parameter for CSRF protection
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`

	// SAMLResponse Base64-encoded SAML response
	SAMLResponse string `form:"SAMLResponse" json:"SAMLResponse"`
}

// InitiateSAMLLoginParams defines parameters for InitiateSAMLLogin.
type InitiateSAMLLoginParams struct {
	// ClientCallback Client callback URL to redirect after authentication
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`
}

// ProcessSAMLLogoutParams defines parameters for ProcessSAMLLogout.
type ProcessSAMLLogoutParams struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ProcessSAMLLogoutPostFormdataBody defines parameters for ProcessSAMLLogoutPost.
type ProcessSAMLLogoutPostFormdataBody struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ListThreatModelsParams defines parameters for ListThreatModels.
type ListThreatModelsParams struct {
	// Limit Number of threat models to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Owner Filter by owner name or email
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// Name Filter by threat model name (partial match)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter by threat model description (partial match)
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// IssueUri Filter by issue URI (partial match)
	IssueUri *string `form:"issue_uri,omitempty" json:"issue_uri,omitempty"`

	// CreatedAfter Filter threat models created after this date (RFC3339 format)
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter threat models created before this date (RFC3339 format)
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// ModifiedAfter Filter threat models modified after this date (RFC3339 format)
	ModifiedAfter *time.Time `form:"modified_after,omitempty" json:"modified_after,omitempty"`

	// ModifiedBefore Filter threat models modified before this date (RFC3339 format)
	ModifiedBefore *time.Time `form:"modified_before,omitempty" json:"modified_before,omitempty"`

	// Status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// StatusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339)
	StatusUpdatedAfter *time.Time `form:"status_updated_after,omitempty" json:"status_updated_after,omitempty"`

	// StatusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339)
	StatusUpdatedBefore *time.Time `form:"status_updated_before,omitempty" json:"status_updated_before,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelApplicationJSONPatchPlusJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBodyOp string

// GetThreatModelAssetsParams defines parameters for GetThreatModelAssets.
type GetThreatModelAssetsParams struct {
	// Limit Maximum number of assets to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of assets to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelAssetsJSONBody defines parameters for BulkCreateThreatModelAssets.
type BulkCreateThreatModelAssetsJSONBody = []Asset

// BulkUpsertThreatModelAssetsJSONBody defines parameters for BulkUpsertThreatModelAssets.
type BulkUpsertThreatModelAssetsJSONBody = []Asset

// PatchThreatModelAssetApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelAsset.
type PatchThreatModelAssetApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                 `json:"from,omitempty"`
	Op    PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                  `json:"path"`
	Value *interface{}                                            `json:"value,omitempty"`
}

// PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelAsset.
type PatchThreatModelAssetApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateThreatModelAssetMetadataJSONBody defines parameters for BulkCreateThreatModelAssetMetadata.
type BulkCreateThreatModelAssetMetadataJSONBody = []Metadata

// BulkUpsertThreatModelAssetMetadataJSONBody defines parameters for BulkUpsertThreatModelAssetMetadata.
type BulkUpsertThreatModelAssetMetadataJSONBody = []Metadata

// GetThreatModelDiagramsParams defines parameters for GetThreatModelDiagrams.
type GetThreatModelDiagramsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                   `json:"from,omitempty"`
	Op    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                    `json:"path"`
	Value *interface{}                                              `json:"value,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateDiagramMetadataJSONBody defines parameters for BulkCreateDiagramMetadata.
type BulkCreateDiagramMetadataJSONBody = []Metadata

// BulkUpsertDiagramMetadataJSONBody defines parameters for BulkUpsertDiagramMetadata.
type BulkUpsertDiagramMetadataJSONBody = []Metadata

// UpdateDiagramMetadataByKeyJSONBody defines parameters for UpdateDiagramMetadataByKey.
type UpdateDiagramMetadataByKeyJSONBody struct {
	// Value Metadata value
	Value string `json:"value"`
}

// GetThreatModelDocumentsParams defines parameters for GetThreatModelDocuments.
type GetThreatModelDocumentsParams struct {
	// Limit Maximum number of documents to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of documents to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelDocumentsJSONBody defines parameters for BulkCreateThreatModelDocuments.
type BulkCreateThreatModelDocumentsJSONBody = []Document

// BulkUpsertThreatModelDocumentsJSONBody defines parameters for BulkUpsertThreatModelDocuments.
type BulkUpsertThreatModelDocumentsJSONBody = []Document

// PatchThreatModelDocumentApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelDocument.
type PatchThreatModelDocumentApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                    `json:"from,omitempty"`
	Op    PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                     `json:"path"`
	Value *interface{}                                               `json:"value,omitempty"`
}

// PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelDocument.
type PatchThreatModelDocumentApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateDocumentMetadataJSONBody defines parameters for BulkCreateDocumentMetadata.
type BulkCreateDocumentMetadataJSONBody = []Metadata

// BulkUpsertDocumentMetadataJSONBody defines parameters for BulkUpsertDocumentMetadata.
type BulkUpsertDocumentMetadataJSONBody = []Metadata

// UpdateDocumentMetadataByKeyJSONBody defines parameters for UpdateDocumentMetadataByKey.
type UpdateDocumentMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// BulkCreateThreatModelMetadataJSONBody defines parameters for BulkCreateThreatModelMetadata.
type BulkCreateThreatModelMetadataJSONBody = []Metadata

// BulkUpsertThreatModelMetadataJSONBody defines parameters for BulkUpsertThreatModelMetadata.
type BulkUpsertThreatModelMetadataJSONBody = []Metadata

// UpdateThreatModelMetadataByKeyJSONBody defines parameters for UpdateThreatModelMetadataByKey.
type UpdateThreatModelMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelNotesParams defines parameters for GetThreatModelNotes.
type GetThreatModelNotesParams struct {
	// Limit Maximum number of notes to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of notes to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchThreatModelNoteApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelNote.
type PatchThreatModelNoteApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                `json:"from,omitempty"`
	Op    PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                 `json:"path"`
	Value *interface{}                                           `json:"value,omitempty"`
}

// PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelNote.
type PatchThreatModelNoteApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateNoteMetadataJSONBody defines parameters for BulkCreateNoteMetadata.
type BulkCreateNoteMetadataJSONBody = []Metadata

// BulkUpdateNoteMetadataJSONBody defines parameters for BulkUpdateNoteMetadata.
type BulkUpdateNoteMetadataJSONBody = []Metadata

// UpdateNoteMetadataByKeyJSONBody defines parameters for UpdateNoteMetadataByKey.
type UpdateNoteMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelRepositoriesParams defines parameters for GetThreatModelRepositories.
type GetThreatModelRepositoriesParams struct {
	// Limit Maximum number of sources to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of sources to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelRepositoriesJSONBody defines parameters for BulkCreateThreatModelRepositories.
type BulkCreateThreatModelRepositoriesJSONBody = []Repository

// BulkUpsertThreatModelRepositoriesJSONBody defines parameters for BulkUpsertThreatModelRepositories.
type BulkUpsertThreatModelRepositoriesJSONBody = []Repository

// PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelRepository.
type PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                      `json:"from,omitempty"`
	Op    PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                       `json:"path"`
	Value *interface{}                                                 `json:"value,omitempty"`
}

// PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelRepository.
type PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateRepositoryMetadataJSONBody defines parameters for BulkCreateRepositoryMetadata.
type BulkCreateRepositoryMetadataJSONBody = []Metadata

// BulkUpsertRepositoryMetadataJSONBody defines parameters for BulkUpsertRepositoryMetadata.
type BulkUpsertRepositoryMetadataJSONBody = []Metadata

// UpdateRepositoryMetadataByKeyJSONBody defines parameters for UpdateRepositoryMetadataByKey.
type UpdateRepositoryMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelThreatsParams defines parameters for GetThreatModelThreats.
type GetThreatModelThreatsParams struct {
	// Limit Maximum number of threats to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of threats to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Name Filter by threat name (partial match)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter by threat description (partial match)
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// ThreatType Filter by threat type (exact match)
	ThreatType *string `form:"threat_type,omitempty" json:"threat_type,omitempty"`

	// Severity Filter by severity level (exact match)
	Severity *GetThreatModelThreatsParamsSeverity `form:"severity,omitempty" json:"severity,omitempty"`

	// Priority Filter by priority (exact match)
	Priority *string `form:"priority,omitempty" json:"priority,omitempty"`

	// Status Filter by status (exact match)
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// DiagramId Filter by diagram ID (exact match)
	DiagramId *openapi_types.UUID `form:"diagram_id,omitempty" json:"diagram_id,omitempty"`

	// CellId Filter by cell ID (exact match)
	CellId *openapi_types.UUID `form:"cell_id,omitempty" json:"cell_id,omitempty"`

	// ScoreGt Filter threats with score greater than this value
	ScoreGt *float32 `form:"score_gt,omitempty" json:"score_gt,omitempty"`

	// ScoreLt Filter threats with score less than this value
	ScoreLt *float32 `form:"score_lt,omitempty" json:"score_lt,omitempty"`

	// ScoreEq Filter threats with score equal to this value
	ScoreEq *float32 `form:"score_eq,omitempty" json:"score_eq,omitempty"`

	// ScoreGe Filter threats with score greater than or equal to this value
	ScoreGe *float32 `form:"score_ge,omitempty" json:"score_ge,omitempty"`

	// ScoreLe Filter threats with score less than or equal to this value
	ScoreLe *float32 `form:"score_le,omitempty" json:"score_le,omitempty"`

	// CreatedAfter Filter threats created after this date (RFC3339 format)
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter threats created before this date (RFC3339 format)
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// ModifiedAfter Filter threats modified after this date (RFC3339 format)
	ModifiedAfter *time.Time `form:"modified_after,omitempty" json:"modified_after,omitempty"`

	// ModifiedBefore Filter threats modified before this date (RFC3339 format)
	ModifiedBefore *time.Time `form:"modified_before,omitempty" json:"modified_before,omitempty"`
}

// GetThreatModelThreatsParamsSeverity defines parameters for GetThreatModelThreats.
type GetThreatModelThreatsParamsSeverity string

// BulkDeleteThreatModelThreatsParams defines parameters for BulkDeleteThreatModelThreats.
type BulkDeleteThreatModelThreatsParams struct {
	// ThreatIds Comma-separated list of threat IDs to delete (UUID format)
	ThreatIds []openapi_types.UUID `form:"threat_ids" json:"threat_ids"`
}

// BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody defines parameters for BulkPatchThreatModelThreats.
type BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody struct {
	Patches []struct {
		// Id Threat ID to patch
		Id openapi_types.UUID `json:"id"`

		// Operations JSON Patch operations to apply
		Operations []struct {
			From  *string                                                                        `json:"from,omitempty"`
			Op    BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp `json:"op"`
			Path  string                                                                         `json:"path"`
			Value *interface{}                                                                   `json:"value,omitempty"`
		} `json:"operations"`
	} `json:"patches"`
}

// BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp defines parameters for BulkPatchThreatModelThreats.
type BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp string

// BulkCreateThreatModelThreatsJSONBody defines parameters for BulkCreateThreatModelThreats.
type BulkCreateThreatModelThreatsJSONBody = []Threat

// BulkUpdateThreatModelThreatsJSONBody defines parameters for BulkUpdateThreatModelThreats.
type BulkUpdateThreatModelThreatsJSONBody = []Threat

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                  `json:"from,omitempty"`
	Op    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                   `json:"path"`
	Value *interface{}                                             `json:"value,omitempty"`
}

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateThreatMetadataJSONBody defines parameters for BulkCreateThreatMetadata.
type BulkCreateThreatMetadataJSONBody = []Metadata

// BulkUpsertThreatMetadataJSONBody defines parameters for BulkUpsertThreatMetadata.
type BulkUpsertThreatMetadataJSONBody = []Metadata

// UpdateThreatMetadataByKeyJSONBody defines parameters for UpdateThreatMetadataByKey.
type UpdateThreatMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// DeleteUserAccountParams defines parameters for DeleteUserAccount.
type DeleteUserAccountParams struct {
	// Challenge Challenge string from first request (step 2 only). Must match exactly.
	Challenge *string `form:"challenge,omitempty" json:"challenge,omitempty"`
}

// IntrospectTokenFormdataRequestBody defines body for IntrospectToken for application/x-www-form-urlencoded ContentType.
type IntrospectTokenFormdataRequestBody IntrospectTokenFormdataBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// LogoutUserJSONRequestBody defines body for LogoutUser for application/json ContentType.
type LogoutUserJSONRequestBody = LogoutUserJSONBody

// ExchangeOAuthCodeJSONRequestBody defines body for ExchangeOAuthCode for application/json ContentType.
type ExchangeOAuthCodeJSONRequestBody ExchangeOAuthCodeJSONBody

// ProcessSAMLResponseFormdataRequestBody defines body for ProcessSAMLResponse for application/x-www-form-urlencoded ContentType.
type ProcessSAMLResponseFormdataRequestBody ProcessSAMLResponseFormdataBody

// ProcessSAMLLogoutPostFormdataRequestBody defines body for ProcessSAMLLogoutPost for application/x-www-form-urlencoded ContentType.
type ProcessSAMLLogoutPostFormdataRequestBody ProcessSAMLLogoutPostFormdataBody

// CreateThreatModelJSONRequestBody defines body for CreateThreatModel for application/json ContentType.
type CreateThreatModelJSONRequestBody = ThreatModelInput

// PatchThreatModelApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModel for application/json-patch+json ContentType.
type PatchThreatModelApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelApplicationJSONPatchPlusJSONBody

// UpdateThreatModelJSONRequestBody defines body for UpdateThreatModel for application/json ContentType.
type UpdateThreatModelJSONRequestBody = ThreatModelInput

// CreateThreatModelAssetJSONRequestBody defines body for CreateThreatModelAsset for application/json ContentType.
type CreateThreatModelAssetJSONRequestBody = AssetInput

// BulkCreateThreatModelAssetsJSONRequestBody defines body for BulkCreateThreatModelAssets for application/json ContentType.
type BulkCreateThreatModelAssetsJSONRequestBody = BulkCreateThreatModelAssetsJSONBody

// BulkUpsertThreatModelAssetsJSONRequestBody defines body for BulkUpsertThreatModelAssets for application/json ContentType.
type BulkUpsertThreatModelAssetsJSONRequestBody = BulkUpsertThreatModelAssetsJSONBody

// PatchThreatModelAssetApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelAsset for application/json-patch+json ContentType.
type PatchThreatModelAssetApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelAssetApplicationJSONPatchPlusJSONBody

// UpdateThreatModelAssetJSONRequestBody defines body for UpdateThreatModelAsset for application/json ContentType.
type UpdateThreatModelAssetJSONRequestBody = AssetInput

// CreateThreatModelAssetMetadataJSONRequestBody defines body for CreateThreatModelAssetMetadata for application/json ContentType.
type CreateThreatModelAssetMetadataJSONRequestBody = Metadata

// BulkCreateThreatModelAssetMetadataJSONRequestBody defines body for BulkCreateThreatModelAssetMetadata for application/json ContentType.
type BulkCreateThreatModelAssetMetadataJSONRequestBody = BulkCreateThreatModelAssetMetadataJSONBody

// BulkUpsertThreatModelAssetMetadataJSONRequestBody defines body for BulkUpsertThreatModelAssetMetadata for application/json ContentType.
type BulkUpsertThreatModelAssetMetadataJSONRequestBody = BulkUpsertThreatModelAssetMetadataJSONBody

// UpdateThreatModelAssetMetadataJSONRequestBody defines body for UpdateThreatModelAssetMetadata for application/json ContentType.
type UpdateThreatModelAssetMetadataJSONRequestBody = Metadata

// CreateThreatModelDiagramJSONRequestBody defines body for CreateThreatModelDiagram for application/json ContentType.
type CreateThreatModelDiagramJSONRequestBody = CreateDiagramRequest

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelDiagram for application/json-patch+json ContentType.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody

// UpdateThreatModelDiagramJSONRequestBody defines body for UpdateThreatModelDiagram for application/json ContentType.
type UpdateThreatModelDiagramJSONRequestBody = Diagram

// CreateDiagramMetadataJSONRequestBody defines body for CreateDiagramMetadata for application/json ContentType.
type CreateDiagramMetadataJSONRequestBody = Metadata

// BulkCreateDiagramMetadataJSONRequestBody defines body for BulkCreateDiagramMetadata for application/json ContentType.
type BulkCreateDiagramMetadataJSONRequestBody = BulkCreateDiagramMetadataJSONBody

// BulkUpsertDiagramMetadataJSONRequestBody defines body for BulkUpsertDiagramMetadata for application/json ContentType.
type BulkUpsertDiagramMetadataJSONRequestBody = BulkUpsertDiagramMetadataJSONBody

// UpdateDiagramMetadataByKeyJSONRequestBody defines body for UpdateDiagramMetadataByKey for application/json ContentType.
type UpdateDiagramMetadataByKeyJSONRequestBody UpdateDiagramMetadataByKeyJSONBody

// CreateThreatModelDocumentJSONRequestBody defines body for CreateThreatModelDocument for application/json ContentType.
type CreateThreatModelDocumentJSONRequestBody = DocumentInput

// BulkCreateThreatModelDocumentsJSONRequestBody defines body for BulkCreateThreatModelDocuments for application/json ContentType.
type BulkCreateThreatModelDocumentsJSONRequestBody = BulkCreateThreatModelDocumentsJSONBody

// BulkUpsertThreatModelDocumentsJSONRequestBody defines body for BulkUpsertThreatModelDocuments for application/json ContentType.
type BulkUpsertThreatModelDocumentsJSONRequestBody = BulkUpsertThreatModelDocumentsJSONBody

// PatchThreatModelDocumentApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelDocument for application/json-patch+json ContentType.
type PatchThreatModelDocumentApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelDocumentApplicationJSONPatchPlusJSONBody

// UpdateThreatModelDocumentJSONRequestBody defines body for UpdateThreatModelDocument for application/json ContentType.
type UpdateThreatModelDocumentJSONRequestBody = DocumentInput

// CreateDocumentMetadataJSONRequestBody defines body for CreateDocumentMetadata for application/json ContentType.
type CreateDocumentMetadataJSONRequestBody = Metadata

// BulkCreateDocumentMetadataJSONRequestBody defines body for BulkCreateDocumentMetadata for application/json ContentType.
type BulkCreateDocumentMetadataJSONRequestBody = BulkCreateDocumentMetadataJSONBody

// BulkUpsertDocumentMetadataJSONRequestBody defines body for BulkUpsertDocumentMetadata for application/json ContentType.
type BulkUpsertDocumentMetadataJSONRequestBody = BulkUpsertDocumentMetadataJSONBody

// UpdateDocumentMetadataByKeyJSONRequestBody defines body for UpdateDocumentMetadataByKey for application/json ContentType.
type UpdateDocumentMetadataByKeyJSONRequestBody UpdateDocumentMetadataByKeyJSONBody

// CreateThreatModelMetadataJSONRequestBody defines body for CreateThreatModelMetadata for application/json ContentType.
type CreateThreatModelMetadataJSONRequestBody = Metadata

// BulkCreateThreatModelMetadataJSONRequestBody defines body for BulkCreateThreatModelMetadata for application/json ContentType.
type BulkCreateThreatModelMetadataJSONRequestBody = BulkCreateThreatModelMetadataJSONBody

// BulkUpsertThreatModelMetadataJSONRequestBody defines body for BulkUpsertThreatModelMetadata for application/json ContentType.
type BulkUpsertThreatModelMetadataJSONRequestBody = BulkUpsertThreatModelMetadataJSONBody

// UpdateThreatModelMetadataByKeyJSONRequestBody defines body for UpdateThreatModelMetadataByKey for application/json ContentType.
type UpdateThreatModelMetadataByKeyJSONRequestBody UpdateThreatModelMetadataByKeyJSONBody

// CreateThreatModelNoteJSONRequestBody defines body for CreateThreatModelNote for application/json ContentType.
type CreateThreatModelNoteJSONRequestBody = NoteInput

// PatchThreatModelNoteApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelNote for application/json-patch+json ContentType.
type PatchThreatModelNoteApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelNoteApplicationJSONPatchPlusJSONBody

// UpdateThreatModelNoteJSONRequestBody defines body for UpdateThreatModelNote for application/json ContentType.
type UpdateThreatModelNoteJSONRequestBody = NoteInput

// CreateNoteMetadataJSONRequestBody defines body for CreateNoteMetadata for application/json ContentType.
type CreateNoteMetadataJSONRequestBody = Metadata

// BulkCreateNoteMetadataJSONRequestBody defines body for BulkCreateNoteMetadata for application/json ContentType.
type BulkCreateNoteMetadataJSONRequestBody = BulkCreateNoteMetadataJSONBody

// BulkUpdateNoteMetadataJSONRequestBody defines body for BulkUpdateNoteMetadata for application/json ContentType.
type BulkUpdateNoteMetadataJSONRequestBody = BulkUpdateNoteMetadataJSONBody

// UpdateNoteMetadataByKeyJSONRequestBody defines body for UpdateNoteMetadataByKey for application/json ContentType.
type UpdateNoteMetadataByKeyJSONRequestBody UpdateNoteMetadataByKeyJSONBody

// CreateThreatModelRepositoryJSONRequestBody defines body for CreateThreatModelRepository for application/json ContentType.
type CreateThreatModelRepositoryJSONRequestBody = RepositoryInput

// BulkCreateThreatModelRepositoriesJSONRequestBody defines body for BulkCreateThreatModelRepositories for application/json ContentType.
type BulkCreateThreatModelRepositoriesJSONRequestBody = BulkCreateThreatModelRepositoriesJSONBody

// BulkUpsertThreatModelRepositoriesJSONRequestBody defines body for BulkUpsertThreatModelRepositories for application/json ContentType.
type BulkUpsertThreatModelRepositoriesJSONRequestBody = BulkUpsertThreatModelRepositoriesJSONBody

// PatchThreatModelRepositoryApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelRepository for application/json-patch+json ContentType.
type PatchThreatModelRepositoryApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelRepositoryApplicationJSONPatchPlusJSONBody

// UpdateThreatModelRepositoryJSONRequestBody defines body for UpdateThreatModelRepository for application/json ContentType.
type UpdateThreatModelRepositoryJSONRequestBody = RepositoryInput

// CreateRepositoryMetadataJSONRequestBody defines body for CreateRepositoryMetadata for application/json ContentType.
type CreateRepositoryMetadataJSONRequestBody = Metadata

// BulkCreateRepositoryMetadataJSONRequestBody defines body for BulkCreateRepositoryMetadata for application/json ContentType.
type BulkCreateRepositoryMetadataJSONRequestBody = BulkCreateRepositoryMetadataJSONBody

// BulkUpsertRepositoryMetadataJSONRequestBody defines body for BulkUpsertRepositoryMetadata for application/json ContentType.
type BulkUpsertRepositoryMetadataJSONRequestBody = BulkUpsertRepositoryMetadataJSONBody

// UpdateRepositoryMetadataByKeyJSONRequestBody defines body for UpdateRepositoryMetadataByKey for application/json ContentType.
type UpdateRepositoryMetadataByKeyJSONRequestBody UpdateRepositoryMetadataByKeyJSONBody

// CreateThreatModelThreatJSONRequestBody defines body for CreateThreatModelThreat for application/json ContentType.
type CreateThreatModelThreatJSONRequestBody = ThreatInput

// BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody defines body for BulkPatchThreatModelThreats for application/json-patch+json ContentType.
type BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody BulkPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody

// BulkCreateThreatModelThreatsJSONRequestBody defines body for BulkCreateThreatModelThreats for application/json ContentType.
type BulkCreateThreatModelThreatsJSONRequestBody = BulkCreateThreatModelThreatsJSONBody

// BulkUpdateThreatModelThreatsJSONRequestBody defines body for BulkUpdateThreatModelThreats for application/json ContentType.
type BulkUpdateThreatModelThreatsJSONRequestBody = BulkUpdateThreatModelThreatsJSONBody

// PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelThreat for application/json-patch+json ContentType.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelThreatApplicationJSONPatchPlusJSONBody

// UpdateThreatModelThreatJSONRequestBody defines body for UpdateThreatModelThreat for application/json ContentType.
type UpdateThreatModelThreatJSONRequestBody = ThreatInput

// CreateThreatMetadataJSONRequestBody defines body for CreateThreatMetadata for application/json ContentType.
type CreateThreatMetadataJSONRequestBody = Metadata

// BulkCreateThreatMetadataJSONRequestBody defines body for BulkCreateThreatMetadata for application/json ContentType.
type BulkCreateThreatMetadataJSONRequestBody = BulkCreateThreatMetadataJSONBody

// BulkUpsertThreatMetadataJSONRequestBody defines body for BulkUpsertThreatMetadata for application/json ContentType.
type BulkUpsertThreatMetadataJSONRequestBody = BulkUpsertThreatMetadataJSONBody

// UpdateThreatMetadataByKeyJSONRequestBody defines body for UpdateThreatMetadataByKey for application/json ContentType.
type UpdateThreatMetadataByKeyJSONRequestBody UpdateThreatMetadataByKeyJSONBody

// Getter for additional properties for Cell_Data. Returns the specified
// element and whether it was found
func (a Cell_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cell_Data
func (a *Cell_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a *Cell_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a Cell_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Edge_Data. Returns the specified
// element and whether it was found
func (a Edge_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Edge_Data
func (a *Edge_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a *Edge_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a Edge_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeConnector_1_Args. Returns the specified
// element and whether it was found
func (a EdgeConnector_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeConnector_1_Args
func (a *EdgeConnector_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a *EdgeConnector_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["jump"]; found {
		err = json.Unmarshal(raw, &a.Jump)
		if err != nil {
			return fmt.Errorf("error reading 'jump': %w", err)
		}
		delete(object, "jump")
	}

	if raw, found := object["precision"]; found {
		err = json.Unmarshal(raw, &a.Precision)
		if err != nil {
			return fmt.Errorf("error reading 'precision': %w", err)
		}
		delete(object, "precision")
	}

	if raw, found := object["radius"]; found {
		err = json.Unmarshal(raw, &a.Radius)
		if err != nil {
			return fmt.Errorf("error reading 'radius': %w", err)
		}
		delete(object, "radius")
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &a.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
		delete(object, "size")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a EdgeConnector_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Jump != nil {
		object["jump"], err = json.Marshal(a.Jump)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jump': %w", err)
		}
	}

	if a.Precision != nil {
		object["precision"], err = json.Marshal(a.Precision)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'precision': %w", err)
		}
	}

	if a.Radius != nil {
		object["radius"], err = json.Marshal(a.Radius)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'radius': %w", err)
		}
	}

	if a.Size != nil {
		object["size"], err = json.Marshal(a.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeRouter_1_Args. Returns the specified
// element and whether it was found
func (a EdgeRouter_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeRouter_1_Args
func (a *EdgeRouter_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a *EdgeRouter_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["directions"]; found {
		err = json.Unmarshal(raw, &a.Directions)
		if err != nil {
			return fmt.Errorf("error reading 'directions': %w", err)
		}
		delete(object, "directions")
	}

	if raw, found := object["padding"]; found {
		err = json.Unmarshal(raw, &a.Padding)
		if err != nil {
			return fmt.Errorf("error reading 'padding': %w", err)
		}
		delete(object, "padding")
	}

	if raw, found := object["step"]; found {
		err = json.Unmarshal(raw, &a.Step)
		if err != nil {
			return fmt.Errorf("error reading 'step': %w", err)
		}
		delete(object, "step")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a EdgeRouter_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Directions != nil {
		object["directions"], err = json.Marshal(a.Directions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'directions': %w", err)
		}
	}

	if a.Padding != nil {
		object["padding"], err = json.Marshal(a.Padding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'padding': %w", err)
		}
	}

	if a.Step != nil {
		object["step"], err = json.Marshal(a.Step)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'step': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Node_Data. Returns the specified
// element and whether it was found
func (a Node_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Node_Data
func (a *Node_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a *Node_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a Node_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsNode returns the union data inside the DfdDiagram_Cells_Item as a Node
func (t DfdDiagram_Cells_Item) AsNode() (Node, error) {
	var body Node
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNode overwrites any union data inside the DfdDiagram_Cells_Item as the provided Node
func (t *DfdDiagram_Cells_Item) FromNode(v Node) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNode performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Node
func (t *DfdDiagram_Cells_Item) MergeNode(v Node) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdge returns the union data inside the DfdDiagram_Cells_Item as a Edge
func (t DfdDiagram_Cells_Item) AsEdge() (Edge, error) {
	var body Edge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdge overwrites any union data inside the DfdDiagram_Cells_Item as the provided Edge
func (t *DfdDiagram_Cells_Item) FromEdge(v Edge) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdge performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Edge
func (t *DfdDiagram_Cells_Item) MergeEdge(v Edge) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DfdDiagram_Cells_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DfdDiagram_Cells_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDfdDiagram returns the union data inside the Diagram as a DfdDiagram
func (t Diagram) AsDfdDiagram() (DfdDiagram, error) {
	var body DfdDiagram
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDfdDiagram overwrites any union data inside the Diagram as the provided DfdDiagram
func (t *Diagram) FromDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDfdDiagram performs a merge with any union data inside the Diagram, using the provided DfdDiagram
func (t *Diagram) MergeDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Diagram) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Diagram) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DFD-1.0.0":
		return t.AsDfdDiagram()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Diagram) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Diagram) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeConnector0 returns the union data inside the EdgeConnector as a EdgeConnector0
func (t EdgeConnector) AsEdgeConnector0() (EdgeConnector0, error) {
	var body EdgeConnector0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector0 overwrites any union data inside the EdgeConnector as the provided EdgeConnector0
func (t *EdgeConnector) FromEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector0 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector0
func (t *EdgeConnector) MergeEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeConnector1 returns the union data inside the EdgeConnector as a EdgeConnector1
func (t EdgeConnector) AsEdgeConnector1() (EdgeConnector1, error) {
	var body EdgeConnector1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector1 overwrites any union data inside the EdgeConnector as the provided EdgeConnector1
func (t *EdgeConnector) FromEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector1 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector1
func (t *EdgeConnector) MergeEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeConnector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeConnector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeRouter0 returns the union data inside the EdgeRouter as a EdgeRouter0
func (t EdgeRouter) AsEdgeRouter0() (EdgeRouter0, error) {
	var body EdgeRouter0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter0 overwrites any union data inside the EdgeRouter as the provided EdgeRouter0
func (t *EdgeRouter) FromEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter0 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter0
func (t *EdgeRouter) MergeEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeRouter1 returns the union data inside the EdgeRouter as a EdgeRouter1
func (t EdgeRouter) AsEdgeRouter1() (EdgeRouter1, error) {
	var body EdgeRouter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter1 overwrites any union data inside the EdgeRouter as the provided EdgeRouter1
func (t *EdgeRouter) FromEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter1 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter1
func (t *EdgeRouter) MergeEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeRouter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeRouter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	GetApiInfo(c *gin.Context)
	// JSON Web Key Set
	// (GET /.well-known/jwks.json)
	GetJWKS(c *gin.Context)
	// OAuth 2.0 Authorization Server Metadata
	// (GET /.well-known/oauth-authorization-server)
	GetOAuthAuthorizationServerMetadata(c *gin.Context)
	// OAuth 2.0 Protected Resource Metadata
	// (GET /.well-known/oauth-protected-resource)
	GetOAuthProtectedResourceMetadata(c *gin.Context)
	// OpenID Connect Discovery Configuration
	// (GET /.well-known/openid-configuration)
	GetOpenIDConfiguration(c *gin.Context)
	// List active collaboration sessions
	// (GET /collaboration/sessions)
	GetCollaborationSessions(c *gin.Context)
	// Initiate OAuth authorization flow
	// (GET /oauth2/authorize)
	AuthorizeOAuthProvider(c *gin.Context, params AuthorizeOAuthProviderParams)
	// Handle OAuth callback
	// (GET /oauth2/callback)
	HandleOAuthCallback(c *gin.Context, params HandleOAuthCallbackParams)
	// Token Introspection
	// (POST /oauth2/introspect)
	IntrospectToken(c *gin.Context)
	// List available OAuth providers
	// (GET /oauth2/providers)
	GetAuthProviders(c *gin.Context)
	// Get groups for identity provider
	// (GET /oauth2/providers/{idp}/groups)
	GetProviderGroups(c *gin.Context, idp string)
	// Refresh JWT token
	// (POST /oauth2/refresh)
	RefreshToken(c *gin.Context)
	// Logout user
	// (POST /oauth2/revoke)
	LogoutUser(c *gin.Context)
	// Exchange OAuth authorization code for JWT tokens
	// (POST /oauth2/token)
	ExchangeOAuthCode(c *gin.Context, params ExchangeOAuthCodeParams)
	// Get current user information
	// (GET /oauth2/userinfo)
	GetCurrentUser(c *gin.Context)
	// SAML Assertion Consumer Service
	// (POST /saml/acs)
	ProcessSAMLResponse(c *gin.Context)
	// Initiate SAML authentication
	// (GET /saml/login)
	InitiateSAMLLogin(c *gin.Context, params InitiateSAMLLoginParams)
	// Get SAML service provider metadata
	// (GET /saml/metadata)
	GetSAMLMetadata(c *gin.Context)
	// SAML Single Logout
	// (GET /saml/slo)
	ProcessSAMLLogout(c *gin.Context, params ProcessSAMLLogoutParams)
	// SAML Single Logout (POST)
	// (POST /saml/slo)
	ProcessSAMLLogoutPost(c *gin.Context)
	// List threat models
	// (GET /threat_models)
	ListThreatModels(c *gin.Context, params ListThreatModelsParams)
	// Create a threat model
	// (POST /threat_models)
	CreateThreatModel(c *gin.Context)
	// Delete a threat model
	// (DELETE /threat_models/{threat_model_id})
	DeleteThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Retrieve a threat model
	// (GET /threat_models/{threat_model_id})
	GetThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Partially update a threat model
	// (PATCH /threat_models/{threat_model_id})
	PatchThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Update a threat model
	// (PUT /threat_models/{threat_model_id})
	UpdateThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// List assets in a threat model
	// (GET /threat_models/{threat_model_id}/assets)
	GetThreatModelAssets(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelAssetsParams)
	// Create a new asset
	// (POST /threat_models/{threat_model_id}/assets)
	CreateThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create assets
	// (POST /threat_models/{threat_model_id}/assets/bulk)
	BulkCreateThreatModelAssets(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk upsert assets
	// (PUT /threat_models/{threat_model_id}/assets/bulk)
	BulkUpsertThreatModelAssets(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete an asset
	// (DELETE /threat_models/{threat_model_id}/assets/{asset_id})
	DeleteThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Get a specific asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id})
	GetThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Partially update asset
	// (PATCH /threat_models/{threat_model_id}/assets/{asset_id})
	PatchThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Update an asset
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id})
	UpdateThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Get all metadata for an asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id}/metadata)
	GetThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Add metadata to an asset
	// (POST /threat_models/{threat_model_id}/assets/{asset_id}/metadata)
	CreateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Bulk create asset metadata
	// (POST /threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk)
	BulkCreateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Bulk upsert asset metadata
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk)
	BulkUpsertThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Delete asset metadata
	// (DELETE /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	DeleteThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// Get specific metadata for an asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	GetThreatModelAssetMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// Update asset metadata
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	UpdateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// List threat model diagrams
	// (GET /threat_models/{threat_model_id}/diagrams)
	GetThreatModelDiagrams(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDiagramsParams)
	// Create a new diagram
	// (POST /threat_models/{threat_model_id}/diagrams)
	CreateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a diagram
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id})
	DeleteThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get a specific diagram
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id})
	GetThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Partially update a diagram
	// (PATCH /threat_models/{threat_model_id}/diagrams/{diagram_id})
	PatchThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Update a diagram
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id})
	UpdateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// End diagram collaboration session
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	EndDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram collaboration session
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	GetDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram collaboration session
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	CreateDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram metadata
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	GetDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	CreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Bulk create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk)
	BulkCreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Bulk upsert diagram metadata
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk)
	BulkUpsertDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Delete diagram metadata by key
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	DeleteDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Get diagram metadata by key
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	GetDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Update diagram metadata by key
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	UpdateDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// List documents in a threat model
	// (GET /threat_models/{threat_model_id}/documents)
	GetThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDocumentsParams)
	// Create a new document
	// (POST /threat_models/{threat_model_id}/documents)
	CreateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create documents
	// (POST /threat_models/{threat_model_id}/documents/bulk)
	BulkCreateThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk upsert documents
	// (PUT /threat_models/{threat_model_id}/documents/bulk)
	BulkUpsertThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a document
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id})
	DeleteThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get a specific document
	// (GET /threat_models/{threat_model_id}/documents/{document_id})
	GetThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Partially update document
	// (PATCH /threat_models/{threat_model_id}/documents/{document_id})
	PatchThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Update a document
	// (PUT /threat_models/{threat_model_id}/documents/{document_id})
	UpdateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get document metadata
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	GetDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	CreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Bulk create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk)
	BulkCreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Bulk upsert document metadata
	// (PUT /threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk)
	BulkUpsertDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Delete document metadata by key
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	DeleteDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get document metadata by key
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	GetDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Update document metadata by key
	// (PUT /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	UpdateDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get threat model metadata
	// (GET /threat_models/{threat_model_id}/metadata)
	GetThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata)
	CreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata/bulk)
	BulkCreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk upsert threat model metadata
	// (PUT /threat_models/{threat_model_id}/metadata/bulk)
	BulkUpsertThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete threat model metadata by key
	// (DELETE /threat_models/{threat_model_id}/metadata/{key})
	DeleteThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Get threat model metadata by key
	// (GET /threat_models/{threat_model_id}/metadata/{key})
	GetThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Update threat model metadata by key
	// (PUT /threat_models/{threat_model_id}/metadata/{key})
	UpdateThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// List notes in a threat model
	// (GET /threat_models/{threat_model_id}/notes)
	GetThreatModelNotes(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelNotesParams)
	// Create a new note
	// (POST /threat_models/{threat_model_id}/notes)
	CreateThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a note
	// (DELETE /threat_models/{threat_model_id}/notes/{note_id})
	DeleteThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Get a specific note
	// (GET /threat_models/{threat_model_id}/notes/{note_id})
	GetThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Partially update note
	// (PATCH /threat_models/{threat_model_id}/notes/{note_id})
	PatchThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Update a note
	// (PUT /threat_models/{threat_model_id}/notes/{note_id})
	UpdateThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Get note metadata
	// (GET /threat_models/{threat_model_id}/notes/{note_id}/metadata)
	GetNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Create note metadata
	// (POST /threat_models/{threat_model_id}/notes/{note_id}/metadata)
	CreateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Bulk create note metadata
	// (POST /threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk)
	BulkCreateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Bulk update note metadata
	// (PUT /threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk)
	BulkUpdateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Delete note metadata by key
	// (DELETE /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	DeleteNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// Get note metadata by key
	// (GET /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	GetNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// Update note metadata by key
	// (PUT /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	UpdateNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// List sources in a threat model
	// (GET /threat_models/{threat_model_id}/repositories)
	GetThreatModelRepositories(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelRepositoriesParams)
	// Create a new source reference
	// (POST /threat_models/{threat_model_id}/repositories)
	CreateThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create sources
	// (POST /threat_models/{threat_model_id}/repositories/bulk)
	BulkCreateThreatModelRepositories(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk upsert repositories
	// (PUT /threat_models/{threat_model_id}/repositories/bulk)
	BulkUpsertThreatModelRepositories(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a source reference
	// (DELETE /threat_models/{threat_model_id}/repositories/{repository_id})
	DeleteThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Get a specific source reference
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id})
	GetThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Partially update repository
	// (PATCH /threat_models/{threat_model_id}/repositories/{repository_id})
	PatchThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Update a source reference
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id})
	UpdateThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Get source metadata
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id}/metadata)
	GetRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Create source metadata
	// (POST /threat_models/{threat_model_id}/repositories/{repository_id}/metadata)
	CreateRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Bulk create source metadata
	// (POST /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk)
	BulkCreateRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Bulk upsert repository metadata
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk)
	BulkUpsertRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Delete source metadata by key
	// (DELETE /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	DeleteRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// Get source metadata by key
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	GetRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// Update source metadata by key
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	UpdateRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// List threats in a threat model
	// (GET /threat_models/{threat_model_id}/threats)
	GetThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelThreatsParams)
	// Create a new threat
	// (POST /threat_models/{threat_model_id}/threats)
	CreateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk DELETE threats
	// (DELETE /threat_models/{threat_model_id}/threats/bulk)
	BulkDeleteThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params BulkDeleteThreatModelThreatsParams)
	// Bulk PATCH threats
	// (PATCH /threat_models/{threat_model_id}/threats/bulk)
	BulkPatchThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threats
	// (POST /threat_models/{threat_model_id}/threats/bulk)
	BulkCreateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk update threats
	// (PUT /threat_models/{threat_model_id}/threats/bulk)
	BulkUpdateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a threat
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id})
	DeleteThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get a specific threat
	// (GET /threat_models/{threat_model_id}/threats/{threat_id})
	GetThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Partially update a threat
	// (PATCH /threat_models/{threat_model_id}/threats/{threat_id})
	PatchThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Update a threat
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id})
	UpdateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get threat metadata
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	GetThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	CreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Bulk create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk)
	BulkCreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Bulk upsert threat metadata
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk)
	BulkUpsertThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Delete threat metadata by key
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	DeleteThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Get threat metadata by key
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	GetThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Update threat metadata by key
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	UpdateThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Delete authenticated user account and all data
	// (DELETE /users/me)
	DeleteUserAccount(c *gin.Context, params DeleteUserAccountParams)
	// Get current user profile
	// (GET /users/me)
	GetCurrentUserProfile(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiInfo(c)
}

// GetJWKS operation middleware
func (siw *ServerInterfaceWrapper) GetJWKS(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKS(c)
}

// GetOAuthAuthorizationServerMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthAuthorizationServerMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthAuthorizationServerMetadata(c)
}

// GetOAuthProtectedResourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthProtectedResourceMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthProtectedResourceMetadata(c)
}

// GetOpenIDConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetOpenIDConfiguration(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOpenIDConfiguration(c)
}

// GetCollaborationSessions operation middleware
func (siw *ServerInterfaceWrapper) GetCollaborationSessions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCollaborationSessions(c)
}

// AuthorizeOAuthProvider operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuthProvider(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeOAuthProviderParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "login_hint" -------------

	err = runtime.BindQueryParameter("form", true, false, "login_hint", c.Request.URL.Query(), &params.LoginHint)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login_hint: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scope" -------------

	if paramValue := c.Query("scope"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scope is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scope", c.Request.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scope: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuthProvider(c, params)
}

// HandleOAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) HandleOAuthCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleOAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HandleOAuthCallback(c, params)
}

// IntrospectToken operation middleware
func (siw *ServerInterfaceWrapper) IntrospectToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IntrospectToken(c)
}

// GetAuthProviders operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthProviders(c)
}

// GetProviderGroups operation middleware
func (siw *ServerInterfaceWrapper) GetProviderGroups(c *gin.Context) {

	var err error

	// ------------- Path parameter "idp" -------------
	var idp string

	err = runtime.BindStyledParameterWithOptions("simple", "idp", c.Param("idp"), &idp, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviderGroups(c, idp)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogoutUser(c)
}

// ExchangeOAuthCode operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuthCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExchangeOAuthCodeParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuthCode(c, params)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// ProcessSAMLResponse operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLResponse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLResponse(c)
}

// InitiateSAMLLogin operation middleware
func (siw *ServerInterfaceWrapper) InitiateSAMLLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InitiateSAMLLoginParams

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InitiateSAMLLogin(c, params)
}

// GetSAMLMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetSAMLMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSAMLMetadata(c)
}

// ProcessSAMLLogout operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogout(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProcessSAMLLogoutParams

	// ------------- Required query parameter "SAMLRequest" -------------

	if paramValue := c.Query("SAMLRequest"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument SAMLRequest is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "SAMLRequest", c.Request.URL.Query(), &params.SAMLRequest)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter SAMLRequest: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogout(c, params)
}

// ProcessSAMLLogoutPost operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogoutPost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogoutPost(c)
}

// ListThreatModels operation middleware
func (siw *ServerInterfaceWrapper) ListThreatModels(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListThreatModelsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", c.Request.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "issue_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "issue_uri", c.Request.URL.Query(), &params.IssueUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issue_uri: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_after", c.Request.URL.Query(), &params.ModifiedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_before", c.Request.URL.Query(), &params.ModifiedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status_updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_updated_after", c.Request.URL.Query(), &params.StatusUpdatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status_updated_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status_updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_updated_before", c.Request.URL.Query(), &params.StatusUpdatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status_updated_before: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListThreatModels(c, params)
}

// CreateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModel(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModel(c)
}

// DeleteThreatModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModel(c, threatModelId)
}

// GetThreatModel operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModel(c, threatModelId)
}

// PatchThreatModel operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModel(c, threatModelId)
}

// UpdateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModel(c, threatModelId)
}

// GetThreatModelAssets operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelAssetsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssets(c, threatModelId, params)
}

// CreateThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelAsset(c, threatModelId)
}

// BulkCreateThreatModelAssets operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelAssets(c, threatModelId)
}

// BulkUpsertThreatModelAssets operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelAssets(c, threatModelId)
}

// DeleteThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelAsset(c, threatModelId, assetId)
}

// GetThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAsset(c, threatModelId, assetId)
}

// PatchThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelAsset(c, threatModelId, assetId)
}

// UpdateThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelAsset(c, threatModelId, assetId)
}

// GetThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssetMetadata(c, threatModelId, assetId)
}

// CreateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelAssetMetadata(c, threatModelId, assetId)
}

// BulkCreateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelAssetMetadata(c, threatModelId, assetId)
}

// BulkUpsertThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelAssetMetadata(c, threatModelId, assetId)
}

// DeleteThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelAssetMetadata(c, threatModelId, assetId, key)
}

// GetThreatModelAssetMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssetMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssetMetadataByKey(c, threatModelId, assetId, key)
}

// UpdateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelAssetMetadata(c, threatModelId, assetId, key)
}

// GetThreatModelDiagrams operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagrams(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDiagramsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagrams(c, threatModelId, params)
}

// CreateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDiagram(c, threatModelId)
}

// DeleteThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDiagram(c, threatModelId, diagramId)
}

// GetThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagram(c, threatModelId, diagramId)
}

// PatchThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelDiagram(c, threatModelId, diagramId)
}

// UpdateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDiagram(c, threatModelId, diagramId)
}

// EndDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) EndDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EndDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramCollaborationSession(c, threatModelId, diagramId)
}

// CreateDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadata(c, threatModelId, diagramId)
}

// CreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramMetadata(c, threatModelId, diagramId)
}

// BulkCreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDiagramMetadata(c, threatModelId, diagramId)
}

// BulkUpsertDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertDiagramMetadata(c, threatModelId, diagramId)
}

// DeleteDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// UpdateDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDocumentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocuments(c, threatModelId, params)
}

// CreateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDocument(c, threatModelId)
}

// BulkCreateThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelDocuments(c, threatModelId)
}

// BulkUpsertThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelDocuments(c, threatModelId)
}

// DeleteThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDocument(c, threatModelId, documentId)
}

// GetThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocument(c, threatModelId, documentId)
}

// PatchThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelDocument(c, threatModelId, documentId)
}

// UpdateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDocument(c, threatModelId, documentId)
}

// GetDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadata(c, threatModelId, documentId)
}

// CreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDocumentMetadata(c, threatModelId, documentId)
}

// BulkCreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDocumentMetadata(c, threatModelId, documentId)
}

// BulkUpsertDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertDocumentMetadata(c, threatModelId, documentId)
}

// DeleteDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// UpdateDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadata(c, threatModelId)
}

// CreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelMetadata(c, threatModelId)
}

// BulkCreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelMetadata(c, threatModelId)
}

// BulkUpsertThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelMetadata(c, threatModelId)
}

// DeleteThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadataByKey(c, threatModelId, key)
}

// UpdateThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelNotes operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelNotes(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelNotesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelNotes(c, threatModelId, params)
}

// CreateThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelNote(c, threatModelId)
}

// DeleteThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelNote(c, threatModelId, noteId)
}

// GetThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelNote(c, threatModelId, noteId)
}

// PatchThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelNote(c, threatModelId, noteId)
}

// UpdateThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelNote(c, threatModelId, noteId)
}

// GetNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNoteMetadata(c, threatModelId, noteId)
}

// CreateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNoteMetadata(c, threatModelId, noteId)
}

// BulkCreateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateNoteMetadata(c, threatModelId, noteId)
}

// BulkUpdateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpdateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpdateNoteMetadata(c, threatModelId, noteId)
}

// DeleteNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNoteMetadataByKey(c, threatModelId, noteId, key)
}

// GetNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNoteMetadataByKey(c, threatModelId, noteId, key)
}

// UpdateNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNoteMetadataByKey(c, threatModelId, noteId, key)
}

// GetThreatModelRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelRepositoriesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelRepositories(c, threatModelId, params)
}

// CreateThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelRepository(c, threatModelId)
}

// BulkCreateThreatModelRepositories operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelRepositories(c, threatModelId)
}

// BulkUpsertThreatModelRepositories operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelRepositories(c, threatModelId)
}

// DeleteThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelRepository(c, threatModelId, repositoryId)
}

// GetThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelRepository(c, threatModelId, repositoryId)
}

// PatchThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelRepository(c, threatModelId, repositoryId)
}

// UpdateThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelRepository(c, threatModelId, repositoryId)
}

// GetRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositoryMetadata(c, threatModelId, repositoryId)
}

// CreateRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRepositoryMetadata(c, threatModelId, repositoryId)
}

// BulkCreateRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateRepositoryMetadata(c, threatModelId, repositoryId)
}

// BulkUpsertRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertRepositoryMetadata(c, threatModelId, repositoryId)
}

// DeleteRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// GetRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// UpdateRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// GetThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelThreatsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "threat_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "threat_type", c.Request.URL.Query(), &params.ThreatType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", c.Request.URL.Query(), &params.Priority)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter priority: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "diagram_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "diagram_id", c.Request.URL.Query(), &params.DiagramId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "cell_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cell_id", c.Request.URL.Query(), &params.CellId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cell_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_gt" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_gt", c.Request.URL.Query(), &params.ScoreGt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_gt: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_lt" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_lt", c.Request.URL.Query(), &params.ScoreLt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_lt: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_eq" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_eq", c.Request.URL.Query(), &params.ScoreEq)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_eq: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_ge" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_ge", c.Request.URL.Query(), &params.ScoreGe)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_ge: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_le" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_le", c.Request.URL.Query(), &params.ScoreLe)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_le: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_after", c.Request.URL.Query(), &params.ModifiedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_before", c.Request.URL.Query(), &params.ModifiedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_before: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreats(c, threatModelId, params)
}

// CreateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelThreat(c, threatModelId)
}

// BulkDeleteThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkDeleteThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BulkDeleteThreatModelThreatsParams

	// ------------- Required query parameter "threat_ids" -------------

	if paramValue := c.Query("threat_ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument threat_ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "threat_ids", c.Request.URL.Query(), &params.ThreatIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkDeleteThreatModelThreats(c, threatModelId, params)
}

// BulkPatchThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkPatchThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkPatchThreatModelThreats(c, threatModelId)
}

// BulkCreateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelThreats(c, threatModelId)
}

// BulkUpdateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkUpdateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpdateThreatModelThreats(c, threatModelId)
}

// DeleteThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreat(c, threatModelId, threatId)
}

// PatchThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelThreat(c, threatModelId, threatId)
}

// UpdateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadata(c, threatModelId, threatId)
}

// CreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatMetadata(c, threatModelId, threatId)
}

// BulkCreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatMetadata(c, threatModelId, threatId)
}

// BulkUpsertThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatMetadata(c, threatModelId, threatId)
}

// DeleteThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatMetadataByKey(c, threatModelId, threatId, key)
}

// GetThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadataByKey(c, threatModelId, threatId, key)
}

// UpdateThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatMetadataByKey(c, threatModelId, threatId, key)
}

// DeleteUserAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserAccount(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserAccountParams

	// ------------- Optional query parameter "challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "challenge", c.Request.URL.Query(), &params.Challenge)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter challenge: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserAccount(c, params)
}

// GetCurrentUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserProfile(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUserProfile(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetApiInfo)
	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKS)
	router.GET(options.BaseURL+"/.well-known/oauth-authorization-server", wrapper.GetOAuthAuthorizationServerMetadata)
	router.GET(options.BaseURL+"/.well-known/oauth-protected-resource", wrapper.GetOAuthProtectedResourceMetadata)
	router.GET(options.BaseURL+"/.well-known/openid-configuration", wrapper.GetOpenIDConfiguration)
	router.GET(options.BaseURL+"/collaboration/sessions", wrapper.GetCollaborationSessions)
	router.GET(options.BaseURL+"/oauth2/authorize", wrapper.AuthorizeOAuthProvider)
	router.GET(options.BaseURL+"/oauth2/callback", wrapper.HandleOAuthCallback)
	router.POST(options.BaseURL+"/oauth2/introspect", wrapper.IntrospectToken)
	router.GET(options.BaseURL+"/oauth2/providers", wrapper.GetAuthProviders)
	router.GET(options.BaseURL+"/oauth2/providers/:idp/groups", wrapper.GetProviderGroups)
	router.POST(options.BaseURL+"/oauth2/refresh", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/oauth2/revoke", wrapper.LogoutUser)
	router.POST(options.BaseURL+"/oauth2/token", wrapper.ExchangeOAuthCode)
	router.GET(options.BaseURL+"/oauth2/userinfo", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/saml/acs", wrapper.ProcessSAMLResponse)
	router.GET(options.BaseURL+"/saml/login", wrapper.InitiateSAMLLogin)
	router.GET(options.BaseURL+"/saml/metadata", wrapper.GetSAMLMetadata)
	router.GET(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogout)
	router.POST(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogoutPost)
	router.GET(options.BaseURL+"/threat_models", wrapper.ListThreatModels)
	router.POST(options.BaseURL+"/threat_models", wrapper.CreateThreatModel)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id", wrapper.DeleteThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id", wrapper.GetThreatModel)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id", wrapper.PatchThreatModel)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id", wrapper.UpdateThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets", wrapper.GetThreatModelAssets)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets", wrapper.CreateThreatModelAsset)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/bulk", wrapper.BulkCreateThreatModelAssets)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/bulk", wrapper.BulkUpsertThreatModelAssets)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.DeleteThreatModelAsset)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.GetThreatModelAsset)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.PatchThreatModelAsset)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.UpdateThreatModelAsset)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata", wrapper.GetThreatModelAssetMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata", wrapper.CreateThreatModelAssetMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/bulk", wrapper.BulkCreateThreatModelAssetMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/bulk", wrapper.BulkUpsertThreatModelAssetMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.DeleteThreatModelAssetMetadata)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.GetThreatModelAssetMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.UpdateThreatModelAssetMetadata)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.GetThreatModelDiagrams)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.CreateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.DeleteThreatModelDiagram)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.GetThreatModelDiagram)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.PatchThreatModelDiagram)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.UpdateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.EndDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.GetDiagramCollaborationSession)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.CreateDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.GetDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.CreateDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/bulk", wrapper.BulkCreateDiagramMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/bulk", wrapper.BulkUpsertDiagramMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.DeleteDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.GetDiagramMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.UpdateDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.GetThreatModelDocuments)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.CreateThreatModelDocument)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/bulk", wrapper.BulkCreateThreatModelDocuments)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/bulk", wrapper.BulkUpsertThreatModelDocuments)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.DeleteThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.GetThreatModelDocument)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.PatchThreatModelDocument)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.UpdateThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.GetDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.CreateDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/bulk", wrapper.BulkCreateDocumentMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/bulk", wrapper.BulkUpsertDocumentMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.DeleteDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.GetDocumentMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.UpdateDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.GetThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.CreateThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata/bulk", wrapper.BulkCreateThreatModelMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/metadata/bulk", wrapper.BulkUpsertThreatModelMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.DeleteThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.GetThreatModelMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.UpdateThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes", wrapper.GetThreatModelNotes)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes", wrapper.CreateThreatModelNote)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.DeleteThreatModelNote)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.GetThreatModelNote)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.PatchThreatModelNote)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.UpdateThreatModelNote)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata", wrapper.GetNoteMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata", wrapper.CreateNoteMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/bulk", wrapper.BulkCreateNoteMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/bulk", wrapper.BulkUpdateNoteMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.DeleteNoteMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.GetNoteMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.UpdateNoteMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories", wrapper.GetThreatModelRepositories)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories", wrapper.CreateThreatModelRepository)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/bulk", wrapper.BulkCreateThreatModelRepositories)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/bulk", wrapper.BulkUpsertThreatModelRepositories)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.DeleteThreatModelRepository)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.GetThreatModelRepository)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.PatchThreatModelRepository)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.UpdateThreatModelRepository)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata", wrapper.GetRepositoryMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata", wrapper.CreateRepositoryMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/bulk", wrapper.BulkCreateRepositoryMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/bulk", wrapper.BulkUpsertRepositoryMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.DeleteRepositoryMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.GetRepositoryMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.UpdateRepositoryMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.GetThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.CreateThreatModelThreat)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkDeleteThreatModelThreats)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkPatchThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkCreateThreatModelThreats)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkUpdateThreatModelThreats)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.DeleteThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.GetThreatModelThreat)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.PatchThreatModelThreat)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.UpdateThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.GetThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.CreateThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/bulk", wrapper.BulkCreateThreatMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/bulk", wrapper.BulkUpsertThreatMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.DeleteThreatMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.GetThreatMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.UpdateThreatMetadataByKey)
	router.DELETE(options.BaseURL+"/users/me", wrapper.DeleteUserAccount)
	router.GET(options.BaseURL+"/users/me", wrapper.GetCurrentUserProfile)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9FwUwHmC0DAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
