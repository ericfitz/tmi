// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ApiInfoStatusCode.
const (
	ERROR ApiInfoStatusCode = "ERROR"
	OK    ApiInfoStatusCode = "OK"
)

// Defines values for AssetType.
const (
	AssetTypeData           AssetType = "data"
	AssetTypeHardware       AssetType = "hardware"
	AssetTypeInfrastructure AssetType = "infrastructure"
	AssetTypePersonnel      AssetType = "personnel"
	AssetTypeService        AssetType = "service"
	AssetTypeSoftware       AssetType = "software"
)

// Defines values for AuthTokenResponseTokenType.
const (
	Bearer AuthTokenResponseTokenType = "Bearer"
)

// Defines values for AuthorizationRole.
const (
	AuthorizationRoleOwner  AuthorizationRole = "owner"
	AuthorizationRoleReader AuthorizationRole = "reader"
	AuthorizationRoleWriter AuthorizationRole = "writer"
)

// Defines values for AuthorizationSubjectType.
const (
	AuthorizationSubjectTypeGroup AuthorizationSubjectType = "group"
	AuthorizationSubjectTypeUser  AuthorizationSubjectType = "user"
)

// Defines values for BaseDiagramType.
const (
	BaseDiagramTypeDFD100 BaseDiagramType = "DFD-1.0.0"
)

// Defines values for CreateDiagramRequestType.
const (
	CreateDiagramRequestTypeDFD100 CreateDiagramRequestType = "DFD-1.0.0"
)

// Defines values for DfdDiagramType.
const (
	DfdDiagramTypeDFD100 DfdDiagramType = "DFD-1.0.0"
)

// Defines values for DiagramListItemType.
const (
	DiagramListItemTypeDFD100 DiagramListItemType = "DFD-1.0.0"
)

// Defines values for EdgeShape.
const (
	EdgeShapeEdge EdgeShape = "edge"
)

// Defines values for EdgeAttrsLineSourceMarkerName.
const (
	EdgeAttrsLineSourceMarkerNameBlock   EdgeAttrsLineSourceMarkerName = "block"
	EdgeAttrsLineSourceMarkerNameCircle  EdgeAttrsLineSourceMarkerName = "circle"
	EdgeAttrsLineSourceMarkerNameClassic EdgeAttrsLineSourceMarkerName = "classic"
	EdgeAttrsLineSourceMarkerNameDiamond EdgeAttrsLineSourceMarkerName = "diamond"
)

// Defines values for EdgeAttrsLineTargetMarkerName.
const (
	EdgeAttrsLineTargetMarkerNameBlock   EdgeAttrsLineTargetMarkerName = "block"
	EdgeAttrsLineTargetMarkerNameCircle  EdgeAttrsLineTargetMarkerName = "circle"
	EdgeAttrsLineTargetMarkerNameClassic EdgeAttrsLineTargetMarkerName = "classic"
	EdgeAttrsLineTargetMarkerNameDiamond EdgeAttrsLineTargetMarkerName = "diamond"
)

// Defines values for EdgeConnector0.
const (
	EdgeConnector0Jumpover EdgeConnector0 = "jumpover"
	EdgeConnector0Normal   EdgeConnector0 = "normal"
	EdgeConnector0Rounded  EdgeConnector0 = "rounded"
	EdgeConnector0Smooth   EdgeConnector0 = "smooth"
)

// Defines values for EdgeConnector1ArgsJump.
const (
	Arc   EdgeConnector1ArgsJump = "arc"
	Cubic EdgeConnector1ArgsJump = "cubic"
	Gap   EdgeConnector1ArgsJump = "gap"
)

// Defines values for EdgeConnector1Name.
const (
	EdgeConnector1NameJumpover EdgeConnector1Name = "jumpover"
	EdgeConnector1NameNormal   EdgeConnector1Name = "normal"
	EdgeConnector1NameRounded  EdgeConnector1Name = "rounded"
	EdgeConnector1NameSmooth   EdgeConnector1Name = "smooth"
)

// Defines values for EdgeRouter0.
const (
	EdgeRouter0Er        EdgeRouter0 = "er"
	EdgeRouter0Manhattan EdgeRouter0 = "manhattan"
	EdgeRouter0Metro     EdgeRouter0 = "metro"
	EdgeRouter0Normal    EdgeRouter0 = "normal"
	EdgeRouter0OneSide   EdgeRouter0 = "oneSide"
	EdgeRouter0Orth      EdgeRouter0 = "orth"
)

// Defines values for EdgeRouter1ArgsDirections.
const (
	EdgeRouter1ArgsDirectionsBottom EdgeRouter1ArgsDirections = "bottom"
	EdgeRouter1ArgsDirectionsLeft   EdgeRouter1ArgsDirections = "left"
	EdgeRouter1ArgsDirectionsRight  EdgeRouter1ArgsDirections = "right"
	EdgeRouter1ArgsDirectionsTop    EdgeRouter1ArgsDirections = "top"
)

// Defines values for EdgeRouter1Name.
const (
	EdgeRouter1NameEr        EdgeRouter1Name = "er"
	EdgeRouter1NameManhattan EdgeRouter1Name = "manhattan"
	EdgeRouter1NameMetro     EdgeRouter1Name = "metro"
	EdgeRouter1NameNormal    EdgeRouter1Name = "normal"
	EdgeRouter1NameOneSide   EdgeRouter1Name = "oneSide"
	EdgeRouter1NameOrth      EdgeRouter1Name = "orth"
)

// Defines values for ExtendedAssetType.
const (
	ExtendedAssetTypeData           ExtendedAssetType = "data"
	ExtendedAssetTypeHardware       ExtendedAssetType = "hardware"
	ExtendedAssetTypeInfrastructure ExtendedAssetType = "infrastructure"
	ExtendedAssetTypePersonnel      ExtendedAssetType = "personnel"
	ExtendedAssetTypeService        ExtendedAssetType = "service"
	ExtendedAssetTypeSoftware       ExtendedAssetType = "software"
)

// Defines values for NodeShape.
const (
	Actor            NodeShape = "actor"
	Process          NodeShape = "process"
	SecurityBoundary NodeShape = "security-boundary"
	Store            NodeShape = "store"
	TextBox          NodeShape = "text-box"
)

// Defines values for ParticipantPermissions.
const (
	ParticipantPermissionsReader ParticipantPermissions = "reader"
	ParticipantPermissionsWriter ParticipantPermissions = "writer"
)

// Defines values for PortConfigurationGroupsPosition.
const (
	PortConfigurationGroupsPositionBottom PortConfigurationGroupsPosition = "bottom"
	PortConfigurationGroupsPositionLeft   PortConfigurationGroupsPosition = "left"
	PortConfigurationGroupsPositionRight  PortConfigurationGroupsPosition = "right"
	PortConfigurationGroupsPositionTop    PortConfigurationGroupsPosition = "top"
)

// Defines values for RepositoryParametersRefType.
const (
	Branch RepositoryParametersRefType = "branch"
	Commit RepositoryParametersRefType = "commit"
	Tag    RepositoryParametersRefType = "tag"
)

// Defines values for RepositoryType.
const (
	Git       RepositoryType = "git"
	Mercurial RepositoryType = "mercurial"
	Other     RepositoryType = "other"
	Svn       RepositoryType = "svn"
)

// Defines values for ThreatSeverity.
const (
	ThreatSeverityCritical ThreatSeverity = "Critical"
	ThreatSeverityHigh     ThreatSeverity = "High"
	ThreatSeverityLow      ThreatSeverity = "Low"
	ThreatSeverityMedium   ThreatSeverity = "Medium"
	ThreatSeverityNone     ThreatSeverity = "None"
	ThreatSeverityUnknown  ThreatSeverity = "Unknown"
)

// Defines values for ThreatBaseSeverity.
const (
	ThreatBaseSeverityCritical ThreatBaseSeverity = "Critical"
	ThreatBaseSeverityHigh     ThreatBaseSeverity = "High"
	ThreatBaseSeverityLow      ThreatBaseSeverity = "Low"
	ThreatBaseSeverityMedium   ThreatBaseSeverity = "Medium"
	ThreatBaseSeverityNone     ThreatBaseSeverity = "None"
	ThreatBaseSeverityUnknown  ThreatBaseSeverity = "Unknown"
)

// Defines values for PatchThreatModelApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp = "test"
)

// Defines values for GetThreatModelThreatsParamsSeverity.
const (
	Critical GetThreatModelThreatsParamsSeverity = "Critical"
	High     GetThreatModelThreatsParamsSeverity = "High"
	Low      GetThreatModelThreatsParamsSeverity = "Low"
	Medium   GetThreatModelThreatsParamsSeverity = "Medium"
	None     GetThreatModelThreatsParamsSeverity = "None"
	Unknown  GetThreatModelThreatsParamsSeverity = "Unknown"
)

// Defines values for BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp.
const (
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpAdd     BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "add"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpCopy    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "copy"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpMove    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "move"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpRemove  BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "remove"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpReplace BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "replace"
	BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOpTest    BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp = "test"
)

// Defines values for PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp.
const (
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpAdd     PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "add"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpCopy    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "copy"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpMove    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "move"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpRemove  PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "remove"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpReplace PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "replace"
	PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOpTest    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp = "test"
)

// ApiInfo API information response for the root endpoint
type ApiInfo struct {
	Api struct {
		// Specification URL to the API specification
		Specification string `json:"specification"`

		// Version API version
		Version string `json:"version"`
	} `json:"api"`
	Operator struct {
		// Contact Operator contact information from environment variables
		Contact string `json:"contact"`

		// Name Operator name from environment variables
		Name string `json:"name"`
	} `json:"operator"`
	Service struct {
		// Build Current build number
		Build string `json:"build"`

		// Name Name of the service
		Name string `json:"name"`
	} `json:"service"`
	Status struct {
		// Code Status code indicating if the API is functioning correctly
		Code ApiInfoStatusCode `json:"code"`

		// Time Current server time in UTC, formatted as RFC 3339
		Time time.Time `json:"time"`
	} `json:"status"`
}

// ApiInfoStatusCode Status code indicating if the API is functioning correctly
type ApiInfoStatusCode string

// Asset defines model for Asset.
type Asset struct {
	// Classification Classification tags for the asset
	Classification *[]string `json:"classification"`

	// Criticality Criticality level of the asset
	Criticality *string `json:"criticality"`

	// Description Description of the asset
	Description *string `json:"description"`

	// Id Unique identifier for the asset (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional asset metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Asset name
	Name string `binding:"required" json:"name"`

	// Sensitivity Sensitivity labels for the asset
	Sensitivity *[]string `json:"sensitivity"`

	// Type Type of asset
	Type AssetType `binding:"required" json:"type"`
}

// AssetType Type of asset
type AssetType string

// AuthTokenResponse JWT token response for authentication endpoints
type AuthTokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int `json:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token"`

	// TokenType Token type
	TokenType AuthTokenResponseTokenType `json:"token_type"`
}

// AuthTokenResponseTokenType Token type
type AuthTokenResponseTokenType string

// Authorization Authorization entry defining access permissions for users or groups
type Authorization struct {
	// Idp Identity provider (required for groups, optional for users)
	Idp *string `json:"idp,omitempty"`

	// Role Role: reader (view), writer (edit), owner (full control)
	Role AuthorizationRole `binding:"required" json:"role"`

	// Subject Email address or user id for users, group name for groups
	Subject string `binding:"required" json:"subject"`

	// SubjectType Type of authorization subject: user (individual) or group
	SubjectType AuthorizationSubjectType `binding:"required" json:"subject_type"`
}

// AuthorizationRole Role: reader (view), writer (edit), owner (full control)
type AuthorizationRole string

// AuthorizationSubjectType Type of authorization subject: user (individual) or group
type AuthorizationSubjectType string

// BaseDiagram Base diagram object with common properties
type BaseDiagram struct {
	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Image Image data with version information
	Image *struct {
		// Svg BASE64 encoded SVG representation of the diagram, used for thumbnails and reports
		Svg *[]byte `json:"svg,omitempty"`

		// UpdateVector Version of the diagram when this SVG was generated. If not provided when svg is updated, will be auto-set to BaseDiagram.update_vector
		UpdateVector *int64 `json:"update_vector,omitempty"`
	} `json:"image"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type BaseDiagramType `json:"type"`

	// UpdateVector Server-managed monotonic version counter, incremented on each diagram update
	UpdateVector *int64 `json:"update_vector,omitempty"`
}

// BaseDiagramType Type of diagram with version
type BaseDiagramType string

// Cell Base schema for all diagram cells (nodes and edges) in AntV X6 native format. This schema matches X6's toJSON() output exactly, enabling zero-transformation persistence. X6-specific properties like markup, tools, router, and connector are fully supported.
type Cell struct {
	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Cell_Data `json:"data,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Shape Shape type identifier that determines cell structure and behavior
	Shape string `json:"shape"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Cell_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Cell_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CellTool Interactive tool configuration for X6 cells
type CellTool struct {
	// Args Tool-specific configuration arguments
	Args *map[string]interface{} `json:"args,omitempty"`

	// Name Tool identifier (e.g., 'boundary', 'button', 'remove')
	Name string `json:"name"`
}

// CollaborationSession Details of an active collaboration session for a diagram
type CollaborationSession struct {
	// DiagramId Unique identifier of the associated diagram (UUID)
	DiagramId openapi_types.UUID `json:"diagram_id"`

	// DiagramName Name of the associated diagram
	DiagramName string `json:"diagram_name"`

	// Host Email address of the session host
	Host *string `json:"host,omitempty"`

	// Participants List of active participants
	Participants []Participant `json:"participants"`

	// Presenter Email address of the current presenter
	Presenter *string `json:"presenter,omitempty"`

	// SessionId Unique identifier for the session (UUID)
	SessionId *openapi_types.UUID `json:"session_id,omitempty"`

	// ThreatModelId Unique identifier of the associated threat model (UUID)
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// ThreatModelName Name of the associated threat model
	ThreatModelName string `json:"threat_model_name"`

	// WebsocketUrl WebSocket URL for real-time updates
	WebsocketUrl string `json:"websocket_url"`
}

// CreateDiagramRequest Request body for creating a new diagram - only includes client-provided fields
type CreateDiagramRequest struct {
	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of diagram with version
	Type CreateDiagramRequestType `json:"type"`
}

// CreateDiagramRequestType Type of diagram with version
type CreateDiagramRequestType string

// DeletionChallenge Challenge response for user account deletion
type DeletionChallenge struct {
	// ChallengeText The exact challenge string that must be provided to confirm deletion
	ChallengeText string `json:"challenge_text"`

	// ExpiresAt When the challenge expires (3 minutes from issuance)
	ExpiresAt time.Time `json:"expires_at"`
}

// DfdDiagram defines model for DfdDiagram.
type DfdDiagram struct {
	// Cells List of diagram cells (nodes and edges) following X6 structure
	Cells []DfdDiagram_Cells_Item `json:"cells"`

	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Id Unique identifier for the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Image Image data with version information
	Image *struct {
		// Svg BASE64 encoded SVG representation of the diagram, used for thumbnails and reports
		Svg *[]byte `json:"svg,omitempty"`

		// UpdateVector Version of the diagram when this SVG was generated. If not provided when svg is updated, will be auto-set to BaseDiagram.update_vector
		UpdateVector *int64 `json:"update_vector,omitempty"`
	} `json:"image"`

	// Metadata Key-value pairs for additional diagram metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type DFD diagram type with version
	Type DfdDiagramType `json:"type"`

	// UpdateVector Server-managed monotonic version counter, incremented on each diagram update
	UpdateVector *int64 `json:"update_vector,omitempty"`
}

// DfdDiagram_Cells_Item defines model for DfdDiagram.cells.Item.
type DfdDiagram_Cells_Item struct {
	union json.RawMessage
}

// DfdDiagramType DFD diagram type with version
type DfdDiagramType string

// Diagram defines model for Diagram.
type Diagram struct {
	union json.RawMessage
}

// DiagramListItem A simplified diagram item for list endpoints, containing id, name, and type
type DiagramListItem struct {
	// Id Unique identifier of the diagram (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name Name of the diagram
	Name string `json:"name"`

	// Type Type of the diagram
	Type DiagramListItemType `json:"type"`
}

// DiagramListItemType Type of the diagram
type DiagramListItemType string

// Document defines model for Document.
type Document struct {
	// Description Description of document purpose or content
	Description *string `json:"description"`

	// Id Unique identifier for the document (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional document metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Document name
	Name string `binding:"required" json:"name"`

	// Uri URL location of the document
	Uri string `binding:"required,url" json:"uri"`
}

// Edge defines model for Edge.
type Edge struct {
	// Attrs Visual styling attributes for the edge
	Attrs *EdgeAttrs `json:"attrs,omitempty"`

	// Connector Edge connector style configuration for visual appearance
	Connector *EdgeConnector `json:"connector,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Edge_Data `json:"data,omitempty"`

	// DefaultLabel Default label configuration applied to edges without explicit labels
	DefaultLabel *EdgeLabel `json:"defaultLabel,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Labels Text labels positioned along the edge
	Labels *[]EdgeLabel `json:"labels,omitempty"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Router Edge routing algorithm configuration for path calculation
	Router *EdgeRouter `json:"router,omitempty"`

	// Shape Edge type identifier
	Shape EdgeShape `json:"shape"`

	// Source Source connection point
	Source EdgeTerminal `json:"source"`

	// Target Target connection point
	Target EdgeTerminal `json:"target"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Vertices Intermediate waypoints for edge routing
	Vertices *[]Point `json:"vertices,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Edge_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Edge_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeShape Edge type identifier
type EdgeShape string

// EdgeAttrs Visual attributes for an edge
type EdgeAttrs struct {
	// Line Line styling attributes
	Line *struct {
		// SourceMarker Source marker configuration
		SourceMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineSourceMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"sourceMarker,omitempty"`

		// Stroke Line color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for the line
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Line width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`

		// TargetMarker Arrowhead marker configuration
		TargetMarker *struct {
			// Name Marker type
			Name *EdgeAttrsLineTargetMarkerName `json:"name,omitempty"`

			// Size Marker size in pixels
			Size *float32 `json:"size,omitempty"`
		} `json:"targetMarker,omitempty"`
	} `json:"line,omitempty"`
}

// EdgeAttrsLineSourceMarkerName Marker type
type EdgeAttrsLineSourceMarkerName string

// EdgeAttrsLineTargetMarkerName Marker type
type EdgeAttrsLineTargetMarkerName string

// EdgeConnector Edge connector style configuration for visual appearance
type EdgeConnector struct {
	union json.RawMessage
}

// EdgeConnector0 Built-in connector name
type EdgeConnector0 string

// EdgeConnector1 Connector with custom configuration
type EdgeConnector1 struct {
	// Args Connector-specific arguments
	Args *EdgeConnector_1_Args `json:"args,omitempty"`

	// Name Connector style name
	Name EdgeConnector1Name `json:"name"`
}

// EdgeConnector1ArgsJump Jump style for jumpover connectors
type EdgeConnector1ArgsJump string

// EdgeConnector_1_Args Connector-specific arguments
type EdgeConnector_1_Args struct {
	// Jump Jump style for jumpover connectors
	Jump *EdgeConnector1ArgsJump `json:"jump,omitempty"`

	// Precision Precision for smooth connectors
	Precision *float32 `json:"precision,omitempty"`

	// Radius Radius for rounded connectors
	Radius *float32 `json:"radius,omitempty"`

	// Size Jump size for jumpover connectors
	Size                 *float32               `json:"size,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeConnector1Name Connector style name
type EdgeConnector1Name string

// EdgeLabel Label positioned along an edge
type EdgeLabel struct {
	// Attrs Label styling attributes
	Attrs *struct {
		// Text Text styling
		Text *struct {
			// Fill Text color
			Fill *string `json:"fill,omitempty"`

			// FontFamily Font family
			FontFamily *string `json:"fontFamily,omitempty"`

			// FontSize Font size in pixels
			FontSize *float32 `json:"fontSize,omitempty"`

			// Text Label text content
			Text *string `json:"text,omitempty"`
		} `json:"text,omitempty"`
	} `json:"attrs,omitempty"`

	// Position Position along the edge (0 = start, 1 = end)
	Position *float32 `json:"position,omitempty"`
}

// EdgeRouter Edge routing algorithm configuration for pathfinding
type EdgeRouter struct {
	union json.RawMessage
}

// EdgeRouter0 Built-in router name
type EdgeRouter0 string

// EdgeRouter1 Router with custom configuration
type EdgeRouter1 struct {
	// Args Router-specific arguments
	Args *EdgeRouter_1_Args `json:"args,omitempty"`

	// Name Router algorithm name
	Name EdgeRouter1Name `json:"name"`
}

// EdgeRouter1ArgsDirections defines model for EdgeRouter.1.Args.Directions.
type EdgeRouter1ArgsDirections string

// EdgeRouter_1_Args Router-specific arguments
type EdgeRouter_1_Args struct {
	// Directions Allowed routing directions
	Directions *[]EdgeRouter1ArgsDirections `json:"directions,omitempty"`

	// Padding Padding around obstacles for routing
	Padding *float32 `json:"padding,omitempty"`

	// Step Grid step size for orthogonal routing
	Step                 *float32               `json:"step,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// EdgeRouter1Name Router algorithm name
type EdgeRouter1Name string

// EdgeTerminal Connection point for an edge (source or target)
type EdgeTerminal struct {
	// Cell ID of the connected node (UUID)
	Cell openapi_types.UUID `json:"cell"`

	// Port ID of the specific port on the node (optional)
	Port *string `json:"port"`
}

// Error Standard error response format
type Error struct {
	// Details Additional context-specific error information
	Details *struct {
		// Code Machine-readable error code for programmatic handling
		Code *string `json:"code,omitempty"`

		// Context Contextual information about the error
		Context *map[string]interface{} `json:"context,omitempty"`

		// Suggestion Human-readable suggestion for resolving the error
		Suggestion *string `json:"suggestion,omitempty"`
	} `json:"details"`

	// Error Error code
	Error string `json:"error"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `json:"error_description"`

	// ErrorUri URI to documentation about the error
	ErrorUri *string `json:"error_uri,omitempty"`
}

// ExtendedAsset defines model for ExtendedAsset.
type ExtendedAsset struct {
	// Classification Classification tags for the asset
	Classification *[]string `json:"classification"`

	// CreatedAt Creation timestamp (ISO3339)
	CreatedAt time.Time `json:"created_at"`

	// Criticality Criticality level of the asset
	Criticality *string `json:"criticality"`

	// Description Description of the asset
	Description *string `json:"description"`

	// Id Unique identifier for the asset (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional asset metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (ISO3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Asset name
	Name string `binding:"required" json:"name"`

	// Sensitivity Sensitivity labels for the asset
	Sensitivity *[]string `json:"sensitivity"`

	// ThreatModelId ID of the threat model this asset belongs to
	ThreatModelId openapi_types.UUID `json:"threat_model_id"`

	// Type Type of asset
	Type ExtendedAssetType `binding:"required" json:"type"`
}

// ExtendedAssetType Type of asset
type ExtendedAssetType string

// MarkupElement SVG/HTML markup element for custom shape definitions in X6
type MarkupElement struct {
	// Attrs Element attributes and styling properties
	Attrs *map[string]interface{} `json:"attrs,omitempty"`

	// Children Nested child elements
	Children *[]MarkupElement `json:"children,omitempty"`

	// Selector CSS selector for targeting this element in styling
	Selector *string `json:"selector,omitempty"`

	// TagName SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')
	TagName string `json:"tagName"`
}

// Metadata A key-value pair for extensible metadata
type Metadata struct {
	// Key Metadata key
	Key string `binding:"required" json:"key"`

	// Value Metadata value
	Value string `binding:"required" json:"value"`
}

// Node defines model for Node.
type Node struct {
	// Angle Rotation angle in degrees
	Angle *float32 `json:"angle,omitempty"`

	// Attrs Visual styling attributes for the node
	Attrs *NodeAttrs `json:"attrs,omitempty"`

	// Data Flexible data storage compatible with X6, with reserved metadata namespace
	Data *Node_Data `json:"data,omitempty"`

	// Id Unique identifier of the cell (UUID)
	Id openapi_types.UUID `json:"id"`

	// Markup SVG/HTML markup definition for custom shape rendering in X6
	Markup *[]MarkupElement `json:"markup,omitempty"`

	// Parent ID of the parent cell for nested/grouped nodes (UUID)
	Parent *openapi_types.UUID `json:"parent"`

	// Ports Port configuration for connections
	Ports *PortConfiguration `json:"ports,omitempty"`

	// Position Node position in X6 format
	Position struct {
		// X X coordinate
		X float32 `json:"x"`

		// Y Y coordinate
		Y float32 `json:"y"`
	} `json:"position"`

	// Shape Node type determining its visual representation and behavior
	Shape NodeShape `json:"shape"`

	// Size Node size in X6 format
	Size struct {
		// Height Height in pixels
		Height float32 `json:"height"`

		// Width Width in pixels
		Width float32 `json:"width"`
	} `json:"size"`

	// Tools Interactive tools attached to the cell for user interaction
	Tools *[]CellTool `json:"tools,omitempty"`

	// Visible Whether the cell is visible in the diagram
	Visible *bool `json:"visible,omitempty"`

	// ZIndex Z-order layer for rendering (higher values render on top)
	ZIndex *float32 `json:"zIndex,omitempty"`
}

// Node_Data Flexible data storage compatible with X6, with reserved metadata namespace
type Node_Data struct {
	// Metadata Reserved namespace for structured business metadata
	Metadata             *[]Metadata            `json:"_metadata,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// NodeShape Node type determining its visual representation and behavior
type NodeShape string

// NodeAttrs Visual attributes for a node
type NodeAttrs struct {
	// Body Body/shape styling attributes
	Body *struct {
		// Fill Fill color
		Fill *string `json:"fill,omitempty"`

		// Stroke Stroke color
		Stroke *string `json:"stroke,omitempty"`

		// StrokeDasharray Dash pattern for strokes
		StrokeDasharray *string `json:"strokeDasharray"`

		// StrokeWidth Stroke width in pixels
		StrokeWidth *float32 `json:"strokeWidth,omitempty"`
	} `json:"body,omitempty"`

	// Text Text/label styling attributes
	Text *struct {
		// Fill Text color
		Fill *string `json:"fill,omitempty"`

		// FontFamily Font family
		FontFamily *string `json:"fontFamily,omitempty"`

		// FontSize Font size in pixels
		FontSize *float32 `json:"fontSize,omitempty"`

		// Text Label text content
		Text *string `json:"text,omitempty"`
	} `json:"text,omitempty"`
}

// Note defines model for Note.
type Note struct {
	// Content Note content in markdown format
	Content string `binding:"required" json:"content"`

	// Description Description of note purpose or context
	Description *string `json:"description"`

	// Id Unique identifier for the note (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional note metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Note name
	Name string `binding:"required" json:"name"`
}

// OAuthProtectedResourceMetadata OAuth 2.0 protected resource metadata as defined in RFC 9728
type OAuthProtectedResourceMetadata struct {
	// AuthorizationServers List of authorization server issuer identifiers that can issue tokens for this resource
	AuthorizationServers *[]string `json:"authorization_servers,omitempty"`

	// BearerMethodsSupported Supported token presentation methods for bearer tokens
	BearerMethodsSupported *[]string `json:"bearer_methods_supported,omitempty"`

	// JwksUrl URL of the protected resource's JSON Web Key Set
	JwksUrl *string `json:"jwks_url,omitempty"`

	// Resource The protected resource's resource identifier URL
	Resource string `json:"resource"`

	// ResourceDocumentation URL with information for developers on how to use this protected resource
	ResourceDocumentation *string `json:"resource_documentation,omitempty"`

	// ResourceName Human-readable name of the protected resource
	ResourceName *string `json:"resource_name,omitempty"`

	// ScopesSupported JSON array of OAuth scope values supported by this protected resource
	ScopesSupported *[]string `json:"scopes_supported,omitempty"`

	// TlsClientCertificateBoundAccessTokens Whether the protected resource supports TLS client certificate bound access tokens
	TlsClientCertificateBoundAccessTokens *bool `json:"tls_client_certificate_bound_access_tokens,omitempty"`
}

// Participant A participant in a collaboration session
type Participant struct {
	// LastActivity Last activity timestamp
	LastActivity time.Time `json:"last_activity"`

	// Permissions Access permissions in the collaboration session
	Permissions ParticipantPermissions `json:"permissions"`

	// User Represents a user in the system
	User User `json:"user"`
}

// ParticipantPermissions Access permissions in the collaboration session
type ParticipantPermissions string

// Point A 2D point with x and y coordinates
type Point struct {
	// X X coordinate
	X float32 `json:"x"`

	// Y Y coordinate
	Y float32 `json:"y"`
}

// PortConfiguration Port configuration for node connections
type PortConfiguration struct {
	// Groups Port group definitions
	Groups *map[string]struct {
		// Position Port position on the node
		Position *PortConfigurationGroupsPosition `json:"position,omitempty"`
	} `json:"groups,omitempty"`

	// Items Individual port instances
	Items *[]struct {
		// Group Port group this port belongs to
		Group string `json:"group"`

		// Id Unique port identifier
		Id string `json:"id"`
	} `json:"items,omitempty"`
}

// PortConfigurationGroupsPosition Port position on the node
type PortConfigurationGroupsPosition string

// Repository defines model for Repository.
type Repository struct {
	// Description Description of the referenced source code
	Description *string `json:"description"`

	// Id Unique identifier for the source code reference (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Metadata Key-value pairs for additional source metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name for the source code reference
	Name *string `json:"name,omitempty"`

	// Parameters repo-specific parameters for retrieving the source
	Parameters *struct {
		// RefType Reference type (branch, tag, or commit)
		RefType RepositoryParametersRefType `json:"refType"`

		// RefValue Reference value (branch name, tag value, or commit id)
		RefValue string `json:"refValue"`

		// SubPath Sub-path within the repository
		SubPath *string `json:"subPath,omitempty"`
	} `json:"parameters,omitempty"`

	// Type Source code repository type
	Type *RepositoryType `json:"type,omitempty"`

	// Uri URL to retrieve the referenced source code
	Uri string `json:"uri"`
}

// RepositoryParametersRefType Reference type (branch, tag, or commit)
type RepositoryParametersRefType string

// RepositoryType Source code repository type
type RepositoryType string

// TMListItem Enhanced item for threat model list endpoints with key metadata and counts
type TMListItem struct {
	// AssetCount Number of assets associated with this threat model
	AssetCount int `json:"asset_count"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt time.Time `json:"created_at"`

	// CreatedBy Email address, name or identifier of the creator
	CreatedBy string `json:"created_by"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// DiagramCount Number of diagrams associated with this threat model
	DiagramCount int `json:"diagram_count"`

	// DocumentCount Number of documents associated with this threat model
	DocumentCount int `json:"document_count"`

	// Id Unique identifier of the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system
	IssueUri *string `json:"issue_uri,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt time.Time `json:"modified_at"`

	// Name Name of the threat model
	Name string `json:"name"`

	// NoteCount Number of notes associated with this threat model
	NoteCount int `json:"note_count"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// RepoCount Number of source code repository entries associated with this threat model
	RepoCount int `json:"repo_count"`

	// ThreatCount Number of threats defined in this threat model
	ThreatCount int `json:"threat_count"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// Threat defines model for Threat.
type Threat struct {
	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// Id Unique identifier for the threat (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatModelId Unique identifier of the parent threat model (UUID)
	ThreatModelId *openapi_types.UUID `json:"threat_model_id,omitempty"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatSeverity Severity level of the threat
type ThreatSeverity string

// ThreatBase Base schema for Threat with client-writable fields
type ThreatBase struct {
	// CellId Unique identifier of the associated cell (if applicable) (UUID)
	CellId *openapi_types.UUID `json:"cell_id"`

	// Description Description of the threat and risk to the organization
	Description *string `json:"description,omitempty"`

	// DiagramId Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId *openapi_types.UUID `json:"diagram_id"`

	// IssueUri URL to an issue in an issue tracking system for this threat
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat metadata
	Metadata *[]Metadata `json:"metadata"`

	// Mitigated Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`

	// Mitigation Recommended or planned mitigation(s) for the threat
	Mitigation *string `json:"mitigation,omitempty"`

	// Name Name of the threat
	Name string `json:"name"`

	// Priority Priority level for addressing the threat
	Priority string `json:"priority"`

	// Score Numeric score representing the risk or impact of the threat
	Score *float32 `json:"score,omitempty"`

	// Severity Severity level of the threat
	Severity ThreatBaseSeverity `json:"severity"`

	// Status Current status of the threat
	Status string `json:"status"`

	// ThreatType Type or category of the threat
	ThreatType string `json:"threat_type"`
}

// ThreatBaseSeverity Severity level of the threat
type ThreatBaseSeverity string

// ThreatInput Base schema for Threat with client-writable fields
type ThreatInput = ThreatBase

// ThreatModel defines model for ThreatModel.
type ThreatModel struct {
	// Assets List of assets associated with the threat model
	Assets *[]ExtendedAsset `json:"assets,omitempty"`

	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// CreatedAt Creation timestamp (RFC3339)
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// CreatedBy User name, email or identifier of the creator of the threat model
	CreatedBy *string `json:"created_by,omitempty"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// Diagrams List of diagram objects associated with this threat model
	Diagrams *[]Diagram `json:"diagrams,omitempty"`

	// Documents List of documents related to the threat model
	Documents *[]Document `json:"documents,omitempty"`

	// Id Unique identifier for the threat model (UUID)
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// ModifiedAt Last modification timestamp (RFC3339)
	ModifiedAt *time.Time `json:"modified_at,omitempty"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Notes List of notes associated with the threat model
	Notes *[]Note `json:"notes,omitempty"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// Repositories List of source code repositories related to the threat model
	Repositories *[]Repository `json:"repositories,omitempty"`

	// Status Status of the threat model in the organization's threat modeling or SDLC process. Examples: "Not started", "In progress", "Review", "Approved", "Closed"
	Status *[]string `json:"status"`

	// StatusUpdated Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.
	StatusUpdated *time.Time `json:"status_updated"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`

	// Threats List of threats within the threat model
	Threats *[]Threat `json:"threats,omitempty"`
}

// ThreatModelBase Base schema for ThreatModel with client-writable fields
type ThreatModelBase struct {
	// Authorization List of users and their roles for this threat model
	Authorization []Authorization `json:"authorization"`

	// Description Description of the threat model
	Description *string `json:"description,omitempty"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri,omitempty"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `binding:"required" json:"name"`

	// Owner Email address of the current owner
	Owner string `json:"owner"`

	// Status Status of the threat model in the organization's threat modeling or SDLC process. Examples: "Not started", "In progress", "Review", "Approved", "Closed"
	Status *[]string `json:"status"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework string `json:"threat_model_framework"`
}

// ThreatModelInput Input schema for creating/updating ThreatModel
type ThreatModelInput struct {
	// Authorization List of users and their roles for this threat model
	Authorization *[]Authorization `json:"authorization,omitempty"`

	// Description Description of the threat model and its purpose
	Description *string `json:"description"`

	// IssueUri URL to an issue in an issue tracking system for this threat model
	IssueUri *string `json:"issue_uri"`

	// Metadata Key-value pairs for additional threat model metadata
	Metadata *[]Metadata `json:"metadata"`

	// Name Name of the threat model
	Name string `json:"name"`

	// ThreatModelFramework The framework used for this threat model
	ThreatModelFramework *string `json:"threat_model_framework,omitempty"`
}

// User Represents a user in the system
type User struct {
	// Email User's email address
	Email string `json:"email"`

	// Groups Groups the user belongs to (from identity provider)
	Groups *[]string `json:"groups,omitempty"`

	// Idp Identity provider used for current session
	Idp *string `json:"idp,omitempty"`

	// LastLogin Timestamp of user's last login
	LastLogin *time.Time `json:"last_login,omitempty"`

	// Name User's display name
	Name string `json:"name"`

	// Picture URL to user's profile picture
	Picture *string `json:"picture,omitempty"`

	// UserId OAuth provider's unique identifier for the user (from primary provider)
	UserId string `json:"user_id"`
}

// AuthorizeOAuthProviderParams defines parameters for AuthorizeOAuthProvider.
type AuthorizeOAuthProviderParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`

	// ClientCallback Client callback URL where TMI should redirect after successful OAuth completion with tokens as query parameters. If not provided, tokens are returned as JSON response.
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`

	// State CSRF protection state parameter. Recommended for security. Will be included in the callback response.
	State *string `form:"state,omitempty" json:"state,omitempty"`

	// LoginHint User identity hint for test OAuth provider. Allows specifying a desired user identity for testing and automation. Only supported by the test provider (ignored by production providers like Google, GitHub, etc.). Must be 3-20 characters, alphanumeric and hyphens only.
	LoginHint *string `form:"login_hint,omitempty" json:"login_hint,omitempty"`

	// Scope OAuth 2.0 scope parameter. For OpenID Connect, must include "openid". Supports "profile" and "email" scopes. Other scopes are silently ignored. Space-separated values.
	Scope string `form:"scope" json:"scope"`
}

// HandleOAuthCallbackParams defines parameters for HandleOAuthCallback.
type HandleOAuthCallbackParams struct {
	// Code Authorization code from the OAuth provider
	Code string `form:"code" json:"code"`

	// State Optional state parameter for CSRF protection
	State *string `form:"state,omitempty" json:"state,omitempty"`
}

// IntrospectTokenFormdataBody defines parameters for IntrospectToken.
type IntrospectTokenFormdataBody struct {
	// Token The JWT token to introspect
	Token string `form:"token" json:"token"`

	// TokenTypeHint Optional hint about the type of token being introspected
	TokenTypeHint *string `form:"token_type_hint" json:"token_type_hint"`
}

// RefreshTokenJSONBody defines parameters for RefreshToken.
type RefreshTokenJSONBody struct {
	// RefreshToken Valid refresh token
	RefreshToken string `json:"refresh_token"`
}

// LogoutUserJSONBody defines parameters for LogoutUser.
type LogoutUserJSONBody = map[string]interface{}

// ExchangeOAuthCodeJSONBody defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeJSONBody struct {
	// Code Authorization code received from OAuth provider
	Code string `json:"code"`

	// RedirectUri Redirect URI used in the authorization request (must match exactly)
	RedirectUri string `json:"redirect_uri"`

	// State State parameter for CSRF protection (optional but recommended)
	State *string `json:"state,omitempty"`
}

// ExchangeOAuthCodeParams defines parameters for ExchangeOAuthCode.
type ExchangeOAuthCodeParams struct {
	// Idp OAuth provider identifier. Defaults to 'test' provider in non-production builds if not specified.
	Idp *string `form:"idp,omitempty" json:"idp,omitempty"`
}

// ProcessSAMLResponseFormdataBody defines parameters for ProcessSAMLResponse.
type ProcessSAMLResponseFormdataBody struct {
	// RelayState State parameter for CSRF protection
	RelayState *string `form:"RelayState,omitempty" json:"RelayState,omitempty"`

	// SAMLResponse Base64-encoded SAML response
	SAMLResponse string `form:"SAMLResponse" json:"SAMLResponse"`
}

// InitiateSAMLLoginParams defines parameters for InitiateSAMLLogin.
type InitiateSAMLLoginParams struct {
	// ClientCallback Client callback URL to redirect after authentication
	ClientCallback *string `form:"client_callback,omitempty" json:"client_callback,omitempty"`
}

// ProcessSAMLLogoutParams defines parameters for ProcessSAMLLogout.
type ProcessSAMLLogoutParams struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ProcessSAMLLogoutPostFormdataBody defines parameters for ProcessSAMLLogoutPost.
type ProcessSAMLLogoutPostFormdataBody struct {
	// SAMLRequest Base64-encoded SAML logout request
	SAMLRequest string `form:"SAMLRequest" json:"SAMLRequest"`
}

// ListThreatModelsParams defines parameters for ListThreatModels.
type ListThreatModelsParams struct {
	// Limit Number of threat models to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Pagination offset
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Owner Filter by owner name or email
	Owner *string `form:"owner,omitempty" json:"owner,omitempty"`

	// Name Filter by threat model name (partial match)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter by threat model description (partial match)
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// IssueUri Filter by issue URI (partial match)
	IssueUri *string `form:"issue_uri,omitempty" json:"issue_uri,omitempty"`

	// CreatedAfter Filter threat models created after this date (RFC3339 format)
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter threat models created before this date (RFC3339 format)
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// ModifiedAfter Filter threat models modified after this date (RFC3339 format)
	ModifiedAfter *time.Time `form:"modified_after,omitempty" json:"modified_after,omitempty"`

	// ModifiedBefore Filter threat models modified before this date (RFC3339 format)
	ModifiedBefore *time.Time `form:"modified_before,omitempty" json:"modified_before,omitempty"`

	// Status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values.
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// StatusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339)
	StatusUpdatedAfter *time.Time `form:"status_updated_after,omitempty" json:"status_updated_after,omitempty"`

	// StatusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339)
	StatusUpdatedBefore *time.Time `form:"status_updated_before,omitempty" json:"status_updated_before,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBody = []struct {
	// Op Patch operation type
	Op PatchThreatModelApplicationJSONPatchPlusJSONBodyOp `json:"op"`

	// Path JSON path to target
	Path string `json:"path"`

	// Value Value to apply
	Value *interface{} `json:"value,omitempty"`
}

// PatchThreatModelApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModel.
type PatchThreatModelApplicationJSONPatchPlusJSONBodyOp string

// GetThreatModelAssetsParams defines parameters for GetThreatModelAssets.
type GetThreatModelAssetsParams struct {
	// Limit Maximum number of assets to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of assets to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelAssetsJSONBody defines parameters for BulkCreateThreatModelAssets.
type BulkCreateThreatModelAssetsJSONBody = []Asset

// BulkCreateThreatModelAssetMetadataJSONBody defines parameters for BulkCreateThreatModelAssetMetadata.
type BulkCreateThreatModelAssetMetadataJSONBody = []Metadata

// BulkUpsertThreatModelAssetMetadataJSONBody defines parameters for BulkUpsertThreatModelAssetMetadata.
type BulkUpsertThreatModelAssetMetadataJSONBody = []Metadata

// GetThreatModelDiagramsParams defines parameters for GetThreatModelDiagrams.
type GetThreatModelDiagramsParams struct {
	// Limit Maximum number of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                   `json:"from,omitempty"`
	Op    PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                    `json:"path"`
	Value *interface{}                                              `json:"value,omitempty"`
}

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelDiagram.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateDiagramMetadataJSONBody defines parameters for BulkCreateDiagramMetadata.
type BulkCreateDiagramMetadataJSONBody = []Metadata

// BulkUpsertDiagramMetadataJSONBody defines parameters for BulkUpsertDiagramMetadata.
type BulkUpsertDiagramMetadataJSONBody = []Metadata

// UpdateDiagramMetadataByKeyJSONBody defines parameters for UpdateDiagramMetadataByKey.
type UpdateDiagramMetadataByKeyJSONBody struct {
	// Value Metadata value
	Value string `json:"value"`
}

// GetThreatModelDocumentsParams defines parameters for GetThreatModelDocuments.
type GetThreatModelDocumentsParams struct {
	// Limit Maximum number of documents to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of documents to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelDocumentsJSONBody defines parameters for BulkCreateThreatModelDocuments.
type BulkCreateThreatModelDocumentsJSONBody = []Document

// BulkCreateDocumentMetadataJSONBody defines parameters for BulkCreateDocumentMetadata.
type BulkCreateDocumentMetadataJSONBody = []Metadata

// BulkUpsertDocumentMetadataJSONBody defines parameters for BulkUpsertDocumentMetadata.
type BulkUpsertDocumentMetadataJSONBody = []Metadata

// UpdateDocumentMetadataByKeyJSONBody defines parameters for UpdateDocumentMetadataByKey.
type UpdateDocumentMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// BulkCreateThreatModelMetadataJSONBody defines parameters for BulkCreateThreatModelMetadata.
type BulkCreateThreatModelMetadataJSONBody = []Metadata

// BulkUpsertThreatModelMetadataJSONBody defines parameters for BulkUpsertThreatModelMetadata.
type BulkUpsertThreatModelMetadataJSONBody = []Metadata

// UpdateThreatModelMetadataByKeyJSONBody defines parameters for UpdateThreatModelMetadataByKey.
type UpdateThreatModelMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelNotesParams defines parameters for GetThreatModelNotes.
type GetThreatModelNotesParams struct {
	// Limit Maximum number of notes to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of notes to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateNoteMetadataJSONBody defines parameters for BulkCreateNoteMetadata.
type BulkCreateNoteMetadataJSONBody = []Metadata

// BulkUpdateNoteMetadataJSONBody defines parameters for BulkUpdateNoteMetadata.
type BulkUpdateNoteMetadataJSONBody = []Metadata

// UpdateNoteMetadataByKeyJSONBody defines parameters for UpdateNoteMetadataByKey.
type UpdateNoteMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelRepositoriesParams defines parameters for GetThreatModelRepositories.
type GetThreatModelRepositoriesParams struct {
	// Limit Maximum number of sources to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of sources to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// BulkCreateThreatModelRepositoriesJSONBody defines parameters for BulkCreateThreatModelRepositories.
type BulkCreateThreatModelRepositoriesJSONBody = []Repository

// BulkCreateRepositoryMetadataJSONBody defines parameters for BulkCreateRepositoryMetadata.
type BulkCreateRepositoryMetadataJSONBody = []Metadata

// BulkUpsertRepositoryMetadataJSONBody defines parameters for BulkUpsertRepositoryMetadata.
type BulkUpsertRepositoryMetadataJSONBody = []Metadata

// UpdateRepositoryMetadataByKeyJSONBody defines parameters for UpdateRepositoryMetadataByKey.
type UpdateRepositoryMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// GetThreatModelThreatsParams defines parameters for GetThreatModelThreats.
type GetThreatModelThreatsParams struct {
	// Limit Maximum number of threats to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of threats to skip
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc)
	Sort *string `form:"sort,omitempty" json:"sort,omitempty"`

	// Name Filter by threat name (partial match)
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Description Filter by threat description (partial match)
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// ThreatType Filter by threat type (exact match)
	ThreatType *string `form:"threat_type,omitempty" json:"threat_type,omitempty"`

	// Severity Filter by severity level (exact match)
	Severity *GetThreatModelThreatsParamsSeverity `form:"severity,omitempty" json:"severity,omitempty"`

	// Priority Filter by priority (exact match)
	Priority *string `form:"priority,omitempty" json:"priority,omitempty"`

	// Status Filter by status (exact match)
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// DiagramId Filter by diagram ID (exact match)
	DiagramId *openapi_types.UUID `form:"diagram_id,omitempty" json:"diagram_id,omitempty"`

	// CellId Filter by cell ID (exact match)
	CellId *openapi_types.UUID `form:"cell_id,omitempty" json:"cell_id,omitempty"`

	// ScoreGt Filter threats with score greater than this value
	ScoreGt *float32 `form:"score_gt,omitempty" json:"score_gt,omitempty"`

	// ScoreLt Filter threats with score less than this value
	ScoreLt *float32 `form:"score_lt,omitempty" json:"score_lt,omitempty"`

	// ScoreEq Filter threats with score equal to this value
	ScoreEq *float32 `form:"score_eq,omitempty" json:"score_eq,omitempty"`

	// ScoreGe Filter threats with score greater than or equal to this value
	ScoreGe *float32 `form:"score_ge,omitempty" json:"score_ge,omitempty"`

	// ScoreLe Filter threats with score less than or equal to this value
	ScoreLe *float32 `form:"score_le,omitempty" json:"score_le,omitempty"`

	// CreatedAfter Filter threats created after this date (RFC3339 format)
	CreatedAfter *time.Time `form:"created_after,omitempty" json:"created_after,omitempty"`

	// CreatedBefore Filter threats created before this date (RFC3339 format)
	CreatedBefore *time.Time `form:"created_before,omitempty" json:"created_before,omitempty"`

	// ModifiedAfter Filter threats modified after this date (RFC3339 format)
	ModifiedAfter *time.Time `form:"modified_after,omitempty" json:"modified_after,omitempty"`

	// ModifiedBefore Filter threats modified before this date (RFC3339 format)
	ModifiedBefore *time.Time `form:"modified_before,omitempty" json:"modified_before,omitempty"`
}

// GetThreatModelThreatsParamsSeverity defines parameters for GetThreatModelThreats.
type GetThreatModelThreatsParamsSeverity string

// BatchDeleteThreatModelThreatsParams defines parameters for BatchDeleteThreatModelThreats.
type BatchDeleteThreatModelThreatsParams struct {
	// ThreatIds Comma-separated list of threat IDs to delete (e.g., id1,id2,id3)
	ThreatIds []openapi_types.UUID `form:"threat_ids" json:"threat_ids"`
}

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody defines parameters for BatchPatchThreatModelThreats.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody struct {
	Patches []struct {
		Operations []struct {
			// Op Patch operation type
			Op BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp `json:"op"`

			// Path JSON path to target
			Path string `json:"path"`

			// Value Value to apply
			Value *interface{} `json:"value,omitempty"`
		} `json:"operations"`

		// ThreatId ID of the threat to patch
		ThreatId openapi_types.UUID `json:"threat_id"`
	} `json:"patches"`
}

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp defines parameters for BatchPatchThreatModelThreats.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBodyPatchesOperationsOp string

// BulkCreateThreatModelThreatsJSONBody defines parameters for BulkCreateThreatModelThreats.
type BulkCreateThreatModelThreatsJSONBody = []Threat

// BulkUpdateThreatModelThreatsJSONBody defines parameters for BulkUpdateThreatModelThreats.
type BulkUpdateThreatModelThreatsJSONBody = []Threat

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBody defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBody = []struct {
	From  *string                                                  `json:"from,omitempty"`
	Op    PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp `json:"op"`
	Path  string                                                   `json:"path"`
	Value *interface{}                                             `json:"value,omitempty"`
}

// PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp defines parameters for PatchThreatModelThreat.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONBodyOp string

// BulkCreateThreatMetadataJSONBody defines parameters for BulkCreateThreatMetadata.
type BulkCreateThreatMetadataJSONBody = []Metadata

// BulkUpsertThreatMetadataJSONBody defines parameters for BulkUpsertThreatMetadata.
type BulkUpsertThreatMetadataJSONBody = []Metadata

// UpdateThreatMetadataByKeyJSONBody defines parameters for UpdateThreatMetadataByKey.
type UpdateThreatMetadataByKeyJSONBody struct {
	// Value New value for the metadata entry
	Value string `json:"value"`
}

// DeleteUserAccountParams defines parameters for DeleteUserAccount.
type DeleteUserAccountParams struct {
	// Challenge Challenge string from first request (step 2 only). Must match exactly.
	Challenge *string `form:"challenge,omitempty" json:"challenge,omitempty"`
}

// IntrospectTokenFormdataRequestBody defines body for IntrospectToken for application/x-www-form-urlencoded ContentType.
type IntrospectTokenFormdataRequestBody IntrospectTokenFormdataBody

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody RefreshTokenJSONBody

// LogoutUserJSONRequestBody defines body for LogoutUser for application/json ContentType.
type LogoutUserJSONRequestBody = LogoutUserJSONBody

// ExchangeOAuthCodeJSONRequestBody defines body for ExchangeOAuthCode for application/json ContentType.
type ExchangeOAuthCodeJSONRequestBody ExchangeOAuthCodeJSONBody

// ProcessSAMLResponseFormdataRequestBody defines body for ProcessSAMLResponse for application/x-www-form-urlencoded ContentType.
type ProcessSAMLResponseFormdataRequestBody ProcessSAMLResponseFormdataBody

// ProcessSAMLLogoutPostFormdataRequestBody defines body for ProcessSAMLLogoutPost for application/x-www-form-urlencoded ContentType.
type ProcessSAMLLogoutPostFormdataRequestBody ProcessSAMLLogoutPostFormdataBody

// CreateThreatModelJSONRequestBody defines body for CreateThreatModel for application/json ContentType.
type CreateThreatModelJSONRequestBody = ThreatModelInput

// PatchThreatModelApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModel for application/json-patch+json ContentType.
type PatchThreatModelApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelApplicationJSONPatchPlusJSONBody

// UpdateThreatModelJSONRequestBody defines body for UpdateThreatModel for application/json ContentType.
type UpdateThreatModelJSONRequestBody = ThreatModelInput

// CreateThreatModelAssetJSONRequestBody defines body for CreateThreatModelAsset for application/json ContentType.
type CreateThreatModelAssetJSONRequestBody = Asset

// BulkCreateThreatModelAssetsJSONRequestBody defines body for BulkCreateThreatModelAssets for application/json ContentType.
type BulkCreateThreatModelAssetsJSONRequestBody = BulkCreateThreatModelAssetsJSONBody

// UpdateThreatModelAssetJSONRequestBody defines body for UpdateThreatModelAsset for application/json ContentType.
type UpdateThreatModelAssetJSONRequestBody = Asset

// CreateThreatModelAssetMetadataJSONRequestBody defines body for CreateThreatModelAssetMetadata for application/json ContentType.
type CreateThreatModelAssetMetadataJSONRequestBody = Metadata

// BulkCreateThreatModelAssetMetadataJSONRequestBody defines body for BulkCreateThreatModelAssetMetadata for application/json ContentType.
type BulkCreateThreatModelAssetMetadataJSONRequestBody = BulkCreateThreatModelAssetMetadataJSONBody

// BulkUpsertThreatModelAssetMetadataJSONRequestBody defines body for BulkUpsertThreatModelAssetMetadata for application/json ContentType.
type BulkUpsertThreatModelAssetMetadataJSONRequestBody = BulkUpsertThreatModelAssetMetadataJSONBody

// UpdateThreatModelAssetMetadataJSONRequestBody defines body for UpdateThreatModelAssetMetadata for application/json ContentType.
type UpdateThreatModelAssetMetadataJSONRequestBody = Metadata

// CreateThreatModelDiagramJSONRequestBody defines body for CreateThreatModelDiagram for application/json ContentType.
type CreateThreatModelDiagramJSONRequestBody = CreateDiagramRequest

// PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelDiagram for application/json-patch+json ContentType.
type PatchThreatModelDiagramApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelDiagramApplicationJSONPatchPlusJSONBody

// UpdateThreatModelDiagramJSONRequestBody defines body for UpdateThreatModelDiagram for application/json ContentType.
type UpdateThreatModelDiagramJSONRequestBody = Diagram

// CreateDiagramMetadataJSONRequestBody defines body for CreateDiagramMetadata for application/json ContentType.
type CreateDiagramMetadataJSONRequestBody = Metadata

// BulkCreateDiagramMetadataJSONRequestBody defines body for BulkCreateDiagramMetadata for application/json ContentType.
type BulkCreateDiagramMetadataJSONRequestBody = BulkCreateDiagramMetadataJSONBody

// BulkUpsertDiagramMetadataJSONRequestBody defines body for BulkUpsertDiagramMetadata for application/json ContentType.
type BulkUpsertDiagramMetadataJSONRequestBody = BulkUpsertDiagramMetadataJSONBody

// UpdateDiagramMetadataByKeyJSONRequestBody defines body for UpdateDiagramMetadataByKey for application/json ContentType.
type UpdateDiagramMetadataByKeyJSONRequestBody UpdateDiagramMetadataByKeyJSONBody

// CreateThreatModelDocumentJSONRequestBody defines body for CreateThreatModelDocument for application/json ContentType.
type CreateThreatModelDocumentJSONRequestBody = Document

// BulkCreateThreatModelDocumentsJSONRequestBody defines body for BulkCreateThreatModelDocuments for application/json ContentType.
type BulkCreateThreatModelDocumentsJSONRequestBody = BulkCreateThreatModelDocumentsJSONBody

// UpdateThreatModelDocumentJSONRequestBody defines body for UpdateThreatModelDocument for application/json ContentType.
type UpdateThreatModelDocumentJSONRequestBody = Document

// CreateDocumentMetadataJSONRequestBody defines body for CreateDocumentMetadata for application/json ContentType.
type CreateDocumentMetadataJSONRequestBody = Metadata

// BulkCreateDocumentMetadataJSONRequestBody defines body for BulkCreateDocumentMetadata for application/json ContentType.
type BulkCreateDocumentMetadataJSONRequestBody = BulkCreateDocumentMetadataJSONBody

// BulkUpsertDocumentMetadataJSONRequestBody defines body for BulkUpsertDocumentMetadata for application/json ContentType.
type BulkUpsertDocumentMetadataJSONRequestBody = BulkUpsertDocumentMetadataJSONBody

// UpdateDocumentMetadataByKeyJSONRequestBody defines body for UpdateDocumentMetadataByKey for application/json ContentType.
type UpdateDocumentMetadataByKeyJSONRequestBody UpdateDocumentMetadataByKeyJSONBody

// CreateThreatModelMetadataJSONRequestBody defines body for CreateThreatModelMetadata for application/json ContentType.
type CreateThreatModelMetadataJSONRequestBody = Metadata

// BulkCreateThreatModelMetadataJSONRequestBody defines body for BulkCreateThreatModelMetadata for application/json ContentType.
type BulkCreateThreatModelMetadataJSONRequestBody = BulkCreateThreatModelMetadataJSONBody

// BulkUpsertThreatModelMetadataJSONRequestBody defines body for BulkUpsertThreatModelMetadata for application/json ContentType.
type BulkUpsertThreatModelMetadataJSONRequestBody = BulkUpsertThreatModelMetadataJSONBody

// UpdateThreatModelMetadataByKeyJSONRequestBody defines body for UpdateThreatModelMetadataByKey for application/json ContentType.
type UpdateThreatModelMetadataByKeyJSONRequestBody UpdateThreatModelMetadataByKeyJSONBody

// CreateThreatModelNoteJSONRequestBody defines body for CreateThreatModelNote for application/json ContentType.
type CreateThreatModelNoteJSONRequestBody = Note

// UpdateThreatModelNoteJSONRequestBody defines body for UpdateThreatModelNote for application/json ContentType.
type UpdateThreatModelNoteJSONRequestBody = Note

// CreateNoteMetadataJSONRequestBody defines body for CreateNoteMetadata for application/json ContentType.
type CreateNoteMetadataJSONRequestBody = Metadata

// BulkCreateNoteMetadataJSONRequestBody defines body for BulkCreateNoteMetadata for application/json ContentType.
type BulkCreateNoteMetadataJSONRequestBody = BulkCreateNoteMetadataJSONBody

// BulkUpdateNoteMetadataJSONRequestBody defines body for BulkUpdateNoteMetadata for application/json ContentType.
type BulkUpdateNoteMetadataJSONRequestBody = BulkUpdateNoteMetadataJSONBody

// UpdateNoteMetadataByKeyJSONRequestBody defines body for UpdateNoteMetadataByKey for application/json ContentType.
type UpdateNoteMetadataByKeyJSONRequestBody UpdateNoteMetadataByKeyJSONBody

// CreateThreatModelRepositoryJSONRequestBody defines body for CreateThreatModelRepository for application/json ContentType.
type CreateThreatModelRepositoryJSONRequestBody = Repository

// BulkCreateThreatModelRepositoriesJSONRequestBody defines body for BulkCreateThreatModelRepositories for application/json ContentType.
type BulkCreateThreatModelRepositoriesJSONRequestBody = BulkCreateThreatModelRepositoriesJSONBody

// UpdateThreatModelRepositoryJSONRequestBody defines body for UpdateThreatModelRepository for application/json ContentType.
type UpdateThreatModelRepositoryJSONRequestBody = Repository

// CreateRepositoryMetadataJSONRequestBody defines body for CreateRepositoryMetadata for application/json ContentType.
type CreateRepositoryMetadataJSONRequestBody = Metadata

// BulkCreateRepositoryMetadataJSONRequestBody defines body for BulkCreateRepositoryMetadata for application/json ContentType.
type BulkCreateRepositoryMetadataJSONRequestBody = BulkCreateRepositoryMetadataJSONBody

// BulkUpsertRepositoryMetadataJSONRequestBody defines body for BulkUpsertRepositoryMetadata for application/json ContentType.
type BulkUpsertRepositoryMetadataJSONRequestBody = BulkUpsertRepositoryMetadataJSONBody

// UpdateRepositoryMetadataByKeyJSONRequestBody defines body for UpdateRepositoryMetadataByKey for application/json ContentType.
type UpdateRepositoryMetadataByKeyJSONRequestBody UpdateRepositoryMetadataByKeyJSONBody

// CreateThreatModelThreatJSONRequestBody defines body for CreateThreatModelThreat for application/json ContentType.
type CreateThreatModelThreatJSONRequestBody = ThreatInput

// BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody defines body for BatchPatchThreatModelThreats for application/json-patch+json ContentType.
type BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONRequestBody BatchPatchThreatModelThreatsApplicationJSONPatchPlusJSONBody

// BulkCreateThreatModelThreatsJSONRequestBody defines body for BulkCreateThreatModelThreats for application/json ContentType.
type BulkCreateThreatModelThreatsJSONRequestBody = BulkCreateThreatModelThreatsJSONBody

// BulkUpdateThreatModelThreatsJSONRequestBody defines body for BulkUpdateThreatModelThreats for application/json ContentType.
type BulkUpdateThreatModelThreatsJSONRequestBody = BulkUpdateThreatModelThreatsJSONBody

// PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody defines body for PatchThreatModelThreat for application/json-patch+json ContentType.
type PatchThreatModelThreatApplicationJSONPatchPlusJSONRequestBody = PatchThreatModelThreatApplicationJSONPatchPlusJSONBody

// UpdateThreatModelThreatJSONRequestBody defines body for UpdateThreatModelThreat for application/json ContentType.
type UpdateThreatModelThreatJSONRequestBody = ThreatInput

// CreateThreatMetadataJSONRequestBody defines body for CreateThreatMetadata for application/json ContentType.
type CreateThreatMetadataJSONRequestBody = Metadata

// BulkCreateThreatMetadataJSONRequestBody defines body for BulkCreateThreatMetadata for application/json ContentType.
type BulkCreateThreatMetadataJSONRequestBody = BulkCreateThreatMetadataJSONBody

// BulkUpsertThreatMetadataJSONRequestBody defines body for BulkUpsertThreatMetadata for application/json ContentType.
type BulkUpsertThreatMetadataJSONRequestBody = BulkUpsertThreatMetadataJSONBody

// UpdateThreatMetadataByKeyJSONRequestBody defines body for UpdateThreatMetadataByKey for application/json ContentType.
type UpdateThreatMetadataByKeyJSONRequestBody UpdateThreatMetadataByKeyJSONBody

// Getter for additional properties for Cell_Data. Returns the specified
// element and whether it was found
func (a Cell_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Cell_Data
func (a *Cell_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a *Cell_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Cell_Data to handle AdditionalProperties
func (a Cell_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Edge_Data. Returns the specified
// element and whether it was found
func (a Edge_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Edge_Data
func (a *Edge_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a *Edge_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Edge_Data to handle AdditionalProperties
func (a Edge_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeConnector_1_Args. Returns the specified
// element and whether it was found
func (a EdgeConnector_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeConnector_1_Args
func (a *EdgeConnector_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a *EdgeConnector_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["jump"]; found {
		err = json.Unmarshal(raw, &a.Jump)
		if err != nil {
			return fmt.Errorf("error reading 'jump': %w", err)
		}
		delete(object, "jump")
	}

	if raw, found := object["precision"]; found {
		err = json.Unmarshal(raw, &a.Precision)
		if err != nil {
			return fmt.Errorf("error reading 'precision': %w", err)
		}
		delete(object, "precision")
	}

	if raw, found := object["radius"]; found {
		err = json.Unmarshal(raw, &a.Radius)
		if err != nil {
			return fmt.Errorf("error reading 'radius': %w", err)
		}
		delete(object, "radius")
	}

	if raw, found := object["size"]; found {
		err = json.Unmarshal(raw, &a.Size)
		if err != nil {
			return fmt.Errorf("error reading 'size': %w", err)
		}
		delete(object, "size")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeConnector_1_Args to handle AdditionalProperties
func (a EdgeConnector_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Jump != nil {
		object["jump"], err = json.Marshal(a.Jump)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'jump': %w", err)
		}
	}

	if a.Precision != nil {
		object["precision"], err = json.Marshal(a.Precision)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'precision': %w", err)
		}
	}

	if a.Radius != nil {
		object["radius"], err = json.Marshal(a.Radius)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'radius': %w", err)
		}
	}

	if a.Size != nil {
		object["size"], err = json.Marshal(a.Size)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'size': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for EdgeRouter_1_Args. Returns the specified
// element and whether it was found
func (a EdgeRouter_1_Args) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EdgeRouter_1_Args
func (a *EdgeRouter_1_Args) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a *EdgeRouter_1_Args) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["directions"]; found {
		err = json.Unmarshal(raw, &a.Directions)
		if err != nil {
			return fmt.Errorf("error reading 'directions': %w", err)
		}
		delete(object, "directions")
	}

	if raw, found := object["padding"]; found {
		err = json.Unmarshal(raw, &a.Padding)
		if err != nil {
			return fmt.Errorf("error reading 'padding': %w", err)
		}
		delete(object, "padding")
	}

	if raw, found := object["step"]; found {
		err = json.Unmarshal(raw, &a.Step)
		if err != nil {
			return fmt.Errorf("error reading 'step': %w", err)
		}
		delete(object, "step")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EdgeRouter_1_Args to handle AdditionalProperties
func (a EdgeRouter_1_Args) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Directions != nil {
		object["directions"], err = json.Marshal(a.Directions)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'directions': %w", err)
		}
	}

	if a.Padding != nil {
		object["padding"], err = json.Marshal(a.Padding)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'padding': %w", err)
		}
	}

	if a.Step != nil {
		object["step"], err = json.Marshal(a.Step)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'step': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for Node_Data. Returns the specified
// element and whether it was found
func (a Node_Data) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Node_Data
func (a *Node_Data) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a *Node_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["_metadata"]; found {
		err = json.Unmarshal(raw, &a.Metadata)
		if err != nil {
			return fmt.Errorf("error reading '_metadata': %w", err)
		}
		delete(object, "_metadata")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Node_Data to handle AdditionalProperties
func (a Node_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Metadata != nil {
		object["_metadata"], err = json.Marshal(a.Metadata)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '_metadata': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsNode returns the union data inside the DfdDiagram_Cells_Item as a Node
func (t DfdDiagram_Cells_Item) AsNode() (Node, error) {
	var body Node
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNode overwrites any union data inside the DfdDiagram_Cells_Item as the provided Node
func (t *DfdDiagram_Cells_Item) FromNode(v Node) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNode performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Node
func (t *DfdDiagram_Cells_Item) MergeNode(v Node) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdge returns the union data inside the DfdDiagram_Cells_Item as a Edge
func (t DfdDiagram_Cells_Item) AsEdge() (Edge, error) {
	var body Edge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdge overwrites any union data inside the DfdDiagram_Cells_Item as the provided Edge
func (t *DfdDiagram_Cells_Item) FromEdge(v Edge) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdge performs a merge with any union data inside the DfdDiagram_Cells_Item, using the provided Edge
func (t *DfdDiagram_Cells_Item) MergeEdge(v Edge) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DfdDiagram_Cells_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DfdDiagram_Cells_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDfdDiagram returns the union data inside the Diagram as a DfdDiagram
func (t Diagram) AsDfdDiagram() (DfdDiagram, error) {
	var body DfdDiagram
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDfdDiagram overwrites any union data inside the Diagram as the provided DfdDiagram
func (t *Diagram) FromDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDfdDiagram performs a merge with any union data inside the Diagram, using the provided DfdDiagram
func (t *Diagram) MergeDfdDiagram(v DfdDiagram) error {
	v.Type = "DFD-1.0.0"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Diagram) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Diagram) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "DFD-1.0.0":
		return t.AsDfdDiagram()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Diagram) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Diagram) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeConnector0 returns the union data inside the EdgeConnector as a EdgeConnector0
func (t EdgeConnector) AsEdgeConnector0() (EdgeConnector0, error) {
	var body EdgeConnector0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector0 overwrites any union data inside the EdgeConnector as the provided EdgeConnector0
func (t *EdgeConnector) FromEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector0 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector0
func (t *EdgeConnector) MergeEdgeConnector0(v EdgeConnector0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeConnector1 returns the union data inside the EdgeConnector as a EdgeConnector1
func (t EdgeConnector) AsEdgeConnector1() (EdgeConnector1, error) {
	var body EdgeConnector1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeConnector1 overwrites any union data inside the EdgeConnector as the provided EdgeConnector1
func (t *EdgeConnector) FromEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeConnector1 performs a merge with any union data inside the EdgeConnector, using the provided EdgeConnector1
func (t *EdgeConnector) MergeEdgeConnector1(v EdgeConnector1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeConnector) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeConnector) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsEdgeRouter0 returns the union data inside the EdgeRouter as a EdgeRouter0
func (t EdgeRouter) AsEdgeRouter0() (EdgeRouter0, error) {
	var body EdgeRouter0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter0 overwrites any union data inside the EdgeRouter as the provided EdgeRouter0
func (t *EdgeRouter) FromEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter0 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter0
func (t *EdgeRouter) MergeEdgeRouter0(v EdgeRouter0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsEdgeRouter1 returns the union data inside the EdgeRouter as a EdgeRouter1
func (t EdgeRouter) AsEdgeRouter1() (EdgeRouter1, error) {
	var body EdgeRouter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEdgeRouter1 overwrites any union data inside the EdgeRouter as the provided EdgeRouter1
func (t *EdgeRouter) FromEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEdgeRouter1 performs a merge with any union data inside the EdgeRouter, using the provided EdgeRouter1
func (t *EdgeRouter) MergeEdgeRouter1(v EdgeRouter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t EdgeRouter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *EdgeRouter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API information
	// (GET /)
	GetApiInfo(c *gin.Context)
	// JSON Web Key Set
	// (GET /.well-known/jwks.json)
	GetJWKS(c *gin.Context)
	// OAuth 2.0 Authorization Server Metadata
	// (GET /.well-known/oauth-authorization-server)
	GetOAuthAuthorizationServerMetadata(c *gin.Context)
	// OAuth 2.0 Protected Resource Metadata
	// (GET /.well-known/oauth-protected-resource)
	GetOAuthProtectedResourceMetadata(c *gin.Context)
	// OpenID Connect Discovery Configuration
	// (GET /.well-known/openid-configuration)
	GetOpenIDConfiguration(c *gin.Context)
	// List active collaboration sessions
	// (GET /collaboration/sessions)
	GetCollaborationSessions(c *gin.Context)
	// Get current user profile
	// (GET /me)
	GetCurrentUserProfile(c *gin.Context)
	// Initiate OAuth authorization flow
	// (GET /oauth2/authorize)
	AuthorizeOAuthProvider(c *gin.Context, params AuthorizeOAuthProviderParams)
	// Handle OAuth callback
	// (GET /oauth2/callback)
	HandleOAuthCallback(c *gin.Context, params HandleOAuthCallbackParams)
	// Token Introspection
	// (POST /oauth2/introspect)
	IntrospectToken(c *gin.Context)
	// List available OAuth providers
	// (GET /oauth2/providers)
	GetAuthProviders(c *gin.Context)
	// Get groups for identity provider
	// (GET /oauth2/providers/{idp}/groups)
	GetProviderGroups(c *gin.Context, idp string)
	// Refresh JWT token
	// (POST /oauth2/refresh)
	RefreshToken(c *gin.Context)
	// Logout user
	// (POST /oauth2/revoke)
	LogoutUser(c *gin.Context)
	// Exchange OAuth authorization code for JWT tokens
	// (POST /oauth2/token)
	ExchangeOAuthCode(c *gin.Context, params ExchangeOAuthCodeParams)
	// Get current user information
	// (GET /oauth2/userinfo)
	GetCurrentUser(c *gin.Context)
	// SAML Assertion Consumer Service
	// (POST /saml/acs)
	ProcessSAMLResponse(c *gin.Context)
	// Initiate SAML authentication
	// (GET /saml/login)
	InitiateSAMLLogin(c *gin.Context, params InitiateSAMLLoginParams)
	// Get SAML service provider metadata
	// (GET /saml/metadata)
	GetSAMLMetadata(c *gin.Context)
	// SAML Single Logout
	// (GET /saml/slo)
	ProcessSAMLLogout(c *gin.Context, params ProcessSAMLLogoutParams)
	// SAML Single Logout (POST)
	// (POST /saml/slo)
	ProcessSAMLLogoutPost(c *gin.Context)
	// List threat models
	// (GET /threat_models)
	ListThreatModels(c *gin.Context, params ListThreatModelsParams)
	// Create a threat model
	// (POST /threat_models)
	CreateThreatModel(c *gin.Context)
	// Delete a threat model
	// (DELETE /threat_models/{threat_model_id})
	DeleteThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Retrieve a threat model
	// (GET /threat_models/{threat_model_id})
	GetThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Partially update a threat model
	// (PATCH /threat_models/{threat_model_id})
	PatchThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// Update a threat model
	// (PUT /threat_models/{threat_model_id})
	UpdateThreatModel(c *gin.Context, threatModelId openapi_types.UUID)
	// List assets in a threat model
	// (GET /threat_models/{threat_model_id}/assets)
	GetThreatModelAssets(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelAssetsParams)
	// Create a new asset
	// (POST /threat_models/{threat_model_id}/assets)
	CreateThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create assets
	// (POST /threat_models/{threat_model_id}/assets/bulk)
	BulkCreateThreatModelAssets(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete an asset
	// (DELETE /threat_models/{threat_model_id}/assets/{asset_id})
	DeleteThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Get a specific asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id})
	GetThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Update an asset
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id})
	UpdateThreatModelAsset(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Get all metadata for an asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id}/metadata)
	GetThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Add metadata to an asset
	// (POST /threat_models/{threat_model_id}/assets/{asset_id}/metadata)
	CreateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Bulk create asset metadata
	// (POST /threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk)
	BulkCreateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Bulk upsert asset metadata
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk)
	BulkUpsertThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID)
	// Delete asset metadata
	// (DELETE /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	DeleteThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// Get specific metadata for an asset
	// (GET /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	GetThreatModelAssetMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// Update asset metadata
	// (PUT /threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key})
	UpdateThreatModelAssetMetadata(c *gin.Context, threatModelId openapi_types.UUID, assetId openapi_types.UUID, key string)
	// List threat model diagrams
	// (GET /threat_models/{threat_model_id}/diagrams)
	GetThreatModelDiagrams(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDiagramsParams)
	// Create a new diagram
	// (POST /threat_models/{threat_model_id}/diagrams)
	CreateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a diagram
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id})
	DeleteThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get a specific diagram
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id})
	GetThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Partially update a diagram
	// (PATCH /threat_models/{threat_model_id}/diagrams/{diagram_id})
	PatchThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Update a diagram
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id})
	UpdateThreatModelDiagram(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// End diagram collaboration session
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	EndDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram collaboration session
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	GetDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram collaboration session
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate)
	CreateDiagramCollaborationSession(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Get diagram metadata
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	GetDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata)
	CreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Bulk create diagram metadata
	// (POST /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk)
	BulkCreateDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Bulk upsert diagram metadata
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk)
	BulkUpsertDiagramMetadata(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID)
	// Delete diagram metadata by key
	// (DELETE /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	DeleteDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Get diagram metadata by key
	// (GET /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	GetDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// Update diagram metadata by key
	// (PUT /threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key})
	UpdateDiagramMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, diagramId openapi_types.UUID, key string)
	// List documents in a threat model
	// (GET /threat_models/{threat_model_id}/documents)
	GetThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelDocumentsParams)
	// Create a new document
	// (POST /threat_models/{threat_model_id}/documents)
	CreateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create documents
	// (POST /threat_models/{threat_model_id}/documents/bulk)
	BulkCreateThreatModelDocuments(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a document
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id})
	DeleteThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get a specific document
	// (GET /threat_models/{threat_model_id}/documents/{document_id})
	GetThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Update a document
	// (PUT /threat_models/{threat_model_id}/documents/{document_id})
	UpdateThreatModelDocument(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Get document metadata
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	GetDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata)
	CreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Bulk create document metadata
	// (POST /threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk)
	BulkCreateDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Bulk upsert document metadata
	// (PUT /threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk)
	BulkUpsertDocumentMetadata(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID)
	// Delete document metadata by key
	// (DELETE /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	DeleteDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get document metadata by key
	// (GET /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	GetDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Update document metadata by key
	// (PUT /threat_models/{threat_model_id}/documents/{document_id}/metadata/{key})
	UpdateDocumentMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, documentId openapi_types.UUID, key string)
	// Get threat model metadata
	// (GET /threat_models/{threat_model_id}/metadata)
	GetThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata)
	CreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threat model metadata
	// (POST /threat_models/{threat_model_id}/metadata/bulk)
	BulkCreateThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk upsert threat model metadata
	// (PUT /threat_models/{threat_model_id}/metadata/bulk)
	BulkUpsertThreatModelMetadata(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete threat model metadata by key
	// (DELETE /threat_models/{threat_model_id}/metadata/{key})
	DeleteThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Get threat model metadata by key
	// (GET /threat_models/{threat_model_id}/metadata/{key})
	GetThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// Update threat model metadata by key
	// (PUT /threat_models/{threat_model_id}/metadata/{key})
	UpdateThreatModelMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, key string)
	// List notes in a threat model
	// (GET /threat_models/{threat_model_id}/notes)
	GetThreatModelNotes(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelNotesParams)
	// Create a new note
	// (POST /threat_models/{threat_model_id}/notes)
	CreateThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a note
	// (DELETE /threat_models/{threat_model_id}/notes/{note_id})
	DeleteThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Get a specific note
	// (GET /threat_models/{threat_model_id}/notes/{note_id})
	GetThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Update a note
	// (PUT /threat_models/{threat_model_id}/notes/{note_id})
	UpdateThreatModelNote(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Get note metadata
	// (GET /threat_models/{threat_model_id}/notes/{note_id}/metadata)
	GetNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Create note metadata
	// (POST /threat_models/{threat_model_id}/notes/{note_id}/metadata)
	CreateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Bulk create note metadata
	// (POST /threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk)
	BulkCreateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Bulk update note metadata
	// (PUT /threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk)
	BulkUpdateNoteMetadata(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID)
	// Delete note metadata by key
	// (DELETE /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	DeleteNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// Get note metadata by key
	// (GET /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	GetNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// Update note metadata by key
	// (PUT /threat_models/{threat_model_id}/notes/{note_id}/metadata/{key})
	UpdateNoteMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, noteId openapi_types.UUID, key string)
	// List sources in a threat model
	// (GET /threat_models/{threat_model_id}/repositories)
	GetThreatModelRepositories(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelRepositoriesParams)
	// Create a new source reference
	// (POST /threat_models/{threat_model_id}/repositories)
	CreateThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create sources
	// (POST /threat_models/{threat_model_id}/repositories/bulk)
	BulkCreateThreatModelRepositories(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a source reference
	// (DELETE /threat_models/{threat_model_id}/repositories/{repository_id})
	DeleteThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Get a specific source reference
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id})
	GetThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Update a source reference
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id})
	UpdateThreatModelRepository(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Get source metadata
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id}/metadata)
	GetRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Create source metadata
	// (POST /threat_models/{threat_model_id}/repositories/{repository_id}/metadata)
	CreateRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Bulk create source metadata
	// (POST /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk)
	BulkCreateRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Bulk upsert repository metadata
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk)
	BulkUpsertRepositoryMetadata(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID)
	// Delete source metadata by key
	// (DELETE /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	DeleteRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// Get source metadata by key
	// (GET /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	GetRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// Update source metadata by key
	// (PUT /threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key})
	UpdateRepositoryMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, repositoryId openapi_types.UUID, key string)
	// List threats in a threat model
	// (GET /threat_models/{threat_model_id}/threats)
	GetThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params GetThreatModelThreatsParams)
	// Create a new threat
	// (POST /threat_models/{threat_model_id}/threats)
	CreateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID)
	// Batch delete threats
	// (DELETE /threat_models/{threat_model_id}/threats/batch)
	BatchDeleteThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID, params BatchDeleteThreatModelThreatsParams)
	// Batch patch threats
	// (POST /threat_models/{threat_model_id}/threats/batch/patch)
	BatchPatchThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk create threats
	// (POST /threat_models/{threat_model_id}/threats/bulk)
	BulkCreateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Bulk update threats
	// (PUT /threat_models/{threat_model_id}/threats/bulk)
	BulkUpdateThreatModelThreats(c *gin.Context, threatModelId openapi_types.UUID)
	// Delete a threat
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id})
	DeleteThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get a specific threat
	// (GET /threat_models/{threat_model_id}/threats/{threat_id})
	GetThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Partially update a threat
	// (PATCH /threat_models/{threat_model_id}/threats/{threat_id})
	PatchThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Update a threat
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id})
	UpdateThreatModelThreat(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Get threat metadata
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	GetThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata)
	CreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Bulk create threat metadata
	// (POST /threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk)
	BulkCreateThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Bulk upsert threat metadata
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk)
	BulkUpsertThreatMetadata(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID)
	// Delete threat metadata by key
	// (DELETE /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	DeleteThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Get threat metadata by key
	// (GET /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	GetThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Update threat metadata by key
	// (PUT /threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key})
	UpdateThreatMetadataByKey(c *gin.Context, threatModelId openapi_types.UUID, threatId openapi_types.UUID, key string)
	// Delete authenticated user account and all data
	// (DELETE /users/me)
	DeleteUserAccount(c *gin.Context, params DeleteUserAccountParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiInfo operation middleware
func (siw *ServerInterfaceWrapper) GetApiInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiInfo(c)
}

// GetJWKS operation middleware
func (siw *ServerInterfaceWrapper) GetJWKS(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetJWKS(c)
}

// GetOAuthAuthorizationServerMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthAuthorizationServerMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthAuthorizationServerMetadata(c)
}

// GetOAuthProtectedResourceMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetOAuthProtectedResourceMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOAuthProtectedResourceMetadata(c)
}

// GetOpenIDConfiguration operation middleware
func (siw *ServerInterfaceWrapper) GetOpenIDConfiguration(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOpenIDConfiguration(c)
}

// GetCollaborationSessions operation middleware
func (siw *ServerInterfaceWrapper) GetCollaborationSessions(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCollaborationSessions(c)
}

// GetCurrentUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserProfile(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUserProfile(c)
}

// AuthorizeOAuthProvider operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuthProvider(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeOAuthProviderParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "login_hint" -------------

	err = runtime.BindQueryParameter("form", true, false, "login_hint", c.Request.URL.Query(), &params.LoginHint)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter login_hint: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "scope" -------------

	if paramValue := c.Query("scope"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument scope is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "scope", c.Request.URL.Query(), &params.Scope)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scope: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuthProvider(c, params)
}

// HandleOAuthCallback operation middleware
func (siw *ServerInterfaceWrapper) HandleOAuthCallback(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HandleOAuthCallbackParams

	// ------------- Required query parameter "code" -------------

	if paramValue := c.Query("code"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument code is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "code", c.Request.URL.Query(), &params.Code)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter code: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", c.Request.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter state: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HandleOAuthCallback(c, params)
}

// IntrospectToken operation middleware
func (siw *ServerInterfaceWrapper) IntrospectToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.IntrospectToken(c)
}

// GetAuthProviders operation middleware
func (siw *ServerInterfaceWrapper) GetAuthProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAuthProviders(c)
}

// GetProviderGroups operation middleware
func (siw *ServerInterfaceWrapper) GetProviderGroups(c *gin.Context) {

	var err error

	// ------------- Path parameter "idp" -------------
	var idp string

	err = runtime.BindStyledParameterWithOptions("simple", "idp", c.Param("idp"), &idp, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetProviderGroups(c, idp)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RefreshToken(c)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.LogoutUser(c)
}

// ExchangeOAuthCode operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuthCode(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ExchangeOAuthCodeParams

	// ------------- Optional query parameter "idp" -------------

	err = runtime.BindQueryParameter("form", true, false, "idp", c.Request.URL.Query(), &params.Idp)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter idp: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuthCode(c, params)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// ProcessSAMLResponse operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLResponse(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLResponse(c)
}

// InitiateSAMLLogin operation middleware
func (siw *ServerInterfaceWrapper) InitiateSAMLLogin(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InitiateSAMLLoginParams

	// ------------- Optional query parameter "client_callback" -------------

	err = runtime.BindQueryParameter("form", true, false, "client_callback", c.Request.URL.Query(), &params.ClientCallback)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter client_callback: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InitiateSAMLLogin(c, params)
}

// GetSAMLMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetSAMLMetadata(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSAMLMetadata(c)
}

// ProcessSAMLLogout operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogout(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProcessSAMLLogoutParams

	// ------------- Required query parameter "SAMLRequest" -------------

	if paramValue := c.Query("SAMLRequest"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument SAMLRequest is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "SAMLRequest", c.Request.URL.Query(), &params.SAMLRequest)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter SAMLRequest: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogout(c, params)
}

// ProcessSAMLLogoutPost operation middleware
func (siw *ServerInterfaceWrapper) ProcessSAMLLogoutPost(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ProcessSAMLLogoutPost(c)
}

// ListThreatModels operation middleware
func (siw *ServerInterfaceWrapper) ListThreatModels(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListThreatModelsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owner" -------------

	err = runtime.BindQueryParameter("form", true, false, "owner", c.Request.URL.Query(), &params.Owner)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owner: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "issue_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "issue_uri", c.Request.URL.Query(), &params.IssueUri)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter issue_uri: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_after", c.Request.URL.Query(), &params.ModifiedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_before", c.Request.URL.Query(), &params.ModifiedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status_updated_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_updated_after", c.Request.URL.Query(), &params.StatusUpdatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status_updated_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status_updated_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "status_updated_before", c.Request.URL.Query(), &params.StatusUpdatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status_updated_before: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListThreatModels(c, params)
}

// CreateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModel(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModel(c)
}

// DeleteThreatModel operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModel(c, threatModelId)
}

// GetThreatModel operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModel(c, threatModelId)
}

// PatchThreatModel operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModel(c, threatModelId)
}

// UpdateThreatModel operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModel(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModel(c, threatModelId)
}

// GetThreatModelAssets operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelAssetsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssets(c, threatModelId, params)
}

// CreateThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelAsset(c, threatModelId)
}

// BulkCreateThreatModelAssets operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelAssets(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelAssets(c, threatModelId)
}

// DeleteThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelAsset(c, threatModelId, assetId)
}

// GetThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAsset(c, threatModelId, assetId)
}

// UpdateThreatModelAsset operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelAsset(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelAsset(c, threatModelId, assetId)
}

// GetThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssetMetadata(c, threatModelId, assetId)
}

// CreateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelAssetMetadata(c, threatModelId, assetId)
}

// BulkCreateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelAssetMetadata(c, threatModelId, assetId)
}

// BulkUpsertThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelAssetMetadata(c, threatModelId, assetId)
}

// DeleteThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelAssetMetadata(c, threatModelId, assetId, key)
}

// GetThreatModelAssetMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelAssetMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelAssetMetadataByKey(c, threatModelId, assetId, key)
}

// UpdateThreatModelAssetMetadata operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelAssetMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "asset_id" -------------
	var assetId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "asset_id", c.Param("asset_id"), &assetId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter asset_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelAssetMetadata(c, threatModelId, assetId, key)
}

// GetThreatModelDiagrams operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagrams(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDiagramsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagrams(c, threatModelId, params)
}

// CreateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDiagram(c, threatModelId)
}

// DeleteThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDiagram(c, threatModelId, diagramId)
}

// GetThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDiagram(c, threatModelId, diagramId)
}

// PatchThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelDiagram(c, threatModelId, diagramId)
}

// UpdateThreatModelDiagram operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDiagram(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDiagram(c, threatModelId, diagramId)
}

// EndDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) EndDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.EndDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramCollaborationSession(c, threatModelId, diagramId)
}

// CreateDiagramCollaborationSession operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramCollaborationSession(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramCollaborationSession(c, threatModelId, diagramId)
}

// GetDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadata(c, threatModelId, diagramId)
}

// CreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDiagramMetadata(c, threatModelId, diagramId)
}

// BulkCreateDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDiagramMetadata(c, threatModelId, diagramId)
}

// BulkUpsertDiagramMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertDiagramMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertDiagramMetadata(c, threatModelId, diagramId)
}

// DeleteDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// UpdateDiagramMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDiagramMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "diagram_id" -------------
	var diagramId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "diagram_id", c.Param("diagram_id"), &diagramId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDiagramMetadataByKey(c, threatModelId, diagramId, key)
}

// GetThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelDocumentsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocuments(c, threatModelId, params)
}

// CreateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelDocument(c, threatModelId)
}

// BulkCreateThreatModelDocuments operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelDocuments(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelDocuments(c, threatModelId)
}

// DeleteThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelDocument(c, threatModelId, documentId)
}

// GetThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelDocument(c, threatModelId, documentId)
}

// UpdateThreatModelDocument operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelDocument(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelDocument(c, threatModelId, documentId)
}

// GetDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadata(c, threatModelId, documentId)
}

// CreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDocumentMetadata(c, threatModelId, documentId)
}

// BulkCreateDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateDocumentMetadata(c, threatModelId, documentId)
}

// BulkUpsertDocumentMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertDocumentMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertDocumentMetadata(c, threatModelId, documentId)
}

// DeleteDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// UpdateDocumentMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateDocumentMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "document_id" -------------
	var documentId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "document_id", c.Param("document_id"), &documentId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter document_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDocumentMetadataByKey(c, threatModelId, documentId, key)
}

// GetThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadata(c, threatModelId)
}

// CreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelMetadata(c, threatModelId)
}

// BulkCreateThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelMetadata(c, threatModelId)
}

// BulkUpsertThreatModelMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatModelMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatModelMetadata(c, threatModelId)
}

// DeleteThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelMetadataByKey(c, threatModelId, key)
}

// UpdateThreatModelMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelMetadataByKey(c, threatModelId, key)
}

// GetThreatModelNotes operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelNotes(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelNotesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelNotes(c, threatModelId, params)
}

// CreateThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelNote(c, threatModelId)
}

// DeleteThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelNote(c, threatModelId, noteId)
}

// GetThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelNote(c, threatModelId, noteId)
}

// UpdateThreatModelNote operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelNote(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelNote(c, threatModelId, noteId)
}

// GetNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNoteMetadata(c, threatModelId, noteId)
}

// CreateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateNoteMetadata(c, threatModelId, noteId)
}

// BulkCreateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateNoteMetadata(c, threatModelId, noteId)
}

// BulkUpdateNoteMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpdateNoteMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpdateNoteMetadata(c, threatModelId, noteId)
}

// DeleteNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteNoteMetadataByKey(c, threatModelId, noteId, key)
}

// GetNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetNoteMetadataByKey(c, threatModelId, noteId, key)
}

// UpdateNoteMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateNoteMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "note_id" -------------
	var noteId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "note_id", c.Param("note_id"), &noteId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter note_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateNoteMetadataByKey(c, threatModelId, noteId, key)
}

// GetThreatModelRepositories operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelRepositoriesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelRepositories(c, threatModelId, params)
}

// CreateThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelRepository(c, threatModelId)
}

// BulkCreateThreatModelRepositories operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelRepositories(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelRepositories(c, threatModelId)
}

// DeleteThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelRepository(c, threatModelId, repositoryId)
}

// GetThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelRepository(c, threatModelId, repositoryId)
}

// UpdateThreatModelRepository operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelRepository(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelRepository(c, threatModelId, repositoryId)
}

// GetRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositoryMetadata(c, threatModelId, repositoryId)
}

// CreateRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateRepositoryMetadata(c, threatModelId, repositoryId)
}

// BulkCreateRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateRepositoryMetadata(c, threatModelId, repositoryId)
}

// BulkUpsertRepositoryMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertRepositoryMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertRepositoryMetadata(c, threatModelId, repositoryId)
}

// DeleteRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// GetRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// UpdateRepositoryMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateRepositoryMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "repository_id" -------------
	var repositoryId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "repository_id", c.Param("repository_id"), &repositoryId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter repository_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateRepositoryMetadataByKey(c, threatModelId, repositoryId, key)
}

// GetThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetThreatModelThreatsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", c.Request.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter sort: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", c.Request.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter name: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "description" -------------

	err = runtime.BindQueryParameter("form", true, false, "description", c.Request.URL.Query(), &params.Description)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter description: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "threat_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "threat_type", c.Request.URL.Query(), &params.ThreatType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "severity" -------------

	err = runtime.BindQueryParameter("form", true, false, "severity", c.Request.URL.Query(), &params.Severity)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter severity: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "priority" -------------

	err = runtime.BindQueryParameter("form", true, false, "priority", c.Request.URL.Query(), &params.Priority)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter priority: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", c.Request.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter status: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "diagram_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "diagram_id", c.Request.URL.Query(), &params.DiagramId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter diagram_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "cell_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cell_id", c.Request.URL.Query(), &params.CellId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cell_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_gt" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_gt", c.Request.URL.Query(), &params.ScoreGt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_gt: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_lt" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_lt", c.Request.URL.Query(), &params.ScoreLt)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_lt: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_eq" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_eq", c.Request.URL.Query(), &params.ScoreEq)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_eq: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_ge" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_ge", c.Request.URL.Query(), &params.ScoreGe)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_ge: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "score_le" -------------

	err = runtime.BindQueryParameter("form", true, false, "score_le", c.Request.URL.Query(), &params.ScoreLe)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter score_le: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_after", c.Request.URL.Query(), &params.CreatedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "created_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "created_before", c.Request.URL.Query(), &params.CreatedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter created_before: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_after" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_after", c.Request.URL.Query(), &params.ModifiedAfter)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_after: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "modified_before" -------------

	err = runtime.BindQueryParameter("form", true, false, "modified_before", c.Request.URL.Query(), &params.ModifiedBefore)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter modified_before: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreats(c, threatModelId, params)
}

// CreateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatModelThreat(c, threatModelId)
}

// BatchDeleteThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BatchDeleteThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BatchDeleteThreatModelThreatsParams

	// ------------- Required query parameter "threat_ids" -------------

	if paramValue := c.Query("threat_ids"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument threat_ids is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", false, true, "threat_ids", c.Request.URL.Query(), &params.ThreatIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BatchDeleteThreatModelThreats(c, threatModelId, params)
}

// BatchPatchThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BatchPatchThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BatchPatchThreatModelThreats(c, threatModelId)
}

// BulkCreateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatModelThreats(c, threatModelId)
}

// BulkUpdateThreatModelThreats operation middleware
func (siw *ServerInterfaceWrapper) BulkUpdateThreatModelThreats(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpdateThreatModelThreats(c, threatModelId)
}

// DeleteThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) GetThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatModelThreat(c, threatModelId, threatId)
}

// PatchThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) PatchThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PatchThreatModelThreat(c, threatModelId, threatId)
}

// UpdateThreatModelThreat operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatModelThreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatModelThreat(c, threatModelId, threatId)
}

// GetThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadata(c, threatModelId, threatId)
}

// CreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) CreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateThreatMetadata(c, threatModelId, threatId)
}

// BulkCreateThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkCreateThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkCreateThreatMetadata(c, threatModelId, threatId)
}

// BulkUpsertThreatMetadata operation middleware
func (siw *ServerInterfaceWrapper) BulkUpsertThreatMetadata(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BulkUpsertThreatMetadata(c, threatModelId, threatId)
}

// DeleteThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteThreatMetadataByKey(c, threatModelId, threatId, key)
}

// GetThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) GetThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetThreatMetadataByKey(c, threatModelId, threatId, key)
}

// UpdateThreatMetadataByKey operation middleware
func (siw *ServerInterfaceWrapper) UpdateThreatMetadataByKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "threat_model_id" -------------
	var threatModelId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_model_id", c.Param("threat_model_id"), &threatModelId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_model_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "threat_id" -------------
	var threatId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "threat_id", c.Param("threat_id"), &threatId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter threat_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "key" -------------
	var key string

	err = runtime.BindStyledParameterWithOptions("simple", "key", c.Param("key"), &key, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter key: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateThreatMetadataByKey(c, threatModelId, threatId, key)
}

// DeleteUserAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserAccount(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUserAccountParams

	// ------------- Optional query parameter "challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "challenge", c.Request.URL.Query(), &params.Challenge)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter challenge: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserAccount(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/", wrapper.GetApiInfo)
	router.GET(options.BaseURL+"/.well-known/jwks.json", wrapper.GetJWKS)
	router.GET(options.BaseURL+"/.well-known/oauth-authorization-server", wrapper.GetOAuthAuthorizationServerMetadata)
	router.GET(options.BaseURL+"/.well-known/oauth-protected-resource", wrapper.GetOAuthProtectedResourceMetadata)
	router.GET(options.BaseURL+"/.well-known/openid-configuration", wrapper.GetOpenIDConfiguration)
	router.GET(options.BaseURL+"/collaboration/sessions", wrapper.GetCollaborationSessions)
	router.GET(options.BaseURL+"/me", wrapper.GetCurrentUserProfile)
	router.GET(options.BaseURL+"/oauth2/authorize", wrapper.AuthorizeOAuthProvider)
	router.GET(options.BaseURL+"/oauth2/callback", wrapper.HandleOAuthCallback)
	router.POST(options.BaseURL+"/oauth2/introspect", wrapper.IntrospectToken)
	router.GET(options.BaseURL+"/oauth2/providers", wrapper.GetAuthProviders)
	router.GET(options.BaseURL+"/oauth2/providers/:idp/groups", wrapper.GetProviderGroups)
	router.POST(options.BaseURL+"/oauth2/refresh", wrapper.RefreshToken)
	router.POST(options.BaseURL+"/oauth2/revoke", wrapper.LogoutUser)
	router.POST(options.BaseURL+"/oauth2/token", wrapper.ExchangeOAuthCode)
	router.GET(options.BaseURL+"/oauth2/userinfo", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/saml/acs", wrapper.ProcessSAMLResponse)
	router.GET(options.BaseURL+"/saml/login", wrapper.InitiateSAMLLogin)
	router.GET(options.BaseURL+"/saml/metadata", wrapper.GetSAMLMetadata)
	router.GET(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogout)
	router.POST(options.BaseURL+"/saml/slo", wrapper.ProcessSAMLLogoutPost)
	router.GET(options.BaseURL+"/threat_models", wrapper.ListThreatModels)
	router.POST(options.BaseURL+"/threat_models", wrapper.CreateThreatModel)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id", wrapper.DeleteThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id", wrapper.GetThreatModel)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id", wrapper.PatchThreatModel)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id", wrapper.UpdateThreatModel)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets", wrapper.GetThreatModelAssets)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets", wrapper.CreateThreatModelAsset)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/bulk", wrapper.BulkCreateThreatModelAssets)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.DeleteThreatModelAsset)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.GetThreatModelAsset)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id", wrapper.UpdateThreatModelAsset)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata", wrapper.GetThreatModelAssetMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata", wrapper.CreateThreatModelAssetMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/bulk", wrapper.BulkCreateThreatModelAssetMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/bulk", wrapper.BulkUpsertThreatModelAssetMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.DeleteThreatModelAssetMetadata)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.GetThreatModelAssetMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/assets/:asset_id/metadata/:key", wrapper.UpdateThreatModelAssetMetadata)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.GetThreatModelDiagrams)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams", wrapper.CreateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.DeleteThreatModelDiagram)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.GetThreatModelDiagram)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.PatchThreatModelDiagram)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id", wrapper.UpdateThreatModelDiagram)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.EndDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.GetDiagramCollaborationSession)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/collaborate", wrapper.CreateDiagramCollaborationSession)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.GetDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata", wrapper.CreateDiagramMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/bulk", wrapper.BulkCreateDiagramMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/bulk", wrapper.BulkUpsertDiagramMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.DeleteDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.GetDiagramMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/diagrams/:diagram_id/metadata/:key", wrapper.UpdateDiagramMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.GetThreatModelDocuments)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents", wrapper.CreateThreatModelDocument)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/bulk", wrapper.BulkCreateThreatModelDocuments)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.DeleteThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.GetThreatModelDocument)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id", wrapper.UpdateThreatModelDocument)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.GetDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata", wrapper.CreateDocumentMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/bulk", wrapper.BulkCreateDocumentMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/bulk", wrapper.BulkUpsertDocumentMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.DeleteDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.GetDocumentMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/documents/:document_id/metadata/:key", wrapper.UpdateDocumentMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.GetThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata", wrapper.CreateThreatModelMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/metadata/bulk", wrapper.BulkCreateThreatModelMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/metadata/bulk", wrapper.BulkUpsertThreatModelMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.DeleteThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.GetThreatModelMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/metadata/:key", wrapper.UpdateThreatModelMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes", wrapper.GetThreatModelNotes)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes", wrapper.CreateThreatModelNote)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.DeleteThreatModelNote)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.GetThreatModelNote)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id", wrapper.UpdateThreatModelNote)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata", wrapper.GetNoteMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata", wrapper.CreateNoteMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/bulk", wrapper.BulkCreateNoteMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/bulk", wrapper.BulkUpdateNoteMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.DeleteNoteMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.GetNoteMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/notes/:note_id/metadata/:key", wrapper.UpdateNoteMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories", wrapper.GetThreatModelRepositories)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories", wrapper.CreateThreatModelRepository)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/bulk", wrapper.BulkCreateThreatModelRepositories)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.DeleteThreatModelRepository)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.GetThreatModelRepository)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id", wrapper.UpdateThreatModelRepository)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata", wrapper.GetRepositoryMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata", wrapper.CreateRepositoryMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/bulk", wrapper.BulkCreateRepositoryMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/bulk", wrapper.BulkUpsertRepositoryMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.DeleteRepositoryMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.GetRepositoryMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/repositories/:repository_id/metadata/:key", wrapper.UpdateRepositoryMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.GetThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats", wrapper.CreateThreatModelThreat)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/batch", wrapper.BatchDeleteThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/batch/patch", wrapper.BatchPatchThreatModelThreats)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkCreateThreatModelThreats)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/bulk", wrapper.BulkUpdateThreatModelThreats)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.DeleteThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.GetThreatModelThreat)
	router.PATCH(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.PatchThreatModelThreat)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id", wrapper.UpdateThreatModelThreat)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.GetThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata", wrapper.CreateThreatMetadata)
	router.POST(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/bulk", wrapper.BulkCreateThreatMetadata)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/bulk", wrapper.BulkUpsertThreatMetadata)
	router.DELETE(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.DeleteThreatMetadataByKey)
	router.GET(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.GetThreatMetadataByKey)
	router.PUT(options.BaseURL+"/threat_models/:threat_model_id/threats/:threat_id/metadata/:key", wrapper.UpdateThreatMetadataByKey)
	router.DELETE(options.BaseURL+"/users/me", wrapper.DeleteUserAccount)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BD04+AIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
