version: "1.0"
name: User Operations Tests
config:
  http:
    baseURL: http://localhost:8080
  variables:
    # User Hints for Predictable Test Users
    test_user_hint: "user-ops"        # Creates user-ops@test.tmi
    test_user_1_hint: "session-user1"  # Creates session-user1@test.tmi  
    test_user_2_hint: "session-user2"  # Creates session-user2@test.tmi
tests:
  user_info_operations:
    name: User Information Operations - Success Cases
    steps:
      # Authenticate user using fallback method
      - id: authenticate_user
        name: Authenticate user via OAuth with user hint
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ test_user_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ test_user_hint }}"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token
          refresh_token:
            jsonpath: $.refresh_token

      - id: get_user_info_detailed
        name: Get detailed user information (validate predictable user)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            schema:
              type: object
              required: ["sub", "email", "name"]
              properties:
                sub:
                  type: string
                  description: "Unique user identifier"
                email:
                  type: string
                  format: email
                  description: "User email address"
                name:
                  type: string
                  description: "User display name"
                picture:
                  type: string
                  description: "User profile picture URL"
            jsonpath:
              # Validate predictable user identity
              $.email: "{{ test_user_hint }}@test.tmi"
              $.name: "{{ test_user_hint | title }} (Test User)"
        captures:
          user_id:
            jsonpath: $.sub
          user_email:
            jsonpath: $.email
          user_name:
            jsonpath: $.name

      - id: verify_user_consistency
        name: Verify user info consistency across multiple calls
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            jsonpath:
              # Should return same user info
              $.sub: "{{ user_id }}"
              $.email: "{{ user_email }}"
              $.name: "{{ user_name }}"

  user_logout_operations:
    name: User Logout Operations
    steps:
      # Authenticate user using fallback method
      - id: authenticate_for_logout
        name: Authenticate user for logout test with user hint
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ test_user_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ test_user_hint }}"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token

      - id: verify_authenticated
        name: Verify user is authenticated before logout
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200

      - id: logout_user_success
        name: Logout user successfully
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            # Logout request may require empty body or specific format
            logout: true
          check:
            status: 204  # No Content - successful logout

      - id: verify_token_invalidated
        name: Verify token is invalidated after logout
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 401  # Should be unauthorized after logout

  user_operations_failures:
    name: User Operations - Failure Cases
    steps:
      - id: user_info_no_auth
        name: Get user info without authentication
        http:
          url: /auth/me
          method: GET
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: user_info_invalid_token
        name: Get user info with invalid token
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer invalid_token_123"
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: logout_no_auth
        name: Attempt logout without authentication
        http:
          url: /auth/logout
          method: POST
          headers:
            Content-Type: application/json
          json:
            logout: true
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: logout_invalid_token
        name: Attempt logout with invalid token
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer invalid_token_123"
            Content-Type: application/json
          json:
            logout: true
          check:
            status: 401

      - id: logout_malformed_request
        name: Logout with malformed request body
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          body: '{"logout": true, invalid_json}'
          check:
            status: 400

  user_session_edge_cases:
    name: User Session Edge Cases
    steps:
      # Test multiple concurrent sessions using fallback method
      - id: create_session_1
        name: Create first user session (session-user1)
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ test_user_1_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ test_user_1_hint }}"
          check:
            status: 200
        captures:
          token_1:
            jsonpath: $.access_token

      - id: create_session_2
        name: Create second user session (session-user2)
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ test_user_2_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ test_user_2_hint }}"
          check:
            status: 200
        captures:
          token_2:
            jsonpath: $.access_token

      - id: verify_session_1
        name: Verify first session works (session-user1)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_1 }}"
          check:
            status: 200
            jsonpath:
              $.email: "{{ test_user_1_hint }}@test.tmi"
              $.name: "{{ test_user_1_hint | title }} (Test User)"
        captures:
          user_1_id:
            jsonpath: $.sub
          user_1_email:
            jsonpath: $.email

      - id: verify_session_2
        name: Verify second session works (session-user2)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_2 }}"
          check:
            status: 200
            jsonpath:
              $.email: "{{ test_user_2_hint }}@test.tmi"
              $.name: "{{ test_user_2_hint | title }} (Test User)"
        captures:
          user_2_id:
            jsonpath: $.sub
          user_2_email:
            jsonpath: $.email

      # Users should be different (using different user hints creates different users)
      - id: verify_different_users
        name: Verify sessions represent different users (predictable via user hints)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_1 }}"
          check:
            status: 200
            jsonpath:
              # Verify session-user1 identity is consistent  
              $.email: "{{ test_user_1_hint }}@test.tmi"
            # Ensure users are different by checking they don't have same ID
            not:
              jsonpath:
                $.sub: "{{ user_2_id }}"