version: "1.0"
name: User Operations Tests
config:
  http:
    baseURL: http://localhost:8080
  variables:
    # Pre-generated user credentials for user operations testing
    alice_email: "alice@test.tmi"      # Primary user for operations testing
    bob_email: "bob@test.tmi"          # First session user for multi-session tests
    chuck_email: "chuck@test.tmi"      # Second session user for multi-session tests
tests:
  user_info_operations:
    name: User Information Operations - Success Cases
    steps:
      # Load pre-generated user credentials
      - id: load_user_credentials
        name: Load Alice's credentials for user operations testing
        http:
          url: http://httpbin.org/get
          method: GET
          check:
            status: 200
        captures:
          access_token:
            value: "{{ env.ALICE_TOKEN }}"
          user_id:
            value: "{{ alice_email }}"
          user_email:
            value: "{{ alice_email }}"

      - id: get_user_info_detailed
        name: Get detailed user information (validate predictable user)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            schema:
              type: object
              required: ["sub", "email", "name"]
              properties:
                sub:
                  type: string
                  description: "Unique user identifier"
                email:
                  type: string
                  format: email
                  description: "User email address"
                name:
                  type: string
                  description: "User display name"
                picture:
                  type: string
                  description: "User profile picture URL"
            jsonpath:
              # Validate Alice's identity
              $.email: "alice@test.tmi"
              $.name: "Alice (Test User)"
        captures:
          user_id:
            jsonpath: $.sub
          user_email:
            jsonpath: $.email
          user_name:
            jsonpath: $.name

      - id: verify_user_consistency
        name: Verify user info consistency across multiple calls
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            jsonpath:
              # Should return same user info
              $.sub: "{{ user_id }}"
              $.email: "{{ user_email }}"
              $.name: "{{ user_name }}"

  user_logout_operations:
    name: User Logout Operations
    steps:
      # Load pre-generated user credentials for logout test
      - id: load_credentials_for_logout
        name: Load Alice's credentials for logout testing
        http:
          url: http://httpbin.org/get
          method: GET
          check:
            status: 200
        captures:
          access_token:
            value: "{{ env.ALICE_TOKEN }}"
          user_id:
            value: "{{ alice_email }}"
          user_email:
            value: "{{ alice_email }}"

      - id: verify_authenticated
        name: Verify user is authenticated before logout
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200

      - id: logout_user_success
        name: Logout user successfully
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            # Logout request may require empty body or specific format
            logout: true
          check:
            status: 204  # No Content - successful logout

      - id: verify_token_invalidated
        name: Verify token is invalidated after logout
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 401  # Should be unauthorized after logout

  user_operations_failures:
    name: User Operations - Failure Cases
    steps:
      # Load credentials for tests that need a valid token to test other failure modes
      - id: load_credentials_for_failures
        name: Load Alice's credentials for failure testing
        http:
          url: http://httpbin.org/get
          method: GET
          check:
            status: 200
        captures:
          access_token:
            value: "{{ env.ALICE_TOKEN }}"
      - id: user_info_no_auth
        name: Get user info without authentication
        http:
          url: /auth/me
          method: GET
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: user_info_invalid_token
        name: Get user info with invalid token
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer invalid_token_123"
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: logout_no_auth
        name: Attempt logout without authentication
        http:
          url: /auth/logout
          method: POST
          headers:
            Content-Type: application/json
          json:
            logout: true
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: logout_invalid_token
        name: Attempt logout with invalid token
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer invalid_token_123"
            Content-Type: application/json
          json:
            logout: true
          check:
            status: 401

      - id: logout_malformed_request
        name: Logout with malformed request body
        http:
          url: /auth/logout
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          body: '{"logout": true, invalid_json}'
          check:
            status: 400

  user_session_edge_cases:
    name: User Session Edge Cases
    steps:
      # Test multiple concurrent sessions using pre-generated credentials
      - id: load_session_1_credentials
        name: Load Bob's credentials for first session
        http:
          url: http://httpbin.org/get
          method: GET
          check:
            status: 200
        captures:
          token_1:
            value: "{{ env.BOB_TOKEN }}"
          user_1_id:
            value: "{{ bob_email }}"
          user_1_email:
            value: "{{ bob_email }}"

      - id: load_session_2_credentials
        name: Load Chuck's credentials for second session
        http:
          url: http://httpbin.org/get
          method: GET
          check:
            status: 200
        captures:
          token_2:
            value: "{{ env.CHUCK_TOKEN }}"
          user_2_id:
            value: "{{ chuck_email }}"
          user_2_email:
            value: "{{ chuck_email }}"

      - id: verify_session_1
        name: Verify first session works (Bob)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_1 }}"
          check:
            status: 200
            jsonpath:
              $.email: "bob@test.tmi"
              $.name: "Bob (Test User)"

      - id: verify_session_2
        name: Verify second session works (Chuck)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_2 }}"
          check:
            status: 200
            jsonpath:
              $.email: "chuck@test.tmi"
              $.name: "Chuck (Test User)"

      # Verify that Bob and Chuck are different users
      - id: verify_different_users
        name: Verify sessions represent different users (Bob vs Chuck)
        http:
          url: /auth/me
          method: GET
          headers:
            Authorization: "Bearer {{ token_1 }}"
          check:
            status: 200
            jsonpath:
              # Verify Bob's identity is consistent  
              $.email: "bob@test.tmi"
            # Ensure users are different by checking they don't have Chuck's ID
            not:
              jsonpath:
                $.sub: "{{ user_2_id }}"