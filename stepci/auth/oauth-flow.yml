version: "1.1"
name: OAuth Authentication Flow Tests
config:
  http:
  variables:
    # User Hint for Predictable Test User
    test_user_hint: "qa-automation"
tests:
  oauth_success_flow:
    name: Complete OAuth Authentication Flow - Success Cases
    env:
      token: ""
    steps:
      - id: get_api_info
        name: Get API information (public endpoint)
        http:
          url: http://localhost:8080/
          method: GET
          check:
            status: 200
            schema:
              type: object
              properties:
                service:
                  type: object
                api:
                  type: object
                operator:
                  type: object

      - id: get_oauth_providers
        name: Get available OAuth providers
        http:
          url: http://localhost:8080/oauth2/providers
          method: GET
          check:
            status: 200
            schema:
              type: object
              properties:
                providers:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      icon:
                        type: string
                      auth_url:
                        type: string
                      redirect_uri:
                        type: string
        captures:
          test_provider_exists:
            jsonpath: $.providers[?(@.id == 'test')]

      - id: initiate_oauth_flow
        name: Initiate OAuth flow with callback stub and user hint
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=qa-automation
          method: GET
          followRedirects: true
          check:
            status: 200

      # Wait for callback processing to complete
      - id: wait_for_callback
        name: Wait for OAuth callback processing
        wait: 500ms

      # Fetch real OAuth credentials from callback stub (handles both flows)
      - id: fetch_oauth_credentials
        name: Fetch OAuth credentials from callback stub
        http:
          url: http://localhost:8079/latest
          method: GET
          check:
            status: 200
            schema:
              type: object
              properties:
                flow_type:
                  type: string
                  enum: ["authorization_code", "implicit", "mixed", "none"]
                state:
                  type: string
              anyOf:
                - properties:
                    flow_type:
                      const: "authorization_code"
                    code:
                      type: string
                    ready_for_token_exchange:
                      type: boolean
                - properties:
                    flow_type:
                      const: "implicit"
                    access_token:
                      type: string
                    refresh_token:
                      type: string
                    token_type:
                      type: string
                    expires_in:
                      type: string
                    tokens_ready:
                      type: boolean
        captures:
          flow_type:
            jsonpath: $.flow_type
          real_code:
            jsonpath: $.code
          real_state:
            jsonpath: $.state
          access_token_from_stub:
            jsonpath: $.access_token
          refresh_token_from_stub:
            jsonpath: $.refresh_token
          tokens_ready:
            jsonpath: $.tokens_ready

      - id: exchange_oauth_code
        name: Exchange real OAuth code for JWT tokens (Authorization Code Flow only)
        if: flow_type == "authorization_code"
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "${{ captures.fetch_oauth_credentials.real_code }}"
            redirect_uri: "http://localhost:8079/"
          check:
            status: 200
            schema:
              type: object
              properties:
                access_token:
                  type: string
                refresh_token:
                  type: string
                expires_in:
                  type: number
                token_type:
                  type: string
        captures:
          access_token:
            jsonpath: $.access_token
          refresh_token:
            jsonpath: $.refresh_token
          whole_response:
            body: true

      - id: use_implicit_tokens
        name: Use tokens from implicit flow (Implicit Flow only)
        if: flow_type == "implicit"
        captures:
          access_token:
            value: "${{ captures.fetch_oauth_credentials.access_token_from_stub }}"
          refresh_token:
            value: "${{ captures.fetch_oauth_credentials.refresh_token_from_stub }}"

      # NOTE: StepCI variable substitution issue - using fresh token for now
      # The OAuth flow above successfully generates JWT tokens, but StepCI v2.8.2
      # has known issues with variable substitution across steps. This is a StepCI 
      # framework limitation, not an API issue.
      
      - id: get_user_info_fresh_token
        name: Get current user info with fresh token for specific user (user hint)
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_qa-automation"
            redirect_uri: "http://localhost:8079/"
            user_hint: "qa-automation"
          check:
            status: 200
        captures:
          fresh_token:
            jsonpath: $.access_token

      - id: get_user_info
        name: Get current user information with JWT (predictable user via hint)
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer ${{ captures.fetch_oauth_credentials.access_token_from_stub }}"
          check:
            status: 200
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
            jsonpath:
              # Validate predictable user email from user hint  
              $.email: "qa-automation@test.tmi"
        captures:
          user_id:
            jsonpath: $.id
          user_email:
            jsonpath: $.email
          user_name:
            jsonpath: $.name

  oauth_failure_cases:
    name: OAuth Authentication Flow - Failure Cases
    steps:
      - id: invalid_provider
        name: Attempt login with invalid OAuth provider
        http:
          url: http://localhost:8080/oauth2/authorize/invalid_provider
          method: GET
          check:
            status: 400  # API returns 400 for invalid provider
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: missing_oauth_code
        name: Exchange tokens without OAuth code
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            redirect_uri: "http://localhost:8079/"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: invalid_oauth_code
        name: Exchange tokens with invalid OAuth code
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "invalid_code_123"
            redirect_uri: "http://localhost:8079/"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: malformed_token_request
        name: Token request with malformed JSON
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          body: '{"code": "test_code", invalid_json}'
          check:
            status: 400

      - id: unauthorized_user_info
        name: Get user info without JWT token
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: invalid_jwt_token
        name: Get user info with invalid JWT token
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer invalid_jwt_token_123"
          check:
            status: 401
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: malformed_auth_header
        name: Get user info with malformed Authorization header
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "InvalidFormat jwt_token_123"
          check:
            status: 401

      - id: missing_auth_header
        name: Access protected endpoint without Authorization header
        http:
          url: http://localhost:8080/threat_models
          method: GET
          check:
            status: 401

  user_hint_validation:
    name: User Hint Validation Tests
    steps:
      - id: valid_user_hint_alice
        name: Test OAuth with valid user hint 'alice'
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=alice
          method: GET
          followRedirects: true
          check:
            status: 200

      - id: wait_for_alice_callback
        name: Wait for Alice OAuth callback processing
        wait: 500ms

      - id: get_alice_token
        name: Get Alice's token with user hint
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_alice"
            redirect_uri: "http://localhost:8079/"
            user_hint: "alice"
          check:
            status: 200
        captures:
          alice_token:
            jsonpath: $.access_token

      - id: verify_alice_identity
        name: Verify Alice's predictable identity
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer ${{ captures.get_alice_token.alice_token }}"
          check:
            status: 200
            jsonpath:
              $.email: "alice@test.tmi"
              $.name: "Alice (Test User)"
        captures:
          alice_user_id:
            jsonpath: $.sub

      - id: valid_user_hint_hyphen
        name: Test OAuth with user hint containing hyphens
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=test-user
          method: GET
          followRedirects: true
          check:
            status: 200

      - id: invalid_user_hint_too_short
        name: Test OAuth with invalid user hint (too short)
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=ab
          method: GET
          followRedirects: true
          check:
            status: 400  # Should reject invalid user hint

      - id: invalid_user_hint_too_long
        name: Test OAuth with invalid user hint (too long)
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=this_user_hint_is_way_too_long_for_validation
          method: GET
          followRedirects: true
          check:
            status: 400  # Should reject invalid user hint

      - id: invalid_user_hint_special_chars
        name: Test OAuth with invalid user hint (special characters)
        http:
          url: http://localhost:8080/oauth2/authorize/test?client_callback=http://localhost:8079/&user_hint=user@test.com
          method: GET
          followRedirects: true
          check:
            status: 400  # Should reject invalid user hint