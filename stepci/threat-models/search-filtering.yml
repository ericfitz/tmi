version: "1.1"
name: Threat Models Search and Filtering Tests
config:
  http:
tests:
  threat_model_search_and_pagination:
    name: Threat Model Search, Filtering and Pagination
    steps:
      # Load pre-generated user credentials
      - id: load_user_credentials
        name: Load Alice's credentials for search tests
        captures:
          access_token:
            value: "${{ env.ALICE_TOKEN }}"
          user_id:
            value: "alice@test.tmi"
          user_email:
            value: "alice@test.tmi"

      # Create multiple threat models for testing
      - id: create_tm_ecommerce
        name: Create e-commerce threat model
        http:
          url: http://localhost:8080/threat_models
          method: POST
          headers:
            Authorization: "Bearer ${{ access_token }}"
            Content-Type: application/json
          json:
            name: "E-commerce Platform Security"
            description: "Comprehensive threat model for online retail platform with payment processing"
            project_url: "https://github.com/example/ecommerce-platform"
            issue_url: "https://github.com/example/ecommerce-platform/issues/security"
          check:
            status: 201
        captures:
          ecommerce_tm_id:
            jsonpath: $.id

      - id: create_tm_banking
        name: Create banking threat model
        http:
          url: http://localhost:8080/threat_models
          method: POST
          headers:
            Authorization: "Bearer ${{ access_token }}"
            Content-Type: application/json
          json:
            name: "Banking API Security Assessment"
            description: "Security analysis for mobile banking application API endpoints"
            project_url: "https://github.com/example/banking-api"
            issue_url: "https://github.com/example/banking-api/issues/security-review"
          check:
            status: 201
        captures:
          banking_tm_id:
            jsonpath: $.id

      - id: create_tm_healthcare
        name: Create healthcare threat model
        http:
          url: http://localhost:8080/threat_models
          method: POST
          headers:
            Authorization: "Bearer ${{ access_token }}"
            Content-Type: application/json
          json:
            name: "Healthcare Data Platform"
            description: "HIPAA compliance threat modeling for patient data management system"
            project_url: "https://github.com/example/healthcare-platform"
            issue_url: "https://github.com/example/healthcare-platform/issues/compliance"
          check:
            status: 201
        captures:
          healthcare_tm_id:
            jsonpath: $.id

      # Test basic listing (no filters)
      - id: list_all_threat_models
        name: List all threat models without filters
        http:
          url: http://localhost:8080/threat_models
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 3  # Should have at least our 3 created models
            # Verify all our models are present
            jsonpath:
              $[?(@.id == "{{ ecommerce_tm_id }}")]: 
                - id: "{{ ecommerce_tm_id }}"
              $[?(@.id == "{{ banking_tm_id }}")]:
                - id: "{{ banking_tm_id }}"
              $[?(@.id == "{{ healthcare_tm_id }}")]:
                - id: "{{ healthcare_tm_id }}"

      # Test filtering by name (partial match)
      - id: filter_by_name_ecommerce
        name: Filter threat models by name containing 'e-commerce'
        http:
          url: http://localhost:8080/threat_models?name=e-commerce
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 1
            # Should contain only e-commerce model
            jsonpath:
              $[0].id: "{{ ecommerce_tm_id }}"
              $[0].name: "E-commerce Platform Security"

      - id: filter_by_name_api
        name: Filter threat models by name containing 'API'
        http:
          url: http://localhost:8080/threat_models?name=API
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 1
            # Should contain banking model
            jsonpath:
              $[?(@.id == "{{ banking_tm_id }}")]

      # Test filtering by description
      - id: filter_by_description_hipaa
        name: Filter threat models by description containing 'HIPAA'
        http:
          url: http://localhost:8080/threat_models?description=HIPAA
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 1
            # Should contain healthcare model
            jsonpath:
              $[0].id: "{{ healthcare_tm_id }}"

      - id: filter_by_description_payment
        name: Filter threat models by description containing 'payment'
        http:
          url: http://localhost:8080/threat_models?description=payment
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
            # Should contain e-commerce model (has payment processing)
            jsonpath:
              $[?(@.id == "{{ ecommerce_tm_id }}")]

      # Test case-insensitive filtering
      - id: filter_case_insensitive
        name: Test case-insensitive filtering
        http:
          url: http://localhost:8080/threat_models?name=BANKING
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 1
            # Should find banking model despite case difference
            jsonpath:
              $[?(@.id == "{{ banking_tm_id }}")]

      # Test pagination
      - id: pagination_limit_2
        name: Test pagination with limit of 2
        http:
          url: http://localhost:8080/threat_models?limit=2
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              maxItems: 2
              minItems: 2

      - id: pagination_offset_1
        name: Test pagination with offset of 1
        http:
          url: http://localhost:8080/threat_models?limit=2&offset=1
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              maxItems: 2

      # Test combined filters
      - id: combined_filters
        name: Test combined name and description filters
        http:
          url: http://localhost:8080/threat_models?name=Platform&description=security
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
            # Should match models that have both criteria

      # Test empty results
      - id: filter_no_results
        name: Filter that should return no results
        http:
          url: http://localhost:8080/threat_models?name=NonExistentThreatModel
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              maxItems: 0

      # Test sorting (if supported)
      - id: sort_by_name_asc
        name: Sort threat models by name ascending
        http:
          url: http://localhost:8080/threat_models?sort=name&order=asc
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              minItems: 3

      - id: sort_by_created_at_desc
        name: Sort threat models by creation date descending
        http:
          url: http://localhost:8080/threat_models?sort=created_at&order=desc
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200
            schema:
              type: array

      # Cleanup created threat models
      - id: cleanup_ecommerce_tm
        name: Cleanup e-commerce threat model
        http:
          url: http://localhost:8080/threat_models/{{ ecommerce_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 204

      - id: cleanup_banking_tm
        name: Cleanup banking threat model
        http:
          url: http://localhost:8080/threat_models/{{ banking_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 204

      - id: cleanup_healthcare_tm
        name: Cleanup healthcare threat model
        http:
          url: http://localhost:8080/threat_models/{{ healthcare_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 204

  threat_model_search_failures:
    name: Threat Model Search Failure Cases
    steps:
      # Authenticate user
      - id: authenticate_for_search_failures
        name: Authenticate for search failure tests
        http:
          url: http://localhost:8080/oauth2/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_code_search_fail"
            redirect_uri: "http://localhost:8080/oauth2/callback"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token

      # Test invalid pagination parameters
      - id: invalid_limit_negative
        name: Test invalid negative limit parameter
        http:
          url: http://localhost:8080/threat_models?limit=-1
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: invalid_limit_oversized
        name: Test oversized limit parameter
        http:
          url: http://localhost:8080/threat_models?limit=10000
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      - id: invalid_offset_negative
        name: Test invalid negative offset parameter
        http:
          url: http://localhost:8080/threat_models?offset=-1
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      - id: invalid_limit_string
        name: Test invalid string limit parameter
        http:
          url: http://localhost:8080/threat_models?limit=not_a_number
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      - id: invalid_offset_string
        name: Test invalid string offset parameter
        http:
          url: http://localhost:8080/threat_models?offset=not_a_number
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      # Test invalid sort parameters
      - id: invalid_sort_field
        name: Test invalid sort field
        http:
          url: http://localhost:8080/threat_models?sort=invalid_field
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      - id: invalid_sort_order
        name: Test invalid sort order
        http:
          url: http://localhost:8080/threat_models?sort=name&order=invalid_order
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      # Test extremely long filter values
      - id: oversized_name_filter
        name: Test oversized name filter
        http:
          url: http://localhost:8080/"threat_models?name={{ 'very_long_search_term_' | repeat(100) }}"
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      - id: oversized_description_filter
        name: Test oversized description filter
        http:
          url: http://localhost:8080/"threat_models?description={{ 'very_long_description_search_' | repeat(100) }}"
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 400

      # Test special characters in filters
      - id: special_chars_in_filter
        name: Test special characters in search filters
        http:
          url: http://localhost:8080/"threat_models?name=%3Cscript%3Ealert('xss')%3C/script%3E"
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200  # Should handle safely, return empty results
            schema:
              type: array
              maxItems: 0

      - id: sql_injection_attempt
        name: Test SQL injection patterns in filters
        http:
          url: http://localhost:8080/"threat_models?name=' OR '1'='1"
          method: GET
          headers:
            Authorization: "Bearer ${{ access_token }}"
          check:
            status: 200  # Should handle safely, not return all records
            schema:
              type: array