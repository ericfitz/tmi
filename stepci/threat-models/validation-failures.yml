version: "1.1"
name: Threat Models Validation and Failure Tests
config:
  http:
    baseURL: http://localhost:8080
tests:
  threat_model_validation_failures:
    name: Threat Model Input Validation Failures
    steps:
      # Load pre-generated user credentials
      - id: load_user_credentials
        name: Load Alice's credentials for validation tests
        captures:
          access_token:
            value: "${{ env.ALICE_TOKEN }}"
          user_id:
            value: "alice@test.tmi"
          user_email:
            value: "alice@test.tmi"

      # Test missing required fields
      - id: create_tm_missing_name
        name: Create threat model without required name field
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            description: "Threat model without name field"
            project_url: "https://github.com/example/test"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: create_tm_missing_description
        name: Create threat model without required description field
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            project_url: "https://github.com/example/test"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      # Test empty required fields
      - id: create_tm_empty_name
        name: Create threat model with empty name
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: ""
            description: "Valid description"
          check:
            status: 400
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: create_tm_empty_description
        name: Create threat model with empty description
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: ""
          check:
            status: 400

      # Test null values in required fields
      - id: create_tm_null_name
        name: Create threat model with null name
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: null
            description: "Valid description"
          check:
            status: 400

      - id: create_tm_null_description
        name: Create threat model with null description
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: null
          check:
            status: 400

      # Test invalid field types
      - id: create_tm_invalid_name_type
        name: Create threat model with number as name
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: 12345
            description: "Valid description"
          check:
            status: 400

      - id: create_tm_invalid_description_type
        name: Create threat model with array as description
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: ["not", "a", "string"]
          check:
            status: 400

      - id: create_tm_invalid_url_type
        name: Create threat model with number as URL
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            project_url: 999
          check:
            status: 400

      # Test invalid URL formats
      - id: create_tm_malformed_project_url
        name: Create threat model with malformed project URL
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            project_url: "not://a-valid-url"
          check:
            status: 400

      - id: create_tm_malformed_issue_url
        name: Create threat model with malformed issue URL
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            issue_url: "invalid-url-format"
          check:
            status: 400

      # Test unknown/extra fields
      - id: create_tm_unknown_fields
        name: Create threat model with unknown fields
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            unknown_field: "should_not_be_here"
            another_invalid_field: 123
            extra_object: { "nested": "data" }
          check:
            status: 400

      # Test read-only fields in creation
      - id: create_tm_with_readonly_id
        name: Create threat model with read-only ID field
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            id: "12345678-1234-4567-8901-123456789012"
          check:
            status: 400

      - id: create_tm_with_readonly_timestamps
        name: Create threat model with read-only timestamp fields
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
            created_at: "2024-01-01T00:00:00Z"
            modified_at: "2024-01-01T00:00:00Z"
          check:
            status: 400

      # Test extremely long field values
      - id: create_tm_oversized_name
        name: Create threat model with oversized name field
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "{{ 'Very long name that exceeds reasonable length limits ' | repeat(50) }}"
            description: "Valid description"
          check:
            status: 400

      - id: create_tm_oversized_description
        name: Create threat model with oversized description field
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "{{ 'Very long description that exceeds reasonable length limits and should be rejected by the API validation layer. ' | repeat(100) }}"
          check:
            status: 400

  threat_model_operation_failures:
    name: Threat Model Operation Failures
    steps:
      # Get authentication token
      - id: authenticate_for_operations
        name: Authenticate for operation failure tests
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_code_ops"
            redirect_uri: "http://localhost:8080/auth/callback"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token

      # Test operations on non-existent threat model
      - id: get_nonexistent_threat_model
        name: Get non-existent threat model
        http:
          url: /threat_models/12345678-1234-4567-8901-123456789012
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 404
            schema:
              type: object
              properties:
                error:
                  type: string

      - id: update_nonexistent_threat_model
        name: Update non-existent threat model
        http:
          url: /threat_models/12345678-1234-4567-8901-123456789012
          method: PUT
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Updated Name"
            description: "Updated description"
          check:
            status: 404

      - id: patch_nonexistent_threat_model
        name: Patch non-existent threat model
        http:
          url: /threat_models/12345678-1234-4567-8901-123456789012
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/name"
              value: "Patched Name"
          check:
            status: 404

      - id: delete_nonexistent_threat_model
        name: Delete non-existent threat model
        http:
          url: /threat_models/12345678-1234-4567-8901-123456789012
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 404

      # Test invalid UUID formats in paths
      - id: get_threat_model_invalid_uuid
        name: Get threat model with invalid UUID format
        http:
          url: /threat_models/not-a-valid-uuid-format
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 400

      - id: update_threat_model_invalid_uuid
        name: Update threat model with invalid UUID format
        http:
          url: /threat_models/invalid-uuid-123
          method: PUT
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Valid Name"
            description: "Valid description"
          check:
            status: 400

  json_patch_validation_failures:
    name: JSON Patch Validation Failures
    steps:
      # Authenticate and create test threat model
      - id: authenticate_for_patch_tests
        name: Authenticate for JSON Patch tests
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_code_patch"
            redirect_uri: "http://localhost:8080/auth/callback"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token

      - id: create_tm_for_patch_tests
        name: Create threat model for patch testing
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Patch Test TM"
            description: "Created for JSON Patch validation testing"
          check:
            status: 201
        captures:
          patch_test_tm_id:
            jsonpath: $.id

      # Test invalid JSON Patch operations
      - id: patch_invalid_operation
        name: JSON Patch with invalid operation
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "invalid_operation"
              path: "/name"
              value: "Should fail"
          check:
            status: 422  # Unprocessable Entity for JSON Patch errors

      - id: patch_nonexistent_field
        name: JSON Patch targeting non-existent field
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/nonexistent_field"
              value: "Should fail"
          check:
            status: 422

      - id: patch_readonly_field
        name: JSON Patch targeting read-only field
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/id"
              value: "12345678-1234-4567-8901-123456789012"
          check:
            status: 422

      - id: patch_invalid_value_type
        name: JSON Patch with invalid value type
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/name"
              value: 12345  # Number instead of string
          check:
            status: 422

      - id: patch_malformed_json
        name: JSON Patch with malformed JSON
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          body: '[{"op": "replace", "path": "/name", "value": "Valid"}, invalid_json]'
          check:
            status: 400

      # Cleanup
      - id: cleanup_patch_test_tm
        name: Cleanup patch test threat model
        http:
          url: /threat_models/{{ patch_test_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 204