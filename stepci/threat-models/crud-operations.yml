version: "1.0"
name: Threat Models CRUD Operations Tests
config:
  http:
    baseURL: http://localhost:8080
  variables:
    # User Hints for CRUD Testing
    crud_user_hint: "tm-crud-user"      # Creates tm-crud-user@test.tmi
    edge_case_user_hint: "tm-edge-user" # Creates tm-edge-user@test.tmi
tests:
  threat_model_crud_success:
    name: Threat Model CRUD Operations - Success Cases
    steps:
      # Authenticate user using fallback method
      - id: authenticate_user
        name: Authenticate user via OAuth with user hint
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ crud_user_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ crud_user_hint }}"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token
          user_id:
            jsonpath: $.user_id

      # CREATE - Test threat model creation
      - id: create_threat_model
        name: Create new threat model
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Sample E-commerce Application"
            description: "Threat model for a sample e-commerce web application with user authentication, payment processing, and inventory management"
            project_url: "https://github.com/example/ecommerce-app"
            issue_url: "https://github.com/example/ecommerce-app/issues/security"
          check:
            status: 201
            schema:
              type: object
              required: ["id", "name", "description", "created_at", "modified_at"]
              properties:
                id:
                  type: string
                  pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
                name:
                  type: string
                description:
                  type: string
                project_url:
                  type: string
                  format: uri
                issue_url:
                  type: string
                  format: uri
                created_at:
                  type: string
                  pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$"
                modified_at:
                  type: string
                  pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$"
        captures:
          threat_model_id:
            jsonpath: $.id
          created_at:
            jsonpath: $.created_at

      # READ - Test getting all threat models
      - id: list_threat_models
        name: List all threat models
        http:
          url: /threat_models
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
            # Should contain our created threat model
            jsonpath:
              $[?(@.id == "{{ threat_model_id }}")]

      # READ - Test getting specific threat model
      - id: get_threat_model
        name: Get specific threat model by ID
        http:
          url: /threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            jsonpath:
              $.id: "{{ threat_model_id }}"
              $.name: "Sample E-commerce Application"
              $.description: "Threat model for a sample e-commerce web application with user authentication, payment processing, and inventory management"
              $.project_url: "https://github.com/example/ecommerce-app"
              $.issue_url: "https://github.com/example/ecommerce-app/issues/security"
              $.created_at: "{{ created_at }}"

      # UPDATE - Test full update (PUT)
      - id: update_threat_model_full
        name: Full update of threat model (PUT)
        http:
          url: /threat_models/{{ threat_model_id }}
          method: PUT
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Updated E-commerce Application"
            description: "Updated threat model with enhanced security considerations for payment processing and data protection"
            project_url: "https://github.com/example/ecommerce-app-v2"
            issue_url: "https://github.com/example/ecommerce-app-v2/issues/security"
          check:
            status: 200
            jsonpath:
              $.id: "{{ threat_model_id }}"
              $.name: "Updated E-commerce Application"
              $.description: "Updated threat model with enhanced security considerations for payment processing and data protection"
              $.project_url: "https://github.com/example/ecommerce-app-v2"
              $.issue_url: "https://github.com/example/ecommerce-app-v2/issues/security"
              $.created_at: "{{ created_at }}"
        captures:
          updated_modified_at:
            jsonpath: $.modified_at

      # UPDATE - Test partial update (PATCH) with JSON Patch
      - id: update_threat_model_patch
        name: Partial update of threat model (PATCH with JSON Patch)
        http:
          url: /threat_models/{{ threat_model_id }}
          method: PATCH
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/name"
              value: "JSON Patch Updated E-commerce Application"
            - op: "replace"
              path: "/description"
              value: "Description updated via JSON Patch operation"
          check:
            status: 200
            jsonpath:
              $.id: "{{ threat_model_id }}"
              $.name: "JSON Patch Updated E-commerce Application"
              $.description: "Description updated via JSON Patch operation"
              # URLs should remain from PUT update
              $.project_url: "https://github.com/example/ecommerce-app-v2"
              $.issue_url: "https://github.com/example/ecommerce-app-v2/issues/security"

      # Verify the update
      - id: verify_patch_update
        name: Verify JSON Patch update was applied
        http:
          url: /threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 200
            jsonpath:
              $.name: "JSON Patch Updated E-commerce Application"
              $.description: "Description updated via JSON Patch operation"

      # DELETE - Test deletion
      - id: delete_threat_model
        name: Delete threat model
        http:
          url: /threat_models/{{ threat_model_id }}
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 204  # No Content

      # Verify deletion
      - id: verify_deletion
        name: Verify threat model was deleted
        http:
          url: /threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 404
            schema:
              type: object
              properties:
                error:
                  type: string

  threat_model_edge_cases:
    name: Threat Model Edge Cases and Boundary Testing
    steps:
      # Authenticate user
      - id: authenticate_for_edge_cases
        name: Authenticate edge case user for testing
        http:
          url: /auth/token/test
          method: POST
          headers:
            Content-Type: application/json
          json:
            code: "test_auth_code_{{ edge_case_user_hint }}"
            redirect_uri: "http://localhost:8079/"
            user_hint: "{{ edge_case_user_hint }}"
          check:
            status: 200
        captures:
          access_token:
            jsonpath: $.access_token

      # Test minimal valid threat model
      - id: create_minimal_threat_model
        name: Create threat model with minimal required fields
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "Minimal TM"
            description: "Minimal description"
          check:
            status: 201
            jsonpath:
              $.name: "Minimal TM"
              $.description: "Minimal description"
        captures:
          minimal_tm_id:
            jsonpath: $.id

      # Test with maximum length fields (assuming reasonable limits)
      - id: create_max_length_threat_model
        name: Create threat model with maximum length fields
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "{{ 'Maximum Length Name Test ' | repeat(10) | truncate(200) }}"
            description: "{{ 'This is a very long description that tests the maximum allowed length for threat model descriptions. ' | repeat(20) | truncate(1000) }}"
            project_url: "https://github.com/very-long-organization-name/very-long-project-name-for-testing-maximum-url-lengths"
            issue_url: "https://github.com/very-long-organization-name/very-long-project-name-for-testing-maximum-url-lengths/issues/security-review-comprehensive"
          check:
            status: 201
        captures:
          max_length_tm_id:
            jsonpath: $.id

      # Test Unicode characters
      - id: create_unicode_threat_model
        name: Create threat model with Unicode characters
        http:
          url: /threat_models
          method: POST
          headers:
            Authorization: "Bearer {{ access_token }}"
            Content-Type: application/json
          json:
            name: "测试应用程序 🔒 Security Model"
            description: "Threat model with émojis 🚀, açcénts, and 中文字符 for internationalization testing"
            project_url: "https://github.com/test/unicode-app"
          check:
            status: 201
            jsonpath:
              $.name: "测试应用程序 🔒 Security Model"
        captures:
          unicode_tm_id:
            jsonpath: $.id

      # Cleanup edge case threat models
      - id: cleanup_minimal_tm
        name: Cleanup minimal threat model
        http:
          url: /threat_models/{{ minimal_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 204

      - id: cleanup_max_length_tm
        name: Cleanup max length threat model
        http:
          url: /threat_models/{{ max_length_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 204

      - id: cleanup_unicode_tm
        name: Cleanup Unicode threat model
        http:
          url: /threat_models/{{ unicode_tm_id }}
          method: DELETE
          headers:
            Authorization: "Bearer {{ access_token }}"
          check:
            status: 204