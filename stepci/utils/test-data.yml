version: "1.0"
name: Test Data Fixtures
config:
  variables:
    # Sample Threat Model Data
    sample_threat_model:
      name: "Sample E-commerce Application"
      description: "Threat model for a sample e-commerce web application"
      project_url: "https://github.com/example/ecommerce-app"
      issue_url: "https://github.com/example/ecommerce-app/issues/security"
    
    sample_threat_model_update:
      name: "Updated E-commerce Application"
      description: "Updated threat model with enhanced security considerations"
      project_url: "https://github.com/example/ecommerce-app-v2"
      issue_url: "https://github.com/example/ecommerce-app-v2/issues/security"
    
    # Sample Threat Data
    sample_threat:
      title: "SQL Injection in User Authentication"
      description: "Potential SQL injection vulnerability in user login endpoint"
      category: "injection"
      severity: "high"
      status: "identified"
      mitigation: "Use parameterized queries and input validation"
    
    sample_threat_update:
      title: "SQL Injection in User Authentication (Updated)"
      description: "Updated threat analysis with additional attack vectors"
      category: "injection"
      severity: "critical"
      status: "mitigated"
      mitigation: "Implemented prepared statements and comprehensive input validation"
    
    # Sample Document Data
    sample_document:
      name: "Security Architecture Document"
      description: "Detailed security architecture and design decisions"
      document_type: "architecture"
      url: "https://docs.example.com/security-architecture"
    
    # Sample Source Data
    sample_source:
      name: "OWASP Top 10 2021"
      description: "Reference to OWASP Top 10 security risks"
      source_type: "standard"
      url: "https://owasp.org/Top10/"
    
    # Sample Diagram Data
    sample_diagram:
      name: "System Architecture Diagram"
      description: "High-level system architecture with trust boundaries"
      diagram_type: "data_flow"
    
    # Sample Metadata
    sample_metadata:
      classification: "internal"
      owner_team: "security"
      review_date: "2024-12-31"
      compliance_framework: "SOC2"
    
    # Invalid Data for Error Testing
    invalid_data:
      invalid_uuid: "not-a-valid-uuid"
      invalid_date: "not-a-date"
      invalid_url: "not://valid-url"
      empty_string: ""
      null_value: null
      oversized_string: "{{ 'a' | repeat(1001) }}"
      negative_number: -1
      invalid_enum: "invalid_enum_value"
    
    # Schema Violation Test Cases
    schema_violations:
      threat_model_missing_name:
        description: "Threat model without required name field"
        project_url: "https://github.com/example/test"
      
      threat_model_invalid_types:
        name: 12345
        description: ["not", "a", "string"]
        project_url: 999
      
      threat_model_extra_fields:
        name: "Valid Threat Model"
        description: "Valid description"
        unknown_field: "should_not_be_here"
        another_invalid_field: 123
      
      threat_model_readonly_fields:
        name: "Valid Name"
        description: "Valid description"
        id: "12345678-1234-1234-1234-123456789012"
        created_at: "2024-01-01T00:00:00Z"
        modified_at: "2024-01-01T00:00:00Z"
    
    # Bulk Operation Test Data
    bulk_threats:
      - title: "Threat 1"
        description: "First bulk threat"
        category: "spoofing"
        severity: "medium"
        status: "identified"
      - title: "Threat 2"
        description: "Second bulk threat"
        category: "tampering"
        severity: "high"
        status: "identified"
      - title: "Threat 3"
        description: "Third bulk threat"
        category: "information_disclosure"
        severity: "low"
        status: "identified"
    
    # JSON Patch Test Operations
    json_patch_operations:
      update_name:
        - op: "replace"
          path: "/name"
          value: "Updated Name via JSON Patch"
      
      update_multiple_fields:
        - op: "replace"
          path: "/name"
          value: "Multi-field Update"
        - op: "replace"
          path: "/description"
          value: "Updated description via JSON Patch"
      
      invalid_operations:
        - op: "invalid_op"
          path: "/name"
          value: "Should fail"
        - op: "replace"
          path: "/nonexistent_field"
          value: "Should also fail"
    
    # Collaboration Test Data
    collaboration_session:
      session_name: "Test Collaboration Session"
      max_participants: 5
      allow_anonymous: false
    
    # Role-Based Access Control Testing Strategy
    # Since OAuth test provider generates random users, RBAC testing must:
    # 1. Login user1 (becomes owner by creating resource)
    # 2. Login user2 (will be assigned role by user1)
    # 3. User1 modifies resource to grant role to user2
    # 4. Test user2's access with assigned role
    rbac_test_roles:
      owner: "owner"    # Creator of resource becomes owner
      writer: "writer"  # Can modify but not delete
      reader: "reader"  # Can only read