version: "1.1"
name: Role-Based Access Control Integration Tests
config:
  http:
  variables:
    # Pre-generated user credentials for RBAC testing
    owner_login_hint: "alice"      # Owner user - alice@test.tmi
    writer_login_hint: "bob"       # Writer user - bob@test.tmi  
    reader_login_hint: "chuck"     # Reader user - chuck@test.tmi
tests:
  rbac_threat_model_permissions:
    name: RBAC Testing for Threat Models
    steps:
      # Load owner user credentials
      - id: load_owner_credentials
        name: Load Alice's owner credentials
        captures:
          owner_token:
            value: "${{ env.ALICE_TOKEN }}"
          owner_user_id:
            value: "alice@test.tmi"
          owner_email:
            value: "alice@test.tmi"

      - id: owner_get_user_info
        name: Get owner user information (validate predictable Alice identity)
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer ${{ owner_token }}"
          check:
            status: 200
            jsonpath:
              $.email: "alice@test.tmi"
              $.name: "Alice (Test User)"

      - id: owner_creates_threat_model
        name: Owner creates threat model
        http:
          url: http://localhost:8080/threat_models
          method: POST
          headers:
            Authorization: "Bearer ${{ owner_token }}"
            Content-Type: application/json
          json:
            name: "RBAC Testing Threat Model"
            description: "Threat model for testing role-based access control across different user roles"
          check:
            status: 201
        captures:
          threat_model_id:
            jsonpath: $.id

      # Load writer user credentials
      - id: load_writer_credentials
        name: Load Bob's writer credentials
        captures:
          writer_token:
            value: "${{ env.BOB_TOKEN }}"
          writer_user_id:
            value: "bob@test.tmi"
          writer_email:
            value: "bob@test.tmi"

      - id: writer_get_user_info
        name: Get writer user information (validate predictable Bob identity)
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer ${{ writer_token }}"
          check:
            status: 200
            jsonpath:
              $.email: "bob@test.tmi"
              $.name: "Bob (Test User)"

      # Load reader user credentials
      - id: load_reader_credentials
        name: Load Chuck's reader credentials
        captures:
          reader_token:
            value: "${{ env.CHUCK_TOKEN }}"
          reader_user_id:
            value: "chuck@test.tmi"
          reader_email:
            value: "chuck@test.tmi"

      - id: reader_get_user_info
        name: Get reader user information (validate predictable Chuck identity)
        http:
          url: http://localhost:8080/oauth2/me
          method: GET
          headers:
            Authorization: "Bearer ${{ reader_token }}"
          check:
            status: 200
            jsonpath:
              $.email: "chuck@test.tmi"
              $.name: "Chuck (Test User)"

      # Test initial access - only owner should be able to see the threat model
      - id: owner_can_read_own_tm
        name: Owner can read their own threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ owner_token }}"
          check:
            status: 200
            jsonpath:
              $.id: "{{ threat_model_id }}"

      - id: writer_cannot_read_tm_initially
        name: Writer cannot read threat model initially (no access granted)
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ writer_token }}"
          check:
            status: 403  # Forbidden - no access granted yet

      - id: reader_cannot_read_tm_initially
        name: Reader cannot read threat model initially (no access granted)
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ reader_token }}"
          check:
            status: 403  # Forbidden - no access granted yet

      # Owner grants writer role to second user
      # Note: This assumes there's an endpoint to manage permissions
      # The exact implementation may vary - this is a placeholder for the permission granting mechanism
      - id: owner_grants_writer_role
        name: Owner grants writer role to second user
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/permissions
          method: POST
          headers:
            Authorization: "Bearer ${{ owner_token }}"
            Content-Type: application/json
          json:
            user_id: "{{ writer_user_id }}"
            role: "writer"
          check:
            anyOf:
              - status: 201  # Permission granted successfully
              - status: 404  # Endpoint may not exist yet

      # Owner grants reader role to third user
      - id: owner_grants_reader_role
        name: Owner grants reader role to third user
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/permissions
          method: POST
          headers:
            Authorization: "Bearer ${{ owner_token }}"
            Content-Type: application/json
          json:
            user_id: "{{ reader_user_id }}"
            role: "reader"
          check:
            anyOf:
              - status: 201  # Permission granted successfully
              - status: 404  # Endpoint may not exist yet

      # Test read access after permissions granted
      - id: writer_can_read_after_grant
        name: Writer can read threat model after being granted access
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ writer_token }}"
          check:
            anyOf:
              - status: 200  # Access granted
                jsonpath:
                  $.id: "{{ threat_model_id }}"
              - status: 403  # Permission system not implemented yet

      - id: reader_can_read_after_grant
        name: Reader can read threat model after being granted access
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ reader_token }}"
          check:
            anyOf:
              - status: 200  # Access granted
                jsonpath:
                  $.id: "{{ threat_model_id }}"
              - status: 403  # Permission system not implemented yet

      # Test write access - only owner and writer should be able to modify
      - id: writer_can_modify_tm
        name: Writer can modify threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: PATCH
          headers:
            Authorization: "Bearer ${{ writer_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/description"
              value: "Updated by writer user to test write permissions"
          check:
            anyOf:
              - status: 200  # Writer can modify
                jsonpath:
                  $.description: "Updated by writer user to test write permissions"
              - status: 403  # Permission denied

      - id: reader_cannot_modify_tm
        name: Reader cannot modify threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: PATCH
          headers:
            Authorization: "Bearer ${{ reader_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/description"
              value: "Reader attempting to modify (should fail)"
          check:
            status: 403  # Forbidden - reader cannot modify

      # Test delete access - only owner should be able to delete
      - id: writer_cannot_delete_tm
        name: Writer cannot delete threat model (owner-only operation)
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ writer_token }}"
          check:
            status: 403  # Forbidden - only owner can delete

      - id: reader_cannot_delete_tm
        name: Reader cannot delete threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ reader_token }}"
          check:
            status: 403  # Forbidden - reader cannot delete

      # Owner can delete (but we'll skip actual deletion for cleanup)
      # Test threats within threat model
      - id: owner_creates_threat
        name: Owner creates threat in threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/threats
          method: POST
          headers:
            Authorization: "Bearer ${{ owner_token }}"
            Content-Type: application/json
          json:
            title: "RBAC Test Threat"
            description: "Threat created to test RBAC permissions"
            category: "authorization"
            severity: "medium"
            status: "identified"
          check:
            status: 201
        captures:
          threat_id:
            jsonpath: $.id

      # Test threat access based on threat model permissions
      - id: writer_can_modify_threat
        name: Writer can modify threat (inherits threat model permissions)
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/threats/{{ threat_id }}
          method: PATCH
          headers:
            Authorization: "Bearer ${{ writer_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/status"
              value: "in_progress"
          check:
            anyOf:
              - status: 200  # Writer can modify threat
                jsonpath:
                  $.status: "in_progress"
              - status: 403  # Permission denied

      - id: reader_cannot_modify_threat
        name: Reader cannot modify threat
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/threats/{{ threat_id }}
          method: PATCH
          headers:
            Authorization: "Bearer ${{ reader_token }}"
            Content-Type: application/json-patch+json
          json:
            - op: "replace"
              path: "/status"
              value: "mitigated"
          check:
            status: 403  # Forbidden - reader cannot modify

      - id: reader_can_view_threat
        name: Reader can view threat (read access)
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/threats/{{ threat_id }}
          method: GET
          headers:
            Authorization: "Bearer ${{ reader_token }}"
          check:
            anyOf:
              - status: 200  # Reader can view
                jsonpath:
                  $.id: "{{ threat_id }}"
              - status: 403  # Permission denied

      # Cleanup
      - id: cleanup_threat
        name: Cleanup test threat
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}/threats/{{ threat_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ owner_token }}"
          check:
            status: 204

      - id: cleanup_threat_model
        name: Cleanup test threat model
        http:
          url: http://localhost:8080/threat_models/{{ threat_model_id }}
          method: DELETE
          headers:
            Authorization: "Bearer ${{ owner_token }}"
          check:
            status: 204

  rbac_unauthorized_user_testing:
    name: Unauthorized User Access Testing
    steps:
      # Test access without any authentication
      - id: no_auth_list_threat_models
        name: List threat models without authentication
        http:
          url: http://localhost:8080/threat_models
          method: GET
          check:
            status: 401

      - id: no_auth_create_threat_model
        name: Create threat model without authentication
        http:
          url: http://localhost:8080/threat_models
          method: POST
          headers:
            Content-Type: application/json
          json:
            name: "Unauthorized TM"
            description: "Should fail"
          check:
            status: 401

      # Test with invalid token
      - id: invalid_token_access
        name: Access with invalid JWT token
        http:
          url: http://localhost:8080/threat_models
          method: GET
          headers:
            Authorization: "Bearer invalid_jwt_token_12345"
          check:
            status: 401

      # Test with expired/malformed tokens
      - id: malformed_token_access
        name: Access with malformed JWT token
        http:
          url: http://localhost:8080/threat_models
          method: GET
          headers:
            Authorization: "Bearer malformed.jwt.token"
          check:
            status: 401