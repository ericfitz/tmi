{
  "openapi": "3.0.3",
  "info": {
    "title": "TMI (Threat Modeling Improved) API",
    "description": "A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.",
    "version": "0.103.0"
  },
  "externalDocs": {
    "description": "Find more information here",
    "url": ""
  },
  "servers": [
    {
      "description": "Local development server",
      "url": "http://localhost:8080"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for authenticated requests"
      }
    },
    "schemas": {
      "ApiInfo": {
        "type": "object",
        "description": "API information response for the root endpoint",
        "properties": {
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "enum": [
                  "OK",
                  "ERROR"
                ],
                "description": "Status code indicating if the API is functioning correctly"
              },
              "time": {
                "type": "string",
                "format": "date-time",
                "description": "Current server time in UTC, formatted as RFC 3339"
              }
            },
            "required": [
              "code",
              "time"
            ]
          },
          "service": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the service"
              },
              "build": {
                "type": "string",
                "description": "Current build number",
                "maxLength": 256
              }
            },
            "required": [
              "name",
              "build"
            ]
          },
          "api": {
            "type": "object",
            "properties": {
              "version": {
                "type": "string",
                "description": "API version"
              },
              "specification": {
                "type": "string",
                "format": "uri",
                "description": "URL to the API specification",
                "maxLength": 1024
              }
            },
            "required": [
              "version",
              "specification"
            ]
          },
          "operator": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Operator name from environment variables",
                "maxLength": 256
              },
              "contact": {
                "type": "string",
                "description": "Operator contact information from environment variables",
                "maxLength": 1024
              }
            },
            "required": [
              "name",
              "contact"
            ]
          }
        },
        "required": [
          "status",
          "service",
          "api",
          "operator"
        ],
        "example": {
          "status": {
            "code": "OK",
            "time": "2025-04-09T12:00:00Z"
          },
          "service": {
            "name": "TMI",
            "build": "1.0.0-386eea0"
          },
          "api": {
            "version": "1.0",
            "specification": "https://github.com/ericfitz/tmi/blob/main/docs/reference/apis/tmi-openapi.json"
          },
          "operator": {
            "name": "Example Organization",
            "contact": "api-support@example.com"
          }
        }
      },
      "OAuthProtectedResourceMetadata": {
        "type": "object",
        "description": "OAuth 2.0 protected resource metadata as defined in RFC 9728",
        "properties": {
          "resource": {
            "type": "string",
            "format": "uri",
            "description": "The protected resource's resource identifier URL",
            "example": "http://localhost:8080"
          },
          "scopes_supported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "JSON array of OAuth scope values supported by this protected resource",
            "example": [
              "openid",
              "email",
              "profile"
            ]
          },
          "authorization_servers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "List of authorization server issuer identifiers that can issue tokens for this resource",
            "example": [
              "http://localhost:8080"
            ]
          },
          "jwks_url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the protected resource's JSON Web Key Set",
            "example": "http://localhost:8080/.well-known/jwks.json"
          },
          "bearer_methods_supported": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Supported token presentation methods for bearer tokens",
            "example": [
              "header",
              "body",
              "query"
            ]
          },
          "resource_name": {
            "type": "string",
            "description": "Human-readable name of the protected resource",
            "example": "TMI (Threat Modeling Improved) API"
          },
          "resource_documentation": {
            "type": "string",
            "format": "uri",
            "description": "URL with information for developers on how to use this protected resource",
            "example": "https://github.com/ericfitz/tmi"
          },
          "tls_client_certificate_bound_access_tokens": {
            "type": "boolean",
            "description": "Whether the protected resource supports TLS client certificate bound access tokens",
            "example": false
          }
        },
        "required": [
          "resource"
        ],
        "example": {
          "resource": "http://localhost:8080",
          "scopes_supported": [
            "openid",
            "email",
            "profile"
          ],
          "authorization_servers": [
            "http://localhost:8080"
          ],
          "jwks_url": "http://localhost:8080/.well-known/jwks.json",
          "bearer_methods_supported": [
            "header"
          ],
          "resource_name": "TMI (Threat Modeling Improved) API",
          "resource_documentation": "https://github.com/ericfitz/tmi",
          "tls_client_certificate_bound_access_tokens": false
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the document (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Document name",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of document purpose or content",
            "maxLength": 1024,
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional document metadata",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "URL location of the document",
            "maxLength": 1024,
            "x-oapi-codegen-extra-tags": {
              "binding": "required,url"
            }
          }
        },
        "required": [
          "name",
          "uri"
        ],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Example Application Design",
          "description": "Technical design document for the Example application",
          "metadata": [
            {
              "key": "document_type",
              "value": "technical_specification"
            },
            {
              "key": "version",
              "value": "1.2"
            }
          ],
          "uri": "https://example.com/design.pdf"
        }
      },
      "BaseDiagram": {
        "type": "object",
        "description": "Base diagram object with common properties",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the diagram (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "Type of diagram with version",
            "enum": [
              "DFD-1.0.0"
            ],
            "maxLength": 64
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (ISO3339)",
            "maxLength": 36
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (ISO3339)",
            "maxLength": 36
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional diagram metadata",
            "nullable": true
          },
          "update_vector": {
            "type": "integer",
            "format": "int64",
            "description": "Server-managed monotonic version counter, incremented on each diagram update",
            "readOnly": true,
            "minimum": 0
          },
          "image": {
            "type": "object",
            "description": "Image data with version information",
            "properties": {
              "svg": {
                "type": "string",
                "format": "byte",
                "description": "BASE64 encoded SVG representation of the diagram, used for thumbnails and reports"
              },
              "update_vector": {
                "type": "integer",
                "format": "int64",
                "description": "Version of the diagram when this SVG was generated. If not provided when svg is updated, will be auto-set to BaseDiagram.update_vector",
                "minimum": 0
              }
            },
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "created_at",
          "modified_at"
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        }
      },
      "DfdDiagram": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDiagram"
          },
          {
            "type": "object",
            "description": "Data Flow Diagram (DFD) with cells",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "DFD-1.0.0"
                ],
                "description": "DFD diagram type with version"
              },
              "cells": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/Node"
                    },
                    {
                      "$ref": "#/components/schemas/Edge"
                    }
                  ]
                },
                "description": "List of diagram cells (nodes and edges) following X6 structure"
              }
            },
            "required": [
              "cells"
            ]
          }
        ]
      },
      "CreateDiagramRequest": {
        "type": "object",
        "description": "Request body for creating a new diagram - only includes client-provided fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "description": "Type of diagram with version",
            "enum": [
              "DFD-1.0.0"
            ],
            "maxLength": 64
          }
        },
        "required": [
          "name",
          "type"
        ],
        "additionalProperties": false
      },
      "Diagram": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DfdDiagram"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "DFD-1.0.0": "#/components/schemas/DfdDiagram"
          }
        },
        "example": {
          "id": "359314D9-B6A3-460B-805F-B82190D7290F",
          "type": "DFD-1.0.0",
          "name": "Workflow Diagram",
          "description": "A process workflow",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:30:00Z",
          "metadata": [],
          "cells": [
            {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "x": 100,
              "y": 100,
              "width": 120,
              "height": 60,
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": {
                    "position": "left"
                  },
                  "out": {
                    "position": "right"
                  }
                },
                "items": [
                  {
                    "id": "port_in_1",
                    "group": "in"
                  },
                  {
                    "id": "port_out_1",
                    "group": "out"
                  }
                ]
              },
              "data": []
            },
            {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": []
            }
          ]
        }
      },
      "Cell": {
        "type": "object",
        "description": "Base schema for all diagram cells (nodes and edges) fully compatible with AntV X6 graph library. This schema includes all X6 native properties plus convenience properties for easier integration. X6-specific properties like markup, tools, router, and connector are supported for advanced customization.",
        "discriminator": {
          "propertyName": "shape"
        },
        "required": [
          "id",
          "shape"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the cell (UUID)",
            "format": "uuid",
            "example": "37EAEDFA-BF37-4996-8665-242FEC34BBFF",
            "maxLength": 36
          },
          "shape": {
            "type": "string",
            "description": "Shape type identifier that determines cell structure and behavior",
            "example": "process"
          },
          "zIndex": {
            "type": "number",
            "description": "Z-order layer for rendering (higher values render on top)",
            "default": 1,
            "minimum": 0
          },
          "visible": {
            "type": "boolean",
            "description": "Whether the cell is visible in the diagram",
            "default": true
          },
          "data": {
            "type": "object",
            "description": "Flexible data storage compatible with X6, with reserved metadata namespace",
            "properties": {
              "_metadata": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Metadata"
                },
                "description": "Reserved namespace for structured business metadata"
              }
            },
            "additionalProperties": true,
            "default": {
              "_metadata": []
            }
          },
          "markup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "SVG/HTML markup definition for custom shape rendering in X6"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CellTool"
            },
            "description": "Interactive tools attached to the cell for user interaction"
          }
        }
      },
      "Node": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram node representing an entity, process, store, or boundary. Fully compatible with X6 Node objects using X6's native toJSON/fromJSON format with position and size objects.",
            "required": [
              "position",
              "size"
            ],
            "properties": {
              "shape": {
                "type": "string",
                "enum": [
                  "actor",
                  "process",
                  "store",
                  "security-boundary",
                  "text-box"
                ],
                "description": "Node type determining its visual representation and behavior"
              },
              "position": {
                "type": "object",
                "description": "Node position in X6 format",
                "properties": {
                  "x": {
                    "type": "number",
                    "description": "X coordinate"
                  },
                  "y": {
                    "type": "number",
                    "description": "Y coordinate"
                  }
                },
                "required": [
                  "x",
                  "y"
                ]
              },
              "size": {
                "type": "object",
                "description": "Node size in X6 format",
                "properties": {
                  "width": {
                    "type": "number",
                    "description": "Width in pixels",
                    "minimum": 40
                  },
                  "height": {
                    "type": "number",
                    "description": "Height in pixels",
                    "minimum": 30
                  }
                },
                "required": [
                  "width",
                  "height"
                ]
              },
              "angle": {
                "type": "number",
                "description": "Rotation angle in degrees",
                "default": 0
              },
              "attrs": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NodeAttrs"
                  }
                ],
                "description": "Visual styling attributes for the node"
              },
              "ports": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortConfiguration"
                  }
                ],
                "description": "Port configuration for connections"
              },
              "parent": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the parent cell for nested/grouped nodes (UUID)",
                "nullable": true,
                "maxLength": 36
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "fill": {
                    "type": "string",
                    "description": "Background fill color",
                    "maxLength": 32
                  },
                  "stroke": {
                    "type": "string",
                    "description": "Border/outline color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Border/outline width in pixels",
                    "minimum": 0
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Text font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
              "shape": "process",
              "position": {
                "x": 100,
                "y": 100
              },
              "size": {
                "width": 120,
                "height": 60
              },
              "zIndex": 10,
              "visible": true,
              "attrs": {
                "body": {
                  "fill": "#ffffff",
                  "stroke": "#000000",
                  "strokeWidth": 2
                },
                "text": {
                  "text": "Process Data",
                  "fontSize": 14,
                  "fill": "#000000"
                }
              },
              "ports": {
                "groups": {
                  "in": {
                    "position": "left"
                  },
                  "out": {
                    "position": "right"
                  }
                },
                "items": [
                  {
                    "id": "port_in_1",
                    "group": "in"
                  },
                  {
                    "id": "port_out_1",
                    "group": "out"
                  }
                ]
              },
              "data": {
                "_metadata": [
                  {
                    "key": "category",
                    "value": "business-process"
                  },
                  {
                    "key": "owner",
                    "value": "engineering-team"
                  }
                ],
                "customValidation": {
                  "rules": [
                    "required-input",
                    "sanitize-output"
                  ],
                  "level": "strict"
                }
              },
              "markup": [
                {
                  "tagName": "rect",
                  "selector": "body",
                  "attrs": {
                    "rx": 5,
                    "ry": 5
                  }
                },
                {
                  "tagName": "text",
                  "selector": "label"
                }
              ],
              "tools": [
                {
                  "name": "boundary",
                  "args": {
                    "padding": 5
                  }
                }
              ]
            }
          }
        ]
      },
      "Edge": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Cell"
          },
          {
            "type": "object",
            "description": "A diagram edge representing a connection or data flow between nodes. Fully compatible with X6 Edge objects and supports X6 routing algorithms (manhattan, orth, oneSide, metro, er), connector styles (normal, rounded, smooth, jumpover), custom markup, tools, and convenience properties (label, style) for easier integration.",
            "required": [
              "source",
              "target"
            ],
            "properties": {
              "shape": {
                "type": "string",
                "enum": [
                  "edge"
                ],
                "description": "Edge type identifier"
              },
              "source": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeTerminal"
                  }
                ],
                "description": "Source connection point"
              },
              "target": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeTerminal"
                  }
                ],
                "description": "Target connection point"
              },
              "attrs": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeAttrs"
                  }
                ],
                "description": "Visual styling attributes for the edge"
              },
              "labels": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EdgeLabel"
                },
                "description": "Text labels positioned along the edge"
              },
              "vertices": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Point"
                },
                "description": "Intermediate waypoints for edge routing"
              },
              "router": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeRouter"
                  }
                ],
                "description": "Edge routing algorithm configuration for path calculation"
              },
              "connector": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeConnector"
                  }
                ],
                "description": "Edge connector style configuration for visual appearance"
              },
              "defaultLabel": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EdgeLabel"
                  }
                ],
                "description": "Default label configuration applied to edges without explicit labels"
              },
              "label": {
                "type": "string",
                "description": "Convenience property: Simple text label that automatically creates appropriate attrs.text.text structure",
                "maxLength": 256
              },
              "style": {
                "type": "object",
                "description": "Convenience property: Simplified styling options that automatically create appropriate attrs structure",
                "properties": {
                  "stroke": {
                    "type": "string",
                    "description": "Line color",
                    "maxLength": 32
                  },
                  "strokeWidth": {
                    "type": "number",
                    "description": "Line width in pixels",
                    "minimum": 0
                  },
                  "strokeDasharray": {
                    "type": "string",
                    "description": "Line dash pattern (e.g., '5 5' for dashed)",
                    "maxLength": 64
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Label font size in pixels",
                    "minimum": 1
                  },
                  "fontColor": {
                    "type": "string",
                    "description": "Label text color",
                    "maxLength": 32
                  }
                }
              }
            },
            "example": {
              "id": "456789AB-CD12-34EF-56GH-789012345678",
              "shape": "edge",
              "source": {
                "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
                "port": "port_out_1"
              },
              "target": {
                "cell": "789ABC12-3456-78DE-F012-3456789ABCDE"
              },
              "zIndex": 1,
              "visible": true,
              "attrs": {
                "line": {
                  "stroke": "#808080",
                  "strokeWidth": 1,
                  "targetMarker": {
                    "name": "classic",
                    "size": 8
                  }
                }
              },
              "labels": [
                {
                  "attrs": {
                    "text": {
                      "text": "Data Flow",
                      "fontSize": 12,
                      "fill": "#333333"
                    }
                  },
                  "position": 0.5
                }
              ],
              "vertices": [],
              "data": {
                "_metadata": [
                  {
                    "key": "flow-type",
                    "value": "data"
                  },
                  {
                    "key": "sensitivity",
                    "value": "public"
                  }
                ],
                "routingHints": {
                  "preferredPath": "shortest",
                  "avoidOverlap": true
                }
              },
              "router": {
                "name": "manhattan",
                "args": {
                  "step": 10,
                  "padding": 20
                }
              },
              "connector": {
                "name": "rounded",
                "args": {
                  "radius": 5
                }
              }
            }
          }
        ]
      },
      "ThreatModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatModelBase"
          },
          {
            "type": "object",
            "description": "Complete ThreatModel with server-generated fields",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the threat model (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "created_by": {
                "type": "string",
                "description": "User name, email or identifier of the creator of the threat model",
                "maxLength": 256,
                "pattern": "^[^<>\"'&]*$",
                "readOnly": true
              },
              "documents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Document"
                },
                "description": "List of documents related to the threat model",
                "readOnly": true
              },
              "repositories": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Repository"
                },
                "description": "List of source code repositories related to the threat model",
                "readOnly": true
              },
              "diagrams": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Diagram"
                },
                "description": "List of diagram objects associated with this threat model",
                "readOnly": true
              },
              "threats": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Threat"
                },
                "description": "List of threats within the threat model",
                "readOnly": true
              },
              "notes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Note"
                },
                "description": "List of notes associated with the threat model",
                "readOnly": true
              },
              "assets": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExtendedAsset"
                },
                "description": "List of assets associated with the threat model",
                "readOnly": true
              }
            }
          }
        ],
        "example": {
          "id": "F898D276-DE86-4837-9B5E-C46E1A08EAB6",
          "name": "System Threat Model",
          "description": "Threats for system X",
          "created_at": "2025-04-06T12:00:00Z",
          "modified_at": "2025-04-06T12:00:00Z",
          "owner": "user@example.com",
          "created_by": "user@example.com",
          "threat_model_framework": "STRIDE",
          "authorization": [
            {
              "subject": "user@example.com",
              "subject_type": "user",
              "role": "owner"
            },
            {
              "subject": "security-team",
              "subject_type": "group",
              "idp": "saml_okta",
              "role": "writer"
            }
          ],
          "metadata": [],
          "documents": [
            {
              "id": "3ba7b810-9dad-11d1-beef-00c04fd430c8",
              "name": "System Architecture Document",
              "description": "Technical architecture documentation for the system",
              "metadata": [
                {
                  "key": "document_type",
                  "value": "architecture"
                },
                {
                  "key": "version",
                  "value": "2.1"
                }
              ],
              "uri": "https://docs.example.com/system-architecture.pdf"
            }
          ],
          "repositories": [
            {
              "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
              "name": "GitHub Repo",
              "description": "Source code for the tmi-ux application",
              "type": "git",
              "parameters": {
                "refType": "branch",
                "refValue": "main"
              },
              "metadata": [
                {
                  "key": "environment",
                  "value": "production"
                },
                {
                  "key": "team",
                  "value": "security"
                }
              ],
              "uri": "https://github.com/ericfitz/tmi-ux.git"
            }
          ],
          "diagrams": [
            {
              "id": "22DB9004-435D-4765-9E41-0291AA8FE15A",
              "type": "DFD-1.0.0",
              "name": "System Overview Diagram",
              "description": "Main system data flow diagram",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:30:00Z",
              "metadata": [],
              "cells": []
            }
          ],
          "threats": [
            {
              "id": "EC464A19-D1CA-4B72-AD8D-055AD2073C2B",
              "threat_model_id": "B7946A3A-5581-42C6-91BF-F41A1E1DD535",
              "name": "Data Breach",
              "description": "Unauthorized data access",
              "mitigation": "Recommendation: implement least privilege authorization policy",
              "created_at": "2025-04-06T12:01:00Z",
              "modified_at": "2025-04-06T12:01:00Z",
              "diagram_id": "",
              "cell_id": "",
              "severity": "High",
              "score": 7.5,
              "priority": "High",
              "mitigated": false,
              "status": "Open",
              "threat_type": "Information Disclosure",
              "metadata": [],
              "issue_uri": "https://issues.example.com/browse/SEC-456"
            }
          ],
          "issue_uri": "https://issues.example.com/browse/TM-123",
          "notes": [
            {
              "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
              "name": "Security Considerations",
              "content": "# Security Notes\n\n- Consider authentication requirements\n- Review encryption needs",
              "description": "Important security considerations for the threat model",
              "metadata": [
                {
                  "key": "priority",
                  "value": "high"
                }
              ]
            }
          ],
          "assets": [
            {
              "id": "7ba7b810-9dad-11d1-beef-00c04fd430c9",
              "name": "Customer Database",
              "description": "Primary database containing customer information",
              "type": "data",
              "criticality": "high",
              "classification": [
                "confidential",
                "regulated"
              ],
              "sensitivity": [
                "pii",
                "financial"
              ],
              "threat_model_id": "F898D276-DE86-4837-9B5E-C46E1A08EAB6",
              "created_at": "2025-04-06T12:00:00Z",
              "modified_at": "2025-04-06T12:00:00Z",
              "metadata": [
                {
                  "key": "data_retention",
                  "value": "7_years"
                }
              ]
            }
          ]
        }
      },
      "Threat": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatBase"
          },
          {
            "type": "object",
            "description": "Complete Threat with server-generated fields",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier for the threat (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "threat_model_id": {
                "type": "string",
                "format": "uuid",
                "description": "Unique identifier of the parent threat model (UUID)",
                "maxLength": 36,
                "readOnly": true
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp (RFC3339)",
                "maxLength": 24,
                "readOnly": true
              }
            }
          }
        ]
      },
      "Authorization": {
        "type": "object",
        "description": "Authorization entry defining access permissions for users or groups",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Email address for users, group name for groups",
            "minLength": 1,
            "maxLength": 500,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "subject_type": {
            "type": "string",
            "enum": [
              "user",
              "group"
            ],
            "description": "Type of authorization subject: user (individual) or group",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "idp": {
            "type": "string",
            "description": "Identity provider (required for groups, optional for users)",
            "maxLength": 100
          },
          "role": {
            "type": "string",
            "enum": [
              "reader",
              "writer",
              "owner"
            ],
            "description": "Role: reader (view), writer (edit), owner (full control)",
            "maxLength": 6,
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          }
        },
        "required": [
          "subject",
          "subject_type",
          "role"
        ]
      },
      "Metadata": {
        "type": "object",
        "description": "A key-value pair for extensible metadata",
        "properties": {
          "key": {
            "type": "string",
            "description": "Metadata key",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[a-zA-Z0-9_./:-]+$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "value": {
            "type": "string",
            "description": "Metadata value",
            "minLength": 1,
            "maxLength": 1024,
            "pattern": "^[^<>]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "Error": {
        "type": "object",
        "description": "Standard error response format",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error code"
          },
          "error_description": {
            "type": "string",
            "description": "Human-readable error description"
          },
          "error_uri": {
            "type": "string",
            "format": "uri",
            "description": "URI to documentation about the error"
          },
          "details": {
            "type": "object",
            "description": "Additional context-specific error information",
            "properties": {
              "code": {
                "type": "string",
                "description": "Machine-readable error code for programmatic handling",
                "example": "COLLABORATION_SESSION_NOT_FOUND"
              },
              "context": {
                "type": "object",
                "description": "Contextual information about the error",
                "additionalProperties": true,
                "example": {
                  "diagram_id": "550e8400-e29b-41d4-a716-446655440000",
                  "requested_operation": "end_session"
                }
              },
              "suggestion": {
                "type": "string",
                "description": "Human-readable suggestion for resolving the error",
                "example": "Start a collaboration session first using POST /diagrams/{id}/collaborate"
              }
            },
            "additionalProperties": false,
            "nullable": true
          }
        },
        "required": [
          "error",
          "error_description"
        ],
        "example": {
          "error": "invalid_request",
          "error_description": "The request is missing a required parameter",
          "error_uri": "https://docs.example.com/oauth2/errors/invalid_request"
        }
      },
      "AuthTokenResponse": {
        "type": "object",
        "description": "JWT token response for authentication endpoints",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "Bearer"
            ],
            "description": "Token type"
          },
          "expires_in": {
            "type": "integer",
            "description": "Access token expiration time in seconds"
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "token_type",
          "expires_in"
        ],
        "example": {
          "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
          "refresh_token": "def456...",
          "token_type": "Bearer",
          "expires_in": 3600
        }
      },
      "CollaborationSession": {
        "type": "object",
        "description": "Details of an active collaboration session for a diagram",
        "properties": {
          "session_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the session (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "host": {
            "type": "string",
            "description": "Email address of the session host",
            "maxLength": 256,
            "readOnly": true
          },
          "presenter": {
            "type": "string",
            "description": "Email address of the current presenter",
            "maxLength": 256,
            "readOnly": true
          },
          "threat_model_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated threat model (UUID)",
            "maxLength": 36
          },
          "threat_model_name": {
            "type": "string",
            "description": "Name of the associated threat model",
            "maxLength": 256
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (UUID)",
            "maxLength": 36
          },
          "diagram_name": {
            "type": "string",
            "description": "Name of the associated diagram",
            "maxLength": 256
          },
          "participants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Participant"
            },
            "description": "List of active participants"
          },
          "websocket_url": {
            "type": "string",
            "description": "WebSocket URL for real-time updates",
            "maxLength": 1024
          }
        },
        "required": [
          "session_id",
          "host",
          "threat_model_id",
          "threat_model_name",
          "diagram_id",
          "diagram_name",
          "participants",
          "websocket_url"
        ],
        "example": {
          "session_id": "D7744D3A-ED22-40AF-862B-29786CAD0007",
          "host": "admin@example.com",
          "threat_model_id": "5311D207-AFD5-4A1A-BA83-14C1445DC257",
          "threat_model_name": "E-commerce Platform Security Analysis",
          "diagram_id": "DFF7F4A9-CBCE-4001-9198-2706C86F7EF3",
          "diagram_name": "User Authentication Flow",
          "participants": [
            {
              "user": {
                "user_id": "oauth2|test|user123",
                "email": "admin@example.com",
                "name": "Admin User"
              },
              "last_activity": "2025-04-06T12:02:00Z",
              "permissions": "writer"
            }
          ],
          "websocket_url": "wss://api.example.com/threat_models/5311D207-AFD5-4A1A-BA83-14C1445DC257/diagrams/DFF7F4A9-CBCE-4001-9198-2706C86F7EF3/ws"
        }
      },
      "DiagramListItem": {
        "type": "object",
        "description": "A simplified diagram item for list endpoints, containing id, name, and type",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the diagram (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the diagram",
            "maxLength": 256
          },
          "type": {
            "type": "string",
            "enum": [
              "DFD-1.0.0"
            ],
            "description": "Type of the diagram"
          }
        },
        "required": [
          "id",
          "name",
          "type"
        ]
      },
      "TMListItem": {
        "type": "object",
        "description": "Enhanced item for threat model list endpoints with key metadata and counts",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the threat model (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model",
            "maxLength": 1024
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp (RFC3339)",
            "maxLength": 24
          },
          "modified_at": {
            "type": "string",
            "format": "date-time",
            "description": "Last modification timestamp (RFC3339)",
            "maxLength": 24
          },
          "owner": {
            "type": "string",
            "description": "Email address of the current owner"
          },
          "created_by": {
            "type": "string",
            "description": "Email address, name or identifier of the creator",
            "maxLength": 256
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "document_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of documents associated with this threat model"
          },
          "repo_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of source code repository entries associated with this threat model"
          },
          "diagram_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of diagrams associated with this threat model"
          },
          "threat_count": {
            "type": "integer",
            "minimum": 0,
            "description": "Number of threats defined in this threat model"
          },
          "issue_uri": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system",
            "maxLength": 1024
          },
          "asset_count": {
            "type": "integer",
            "description": "Number of assets associated with this threat model",
            "minimum": 0
          },
          "note_count": {
            "type": "integer",
            "description": "Number of notes associated with this threat model",
            "minimum": 0
          }
        },
        "required": [
          "id",
          "name",
          "created_at",
          "modified_at",
          "owner",
          "created_by",
          "threat_model_framework",
          "document_count",
          "repo_count",
          "diagram_count",
          "threat_count",
          "asset_count",
          "note_count"
        ]
      },
      "Point": {
        "type": "object",
        "description": "A 2D point with x and y coordinates",
        "required": [
          "x",
          "y"
        ],
        "properties": {
          "x": {
            "type": "number",
            "description": "X coordinate"
          },
          "y": {
            "type": "number",
            "description": "Y coordinate"
          }
        },
        "example": {
          "x": 100,
          "y": 200
        }
      },
      "EdgeTerminal": {
        "type": "object",
        "description": "Connection point for an edge (source or target)",
        "required": [
          "cell"
        ],
        "properties": {
          "cell": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the connected node (UUID)",
            "maxLength": 36
          },
          "port": {
            "type": "string",
            "description": "ID of the specific port on the node (optional)",
            "nullable": true,
            "maxLength": 64
          }
        },
        "example": {
          "cell": "233598D2-8C6D-4A73-AFE1-647081C4F7AA",
          "port": "port_out_1"
        }
      },
      "NodeAttrs": {
        "type": "object",
        "description": "Visual attributes for a node",
        "properties": {
          "body": {
            "type": "object",
            "description": "Body/shape styling attributes",
            "properties": {
              "fill": {
                "type": "string",
                "description": "Fill color",
                "maxLength": 32
              },
              "stroke": {
                "type": "string",
                "description": "Stroke color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Stroke width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for strokes",
                "nullable": true,
                "maxLength": 64
              }
            }
          },
          "text": {
            "type": "object",
            "description": "Text/label styling attributes",
            "properties": {
              "text": {
                "type": "string",
                "description": "Label text content",
                "maxLength": 256
              },
              "fontSize": {
                "type": "number",
                "description": "Font size in pixels",
                "minimum": 1
              },
              "fill": {
                "type": "string",
                "description": "Text color",
                "maxLength": 32
              },
              "fontFamily": {
                "type": "string",
                "description": "Font family",
                "maxLength": 64
              }
            }
          }
        }
      },
      "EdgeAttrs": {
        "type": "object",
        "description": "Visual attributes for an edge",
        "properties": {
          "line": {
            "type": "object",
            "description": "Line styling attributes",
            "properties": {
              "stroke": {
                "type": "string",
                "description": "Line color",
                "maxLength": 32
              },
              "strokeWidth": {
                "type": "number",
                "description": "Line width in pixels",
                "minimum": 0
              },
              "strokeDasharray": {
                "type": "string",
                "description": "Dash pattern for the line",
                "nullable": true,
                "maxLength": 64
              },
              "targetMarker": {
                "type": "object",
                "description": "Arrowhead marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": [
                      "classic",
                      "block",
                      "diamond",
                      "circle"
                    ],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              },
              "sourceMarker": {
                "type": "object",
                "description": "Source marker configuration",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Marker type",
                    "enum": [
                      "classic",
                      "block",
                      "diamond",
                      "circle"
                    ],
                    "maxLength": 32
                  },
                  "size": {
                    "type": "number",
                    "description": "Marker size in pixels",
                    "minimum": 1
                  }
                }
              }
            }
          }
        }
      },
      "EdgeLabel": {
        "type": "object",
        "description": "Label positioned along an edge",
        "properties": {
          "attrs": {
            "type": "object",
            "description": "Label styling attributes",
            "properties": {
              "text": {
                "type": "object",
                "description": "Text styling",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Label text content",
                    "maxLength": 256
                  },
                  "fontSize": {
                    "type": "number",
                    "description": "Font size in pixels",
                    "minimum": 1
                  },
                  "fill": {
                    "type": "string",
                    "description": "Text color",
                    "maxLength": 32
                  },
                  "fontFamily": {
                    "type": "string",
                    "description": "Font family",
                    "maxLength": 64
                  }
                }
              }
            }
          },
          "position": {
            "type": "number",
            "description": "Position along the edge (0 = start, 1 = end)",
            "minimum": 0,
            "maximum": 1
          }
        },
        "example": {
          "attrs": {
            "text": {
              "text": "Data Flow",
              "fontSize": 12,
              "fill": "#333333"
            }
          },
          "position": 0.5
        }
      },
      "PortConfiguration": {
        "type": "object",
        "description": "Port configuration for node connections",
        "properties": {
          "groups": {
            "type": "object",
            "description": "Port group definitions",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "position": {
                  "type": "string",
                  "enum": [
                    "top",
                    "right",
                    "bottom",
                    "left"
                  ],
                  "description": "Port position on the node"
                }
              }
            }
          },
          "items": {
            "type": "array",
            "description": "Individual port instances",
            "items": {
              "type": "object",
              "required": [
                "id",
                "group"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique port identifier",
                  "maxLength": 64
                },
                "group": {
                  "type": "string",
                  "description": "Port group this port belongs to",
                  "maxLength": 32
                }
              }
            }
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "description": "Paginated response wrapper for list endpoints",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of items for the current page"
          },
          "pagination": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "total": {
                "type": "integer",
                "description": "Total number of items across all pages",
                "minimum": 0
              },
              "limit": {
                "type": "integer",
                "description": "Maximum number of items per page",
                "minimum": 1
              },
              "offset": {
                "type": "integer",
                "description": "Number of items skipped from the beginning",
                "minimum": 0
              },
              "has_more": {
                "type": "boolean",
                "description": "Whether there are more items available beyond this page"
              }
            },
            "required": [
              "total",
              "limit",
              "offset",
              "has_more"
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      },
      "MarkupElement": {
        "type": "object",
        "description": "SVG/HTML markup element for custom shape definitions in X6",
        "required": [
          "tagName"
        ],
        "properties": {
          "tagName": {
            "type": "string",
            "description": "SVG or HTML tag name (e.g., 'rect', 'circle', 'path', 'text')",
            "example": "rect"
          },
          "selector": {
            "type": "string",
            "description": "CSS selector for targeting this element in styling",
            "example": "body"
          },
          "attrs": {
            "type": "object",
            "description": "Element attributes and styling properties",
            "additionalProperties": true,
            "example": {
              "fill": "#ffffff",
              "stroke": "#000000",
              "stroke-width": 2
            }
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MarkupElement"
            },
            "description": "Nested child elements"
          }
        }
      },
      "CellTool": {
        "type": "object",
        "description": "Interactive tool configuration for X6 cells",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Tool identifier (e.g., 'boundary', 'button', 'remove')",
            "example": "button"
          },
          "args": {
            "type": "object",
            "description": "Tool-specific configuration arguments",
            "additionalProperties": true,
            "example": {
              "x": 10,
              "y": 10,
              "markup": "<circle r='5' fill='red'/>"
            }
          }
        }
      },
      "EdgeRouter": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "normal",
              "orth",
              "oneSide",
              "manhattan",
              "metro",
              "er"
            ],
            "description": "Built-in router name"
          },
          {
            "type": "object",
            "description": "Router with custom configuration",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "normal",
                  "orth",
                  "oneSide",
                  "manhattan",
                  "metro",
                  "er"
                ],
                "description": "Router algorithm name"
              },
              "args": {
                "type": "object",
                "description": "Router-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "padding": {
                    "type": "number",
                    "description": "Padding around obstacles for routing"
                  },
                  "step": {
                    "type": "number",
                    "description": "Grid step size for orthogonal routing"
                  },
                  "directions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "top",
                        "right",
                        "bottom",
                        "left"
                      ]
                    },
                    "description": "Allowed routing directions"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge routing algorithm configuration for pathfinding",
        "example": {
          "name": "manhattan",
          "args": {
            "step": 10,
            "padding": 20
          }
        }
      },
      "EdgeConnector": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "normal",
              "rounded",
              "smooth",
              "jumpover"
            ],
            "description": "Built-in connector name"
          },
          {
            "type": "object",
            "description": "Connector with custom configuration",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "type": "string",
                "enum": [
                  "normal",
                  "rounded",
                  "smooth",
                  "jumpover"
                ],
                "description": "Connector style name"
              },
              "args": {
                "type": "object",
                "description": "Connector-specific arguments",
                "additionalProperties": true,
                "properties": {
                  "radius": {
                    "type": "number",
                    "description": "Radius for rounded connectors"
                  },
                  "precision": {
                    "type": "number",
                    "description": "Precision for smooth connectors"
                  },
                  "size": {
                    "type": "number",
                    "description": "Jump size for jumpover connectors"
                  },
                  "jump": {
                    "type": "string",
                    "enum": [
                      "arc",
                      "gap",
                      "cubic"
                    ],
                    "description": "Jump style for jumpover connectors"
                  }
                }
              }
            }
          }
        ],
        "description": "Edge connector style configuration for visual appearance",
        "example": {
          "name": "rounded",
          "args": {
            "radius": 10
          }
        }
      },
      "ThreatModelBase": {
        "type": "object",
        "description": "Base schema for ThreatModel with client-writable fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model",
            "maxLength": 1024,
            "pattern": "^[^<>]*$"
          },
          "owner": {
            "type": "string",
            "description": "Email address of the current owner",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$"
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "description": "List of users and their roles for this threat model"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat model metadata",
            "nullable": true
          },
          "issue_uri": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat model",
            "maxLength": 1024
          }
        },
        "required": [
          "name",
          "owner",
          "authorization",
          "threat_model_framework"
        ]
      },
      "ThreatModelInput": {
        "type": "object",
        "description": "Input schema for creating/updating ThreatModel",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat model",
            "maxLength": 256
          },
          "description": {
            "type": "string",
            "description": "Description of the threat model and its purpose",
            "maxLength": 1024,
            "nullable": true
          },
          "threat_model_framework": {
            "type": "string",
            "description": "The framework used for this threat model"
          },
          "authorization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "description": "List of users and their roles for this threat model"
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat model metadata",
            "nullable": true
          },
          "issue_uri": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat model",
            "maxLength": 1024,
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "ThreatBase": {
        "type": "object",
        "description": "Base schema for Threat with client-writable fields",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the threat",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the threat and risk to the organization",
            "maxLength": 1024
          },
          "mitigation": {
            "type": "string",
            "description": "Recommended or planned mitigation(s) for the threat",
            "maxLength": 1024
          },
          "diagram_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated diagram (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "cell_id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the associated cell (if applicable) (UUID)",
            "nullable": true,
            "maxLength": 36
          },
          "severity": {
            "type": "string",
            "enum": [
              "Unknown",
              "None",
              "Low",
              "Medium",
              "High",
              "Critical"
            ],
            "description": "Severity level of the threat"
          },
          "score": {
            "type": "number",
            "description": "Numeric score representing the risk or impact of the threat",
            "minimum": 0.0,
            "maximum": 10.0
          },
          "priority": {
            "type": "string",
            "description": "Priority level for addressing the threat",
            "maxLength": 16
          },
          "mitigated": {
            "type": "boolean",
            "description": "Whether the threat has been mitigated"
          },
          "status": {
            "type": "string",
            "description": "Current status of the threat",
            "maxLength": 256
          },
          "threat_type": {
            "type": "string",
            "description": "Type or category of the threat",
            "maxLength": 256
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional threat metadata",
            "nullable": true
          },
          "issue_uri": {
            "type": "string",
            "format": "uri",
            "description": "URL to an issue in an issue tracking system for this threat",
            "maxLength": 1024
          }
        },
        "required": [
          "name",
          "severity",
          "priority",
          "mitigated",
          "status",
          "threat_type"
        ]
      },
      "ThreatInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ThreatBase"
          }
        ],
        "description": "Input schema for creating/updating Threat"
      },
      "User": {
        "type": "object",
        "description": "Represents a user in the system",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "OAuth provider's unique identifier for the user (from primary provider)",
            "maxLength": 256
          },
          "email": {
            "type": "string",
            "description": "User's email address",
            "maxLength": 256
          },
          "name": {
            "type": "string",
            "description": "User's display name",
            "maxLength": 256
          },
          "picture": {
            "type": "string",
            "description": "URL to user's profile picture",
            "maxLength": 1024
          },
          "idp": {
            "type": "string",
            "description": "Identity provider used for current session",
            "maxLength": 100
          },
          "groups": {
            "type": "array",
            "description": "Groups the user belongs to (from identity provider)",
            "items": {
              "type": "string"
            }
          },
          "last_login": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of user's last login"
          }
        },
        "required": [
          "user_id",
          "email",
          "name"
        ]
      },
      "Participant": {
        "type": "object",
        "description": "A participant in a collaboration session",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "last_activity": {
            "type": "string",
            "format": "date-time",
            "description": "Last activity timestamp",
            "maxLength": 36
          },
          "permissions": {
            "type": "string",
            "enum": [
              "reader",
              "writer"
            ],
            "description": "Access permissions in the collaboration session"
          }
        },
        "required": [
          "user",
          "last_activity",
          "permissions"
        ]
      },
      "DeletionChallenge": {
        "type": "object",
        "description": "Challenge response for user account deletion",
        "required": [
          "challenge_text",
          "expires_at"
        ],
        "properties": {
          "challenge_text": {
            "type": "string",
            "description": "The exact challenge string that must be provided to confirm deletion"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "description": "When the challenge expires (3 minutes from issuance)"
          }
        }
      },
      "Repository": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the source code reference (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name for the source code reference",
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the referenced source code",
            "maxLength": 1024,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Source code repository type",
            "enum": [
              "git",
              "svn",
              "mercurial",
              "other"
            ],
            "maxLength": 16
          },
          "parameters": {
            "type": "object",
            "description": "repo-specific parameters for retrieving the source",
            "properties": {
              "refType": {
                "type": "string",
                "enum": [
                  "branch",
                  "tag",
                  "commit"
                ],
                "description": "Reference type (branch, tag, or commit)",
                "maxLength": 6
              },
              "refValue": {
                "type": "string",
                "description": "Reference value (branch name, tag value, or commit id)",
                "maxLength": 256
              },
              "subPath": {
                "type": "string",
                "description": "Sub-path within the repository",
                "maxLength": 256
              }
            },
            "required": [
              "refType",
              "refValue"
            ]
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional source metadata",
            "nullable": true
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "description": "URL to retrieve the referenced source code",
            "maxLength": 1024
          }
        },
        "required": [
          "uri"
        ],
        "example": {
          "id": "6ba7b810-1dad-11d1-8080-00c04fd430c8",
          "name": "GitHub Repo",
          "description": "Technical design document for the Example application",
          "type": "git",
          "parameters": {
            "refType": "branch",
            "refValue": "main"
          },
          "metadata": [],
          "uri": "https://github.com/ericfitz/tmi-ux.git"
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the note (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Note name",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "content": {
            "type": "string",
            "description": "Note content in markdown format",
            "minLength": 1,
            "maxLength": 65536,
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of note purpose or context",
            "maxLength": 1024,
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional note metadata",
            "nullable": true
          }
        },
        "required": [
          "name",
          "content"
        ],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Security Considerations",
          "content": "# Security Notes\n\n- Consider authentication requirements\n- Review encryption needs",
          "description": "Important security considerations for the threat model",
          "metadata": [
            {
              "key": "priority",
              "value": "high"
            }
          ]
        }
      },
      "Asset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the asset (UUID)",
            "maxLength": 36,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Asset name",
            "minLength": 1,
            "maxLength": 256,
            "pattern": "^[^<>\"'&]*$",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "description": {
            "type": "string",
            "description": "Description of the asset",
            "maxLength": 1024,
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Type of asset",
            "enum": [
              "data",
              "hardware",
              "software",
              "infrastructure",
              "service",
              "personnel"
            ],
            "maxLength": 64,
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "criticality": {
            "type": "string",
            "description": "Criticality level of the asset",
            "maxLength": 128,
            "nullable": true
          },
          "classification": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128
            },
            "description": "Classification tags for the asset",
            "maxItems": 50,
            "nullable": true
          },
          "sensitivity": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 128
            },
            "description": "Sensitivity labels for the asset",
            "maxItems": 50,
            "nullable": true
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "Key-value pairs for additional asset metadata",
            "nullable": true
          }
        },
        "required": [
          "name",
          "type"
        ],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Customer Database",
          "description": "Primary database containing customer information",
          "type": "data",
          "criticality": "high",
          "classification": [
            "confidential",
            "regulated"
          ],
          "sensitivity": [
            "pii",
            "financial"
          ],
          "metadata": [
            {
              "key": "data_retention",
              "value": "7_years"
            }
          ]
        }
      },
      "ExtendedAsset": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Asset"
          },
          {
            "type": "object",
            "properties": {
              "threat_model_id": {
                "type": "string",
                "format": "uuid",
                "description": "ID of the threat model this asset belongs to",
                "maxLength": 36
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "Creation timestamp (ISO3339)",
                "maxLength": 36
              },
              "modified_at": {
                "type": "string",
                "format": "date-time",
                "description": "Last modification timestamp (ISO3339)",
                "maxLength": 36
              }
            },
            "required": [
              "threat_model_id",
              "created_at",
              "modified_at"
            ]
          }
        ],
        "example": {
          "id": "6ba7b810-9dad-11d1-beef-00c04fd430c8",
          "name": "Customer Database",
          "description": "Primary database containing customer information",
          "type": "data",
          "criticality": "high",
          "classification": [
            "confidential",
            "regulated"
          ],
          "sensitivity": [
            "pii",
            "financial"
          ],
          "threat_model_id": "6ba7b810-9dad-11d1-beef-00c04fd430c7",
          "created_at": "2024-01-15T10:30:00Z",
          "modified_at": "2024-01-15T10:30:00Z"
        }
      }
    },
    "responses": {
      "Error": {
        "description": "Error response",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "authorizationError": {
                "summary": "Insufficient permissions for sub-resource access",
                "value": {
                  "error": "access_denied",
                  "error_description": "User does not have sufficient permissions to access this sub-resource",
                  "details": {
                    "required_role": "writer",
                    "user_role": "reader",
                    "threat_model_id": "550e8400-e29b-41d4-a716-446655440000",
                    "resource_type": "threat"
                  }
                }
              },
              "notFoundError": {
                "summary": "Sub-resource not found",
                "value": {
                  "error": "not_found",
                  "error_description": "The requested sub-resource does not exist or does not belong to the specified threat model",
                  "details": {
                    "resource_id": "550e8400-e29b-41d4-a716-446655440999",
                    "resource_type": "document",
                    "threat_model_id": "550e8400-e29b-41d4-a716-446655440000"
                  }
                }
              },
              "validationError": {
                "summary": "Invalid input data",
                "value": {
                  "error": "invalid_input",
                  "error_description": "The provided data does not meet validation requirements",
                  "details": {
                    "field_errors": [
                      {
                        "field": "name",
                        "message": "Name is required and cannot be empty"
                      },
                      {
                        "field": "uri",
                        "message": "URI must be a valid RFC 3986 URI, e.g. an HTTPS URL"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "paths": {
    "/saml/metadata": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get SAML service provider metadata",
        "description": "Returns the SP metadata XML for SAML configuration",
        "operationId": "getSAMLMetadata",
        "responses": {
          "200": {
            "description": "SAML metadata XML",
            "content": {
              "application/samlmetadata+xml": {
                "schema": {
                  "type": "string",
                  "format": "xml"
                }
              }
            }
          },
          "500": {
            "description": "Failed to generate metadata",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/saml/login": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Initiate SAML authentication",
        "description": "Starts SAML authentication flow by redirecting to IdP",
        "operationId": "initiateSAMLLogin",
        "parameters": [
          {
            "name": "client_callback",
            "in": "query",
            "required": false,
            "description": "Client callback URL to redirect after authentication",
            "schema": {
              "type": "string",
              "format": "uri"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to SAML IdP for authentication"
          },
          "500": {
            "description": "Failed to initiate SAML authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/saml/acs": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "SAML Assertion Consumer Service",
        "description": "Processes SAML responses from IdP after authentication",
        "operationId": "processSAMLResponse",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "SAMLResponse": {
                    "type": "string",
                    "description": "Base64-encoded SAML response"
                  },
                  "RelayState": {
                    "type": "string",
                    "description": "State parameter for CSRF protection"
                  }
                },
                "required": [
                  "SAMLResponse"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthTokenResponse"
                }
              }
            }
          },
          "302": {
            "description": "Redirect to client callback with token"
          },
          "400": {
            "description": "Invalid SAML response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/saml/slo": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "SAML Single Logout",
        "description": "Handles SAML logout requests from IdP",
        "operationId": "processSAMLLogout",
        "parameters": [
          {
            "name": "SAMLRequest",
            "in": "query",
            "required": true,
            "description": "Base64-encoded SAML logout request",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid SAML logout request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "SAML Single Logout (POST)",
        "description": "Handles SAML logout requests from IdP via POST",
        "operationId": "processSAMLLogoutPost",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "SAMLRequest": {
                    "type": "string",
                    "description": "Base64-encoded SAML logout request"
                  }
                },
                "required": [
                  "SAMLRequest"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid SAML logout request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  }
}