asyncapi: '3.0.0'

info:
  title: TMI WebSocket API
  version: '1.0.0'
  description: |
    AsyncAPI specification for the Collaborative Threat Modeling Interface (TMI) WebSocket messaging.
    This API enables real-time collaborative editing of threat model diagrams with role-based access control.

    ## Features
    - Real-time collaborative diagram editing
    - Role-based access control (reader/writer/owner permissions)
    - JWT token authentication
    - Session management with automatic cleanup
    - Diagram operation validation

    ## Connection Flow
    1. Authenticate with JWT token
    2. Validate access permissions for the diagram
    3. Join or create collaboration session
    4. Exchange real-time diagram operations
    5. Receive join/leave notifications from other participants

servers:
  development:
    host: localhost:8080
    protocol: ws
    description: Local development server
    security:
      - jwtAuth: []

  production:
    host: api.tmi.example.com
    protocol: wss
    description: Production server with TLS
    security:
      - jwtAuth: []

channels:
  '/threat_models/{threat_model_id}/diagrams/{diagram_id}/ws':
    address: '/threat_models/{threat_model_id}/diagrams/{diagram_id}/ws'
    description: |
      WebSocket endpoint for collaborative diagram editing. Each diagram has its own collaboration session.
      Users must have at least reader permissions on the parent threat model to connect.

      ## Session Management
      - Sessions are automatically created when first client connects
      - Sessions include automatic cleanup after 15 minutes of inactivity
      - Multiple clients can participate in the same session simultaneously
      - Each session tracks active participants and their join times
    parameters:
      threat_model_id:
        description: Unique identifier of the threat model (matches OpenAPI path parameter)  
        schema:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
      diagram_id:
        description: Unique identifier of the diagram
        schema:
          type: string
          format: uuid
          example: '6ba7b810-9dad-11d1-80b4-00c04fd430c8'
    messages:
      diagramOperationMessage:
        $ref: '#/components/messages/DiagramOperationMessage'
      presenterRequestMessage:
        $ref: '#/components/messages/PresenterRequestMessage'
      presenterDeniedMessage:
        $ref: '#/components/messages/PresenterDeniedMessage'
      changePresenterMessage:
        $ref: '#/components/messages/ChangePresenterMessage'
      currentPresenterMessage:
        $ref: '#/components/messages/CurrentPresenterMessage'
      presenterCursorMessage:
        $ref: '#/components/messages/PresenterCursorMessage'
      presenterSelectionMessage:
        $ref: '#/components/messages/PresenterSelectionMessage'
      authorizationDeniedMessage:
        $ref: '#/components/messages/AuthorizationDeniedMessage'
      stateCorrectionMessage:
        $ref: '#/components/messages/StateCorrectionMessage'
      diagramStateSyncMessage:
        $ref: '#/components/messages/DiagramStateSyncMessage'
      resyncRequestMessage:
        $ref: '#/components/messages/ResyncRequestMessage'
      resyncResponseMessage:
        $ref: '#/components/messages/ResyncResponseMessage'
      historyOperationMessage:
        $ref: '#/components/messages/HistoryOperationMessage'
      undoRequestMessage:
        $ref: '#/components/messages/UndoRequestMessage'
      redoRequestMessage:
        $ref: '#/components/messages/RedoRequestMessage'
      participantsUpdateMessage:
        $ref: '#/components/messages/ParticipantsUpdateMessage'
      participantJoinedMessage:
        $ref: '#/components/messages/ParticipantJoinedMessage'
      participantLeftMessage:
        $ref: '#/components/messages/ParticipantLeftMessage'
      removeParticipantMessage:
        $ref: '#/components/messages/RemoveParticipantMessage'
      errorMessage:
        $ref: '#/components/messages/ErrorMessage'
      operationRejectedMessage:
        $ref: '#/components/messages/OperationRejectedMessage'

operations:
  sendDiagramOperation:
    action: send
    channel:
      $ref: '#/channels/~1threat_models~1{id}~1diagrams~1{diagram_id}~1ws'
    summary: Send a diagram operation
    description: |
      Send a diagram operation (add, update, or remove) to be applied to the diagram
      and broadcasted to all connected participants.

      ## Rate Limits
      - Message size limit: 4KB per message
      - Operation size limit: 50KB per operation
      - Write timeout: 10 seconds per message
    messages:
      - $ref: '#/components/messages/DiagramOperationMessage'
      - $ref: '#/components/messages/PresenterRequestMessage'
      - $ref: '#/components/messages/ChangePresenterMessage'
      - $ref: '#/components/messages/PresenterCursorMessage'
      - $ref: '#/components/messages/PresenterSelectionMessage'
      - $ref: '#/components/messages/ResyncRequestMessage'
      - $ref: '#/components/messages/UndoRequestMessage'
      - $ref: '#/components/messages/RedoRequestMessage'
      - $ref: '#/components/messages/RemoveParticipantMessage'

  receiveDiagramEvents:
    action: receive
    channel:
      $ref: '#/channels/~1threat_models~1{id}~1diagrams~1{diagram_id}~1ws'
    summary: Receive diagram events
    description: |
      Receive real-time events including diagram operations from other users,
      join/leave notifications, and session updates.

      ## Connection Management
      - Read timeout: 60 seconds with ping/pong keepalive
      - Automatic reconnection recommended for production clients
      - Sessions persist for up to 15 minutes after last activity
    messages:
      - $ref: '#/components/messages/DiagramOperationMessage'
      - $ref: '#/components/messages/PresenterDeniedMessage'
      - $ref: '#/components/messages/CurrentPresenterMessage'
      - $ref: '#/components/messages/PresenterCursorMessage'
      - $ref: '#/components/messages/PresenterSelectionMessage'
      - $ref: '#/components/messages/AuthorizationDeniedMessage'
      - $ref: '#/components/messages/StateCorrectionMessage'
      - $ref: '#/components/messages/ResyncResponseMessage'
      - $ref: '#/components/messages/HistoryOperationMessage'
      - $ref: '#/components/messages/ParticipantsUpdateMessage'
      - $ref: '#/components/messages/ParticipantJoinedMessage'
      - $ref: '#/components/messages/ParticipantLeftMessage'
      - $ref: '#/components/messages/ErrorMessage'
      - $ref: '#/components/messages/OperationRejectedMessage'

components:
  parameters:
    ThreatModelId:
      description: Unique identifier of the threat model (parameter name 'id' in URL path)
      schema:
        type: string
        format: uuid
        example: '550e8400-e29b-41d4-a716-446655440000'

    DiagramId:
      description: Unique identifier of the diagram
      schema:
        type: string
        format: uuid
        example: '6ba7b810-9dad-11d1-80b4-00c04fd430c8'

  messages:
    DiagramOperationMessage:
      name: DiagramOperationMessage
      title: Diagram Operation Message
      summary: Cell mutation operation message with conflict resolution support
      description: |
        Enhanced message for collaborative editing operations. Supports batch operations,
        sequence numbers for conflict resolution, and operation IDs for idempotency.
        This mirrors existing REST PATCH operations for consistency.
      payload:
        $ref: '#/components/schemas/DiagramOperationPayload'
      examples:
        - name: BatchCellOperations
          summary: Example of batch cell operations
          payload:
            message_type: diagram_operation
            initiating_user:
              user_id: alice@example.com
              email: alice@example.com
              displayName: Alice Johnson
            operation_id: 123e4567-e89b-12d3-a456-426614174000
            sequence_number: 12345
            operation:
              type: patch
              cells:
                - id: cell-uuid-1
                  operation: add
                  data:
                    id: cell-uuid-1
                    shape: process
                    x: 100
                    y: 150
                    width: 120
                    height: 80
                    label: User Authentication
                - id: cell-uuid-2
                  operation: update
                  data:
                    x: 110
                    y: 160
                    label: Updated Process

    PresenterRequestMessage:
      name: PresenterRequestMessage
      title: Presenter Request Message
      summary: Request to become the active presenter
      description: |
        Message sent by users requesting to become the active presenter. Only the session
        manager can approve presenter requests.
      payload:
        $ref: '#/components/schemas/PresenterRequestPayload'
      examples:
        - name: RequestPresenter
          summary: Example of requesting presenter mode
          payload:
            message_type: presenter_request

    PresenterDeniedMessage:
      name: PresenterDeniedMessage
      title: Presenter Request Denied Message
      summary: Notification that presenter request was denied
      description: |
        Message sent by server to requester when presenter request is denied by the host.
        Only sent to the requesting user.
      payload:
        $ref: '#/components/schemas/PresenterDeniedPayload'
      examples:
        - name: PresenterDenied
          summary: Example of presenter request denial
          payload:
            message_type: presenter_denied
            current_presenter:
              user_id: host@example.com
              email: host@example.com
              displayName: Host Manager

    ChangePresenterMessage:
      name: ChangePresenterMessage
      title: Change Presenter Message
      summary: Host changes the active presenter
      description: |
        Message sent by host to change the active presenter. Only accepted
        from the host.
      payload:
        $ref: '#/components/schemas/ChangePresenterPayload'
      examples:
        - name: ChangePresenter
          summary: Example of host changing presenter
          payload:
            message_type: change_presenter
            initiating_user:
              user_id: host@example.com
              email: host@example.com
              displayName: Host Manager
            new_presenter:
              user_id: alice@example.com
              email: alice@example.com
              displayName: Alice Johnson

    CurrentPresenterMessage:
      name: CurrentPresenterMessage
      title: Current Presenter Broadcast
      summary: Server broadcasts current presenter to all clients
      description: |
        Message broadcast by server to all session participants when the presenter changes.
        Keeps all clients synchronized on who the active presenter is.
      payload:
        $ref: '#/components/schemas/CurrentPresenterPayload'
      examples:
        - name: CurrentPresenter
          summary: Example of current presenter broadcast
          payload:
            message_type: current_presenter
            current_presenter:
              user_id: alice@example.com
              email: alice@example.com
              displayName: Alice Johnson

    PresenterCursorMessage:
      name: PresenterCursorMessage
      title: Presenter Cursor Position
      summary: Cursor position from active presenter
      description: |
        Message sent by active presenter to share cursor position with all participants.
        Only the current presenter should send these messages.
      payload:
        $ref: '#/components/schemas/PresenterCursorPayload'
      examples:
        - name: PresenterCursor
          summary: Example of presenter cursor position
          payload:
            message_type: presenter_cursor
            cursor_position:
              x: 100
              y: 200

    PresenterSelectionMessage:
      name: PresenterSelectionMessage
      title: Presenter Selection State
      summary: Selection state from active presenter
      description: |
        Message sent by active presenter to share selection state with all participants.
        Only the current presenter should send these messages.
      payload:
        $ref: '#/components/schemas/PresenterSelectionPayload'
      examples:
        - name: PresenterSelection
          summary: Example of presenter selection
          payload:
            message_type: presenter_selection
            selected_cells:
              - cell-uuid-1
              - cell-uuid-2

    AuthorizationDeniedMessage:
      name: AuthorizationDeniedMessage
      title: Authorization Denied
      summary: Notification that operation was denied due to insufficient permissions
      description: |
        Message sent to users who attempt operations they don't have permission for.
        Includes the original operation ID for client tracking.
      payload:
        $ref: '#/components/schemas/AuthorizationDeniedPayload'
      examples:
        - name: AuthorizationDenied
          summary: Example of authorization denial
          payload:
            message_type: authorization_denied
            original_operation_id: 123e4567-e89b-12d3-a456-426614174000
            reason: insufficient_permissions

    StateCorrectionMessage:
      name: StateCorrectionMessage
      title: State Correction
      summary: Server sends state correction notification with update vector
      description: |
        Message sent by server to notify clients that diagram state has changed and they
        should resynchronize with the server. Used in two primary scenarios:

        ## REST API Updates
        When a diagram is updated via REST API (not through WebSocket), all connected
        WebSocket clients receive a state_correction message containing the new update_vector.
        This signals them to fetch the latest diagram state via REST API and compare
        update vectors to determine if they need to resync.

        ## Conflict Resolution
        When WebSocket operations result in conflicts or invalid state, affected clients
        receive a state_correction message with the current authoritative update_vector.
        Clients should compare this with their local state and resync if necessary.

        ## Client Handling
        Upon receiving a state_correction message, clients should:
        1. Compare the provided update_vector with their local diagram state
        2. If the server's update_vector is higher, fetch the latest diagram via REST API
        3. Update their local state and resume normal operations
      payload:
        $ref: '#/components/schemas/StateCorrectionPayload'
      examples:
        - name: RestApiUpdateNotification
          summary: Notification of REST API update with new update vector
          payload:
            message_type: state_correction
            update_vector: 15
        - name: ConflictResolution
          summary: Conflict resolution with current authoritative update vector
          payload:
            message_type: state_correction
            update_vector: 23

    DiagramStateSyncMessage:
      name: DiagramStateSyncMessage
      title: Initial Diagram State Synchronization
      summary: Server sends complete diagram state upon client connection
      description: |
        Message sent by server immediately after a client connects to a WebSocket
        collaboration session. This ensures the client has the current server state
        before sending any operations.

        ## Purpose
        Prevents "cell_already_exists" validation errors that occur when clients
        attempt to send operations based on stale REST API cached state. By receiving
        the current diagram state (including update_vector and all cells), clients can:
        1. Detect if their cached state is out of sync
        2. Compare update vectors to determine staleness
        3. Update their local state before sending operations

        ## When Sent
        - Immediately after client successfully joins WebSocket session
        - Sent before any other initial messages (current_presenter, participants_update)
        - Sent only to the newly connected client (not broadcasted)

        ## Client Handling
        Upon receiving a diagram_state_sync message, clients should:
        1. Compare the received update_vector with their local cached version
        2. If update_vector differs:
           - Option A: Use the received cells array to update local state
           - Option B: Fetch fresh diagram via REST API for complete synchronization
        3. Update local state before sending any diagram_operation messages
        4. If cells array is empty, the diagram has no cells yet (new diagram)

        ## Performance Considerations
        For diagrams with many cells (100+), the cells array may be large. Clients
        should handle this message asynchronously and may choose to fetch via REST API
        instead of processing the embedded cells array.
      payload:
        $ref: '#/components/schemas/DiagramStateSyncPayload'
      examples:
        - name: InitialStateWithCells
          summary: Initial state sync with existing diagram cells
          payload:
            message_type: diagram_state_sync
            diagram_id: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
            update_vector: 42
            cells:
              - id: 123e4567-e89b-12d3-a456-426614174000
                shape: process
                x: 100
                y: 100
                width: 120
                height: 60
                label: Authentication Service
              - id: 987fcdeb-51a2-43f7-8a9b-426614174000
                shape: edge
                source: 123e4567-e89b-12d3-a456-426614174000
                target: 456e7890-abcd-12d3-a456-426614174000
        - name: InitialStateEmpty
          summary: Initial state sync for new diagram with no cells
          payload:
            message_type: diagram_state_sync
            diagram_id: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
            update_vector: 1
            cells: []

    ResyncRequestMessage:
      name: ResyncRequestMessage
      title: Resync Request
      summary: Client requests full diagram synchronization
      description: |
        Message sent by clients when they detect they are out of sync and need
        to reload the complete diagram state.
      payload:
        $ref: '#/components/schemas/ResyncRequestPayload'
      examples:
        - name: ResyncRequest
          summary: Example of resync request
          payload:
            message_type: resync_request

    ResyncResponseMessage:
      name: ResyncResponseMessage
      title: Resync Response
      summary: Server response to resync request
      description: |
        Message sent by server in response to resync requests. Tells the client
        to use REST API for authoritative diagram state recovery.
      payload:
        $ref: '#/components/schemas/ResyncResponsePayload'
      examples:
        - name: ResyncResponse
          summary: Example of resync response
          payload:
            message_type: resync_response
            method: rest_api
            diagram_id: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
            threat_model_id: 550e8400-e29b-41d4-a716-446655440000

    HistoryOperationMessage:
      name: HistoryOperationMessage
      title: History Operation Result
      summary: Server response to undo/redo operations
      description: |
        Message sent by server in response to undo/redo requests. May indicate successful
        operation requiring resync, or that no operations are available to undo/redo.
      payload:
        $ref: '#/components/schemas/HistoryOperationPayload'
      examples:
        - name: HistoryOperationSuccess
          summary: Example of successful history operation
          payload:
            message_type: history_operation
            operation_type: undo
            message: resync_required
        - name: NoOperationsAvailable
          summary: Example when no undo operations are available
          payload:
            message_type: history_operation
            operation_type: undo
            message: no_operations_to_undo

    UndoRequestMessage:
      name: UndoRequestMessage
      title: Undo Request
      summary: Client requests undo operation
      description: |
        Message sent by clients to request undoing the last operation.
        Requires mutation permissions.
      payload:
        $ref: '#/components/schemas/UndoRequestPayload'
      examples:
        - name: UndoRequest
          summary: Example of undo request
          payload:
            message_type: undo_request
            initiating_user:
              user_id: alice@example.com
              email: alice@example.com
              displayName: Alice Johnson

    RedoRequestMessage:
      name: RedoRequestMessage
      title: Redo Request
      summary: Client requests redo operation
      description: |
        Message sent by clients to request redoing the last undone operation.
        Requires mutation permissions.
      payload:
        $ref: '#/components/schemas/RedoRequestPayload'
      examples:
        - name: RedoRequest
          summary: Example of redo request
          payload:
            message_type: redo_request
            initiating_user:
              user_id: alice@example.com
              email: alice@example.com
              displayName: Alice Johnson

    ParticipantJoinedMessage:
      name: ParticipantJoinedMessage
      title: Participant Joined Message
      summary: Notification when a participant joins a session
      description: |
        Sent to all participants when a new user joins the collaboration session.
        Uses the standard message_type pattern for consistency.
      payload:
        $ref: '#/components/schemas/ParticipantJoinedPayload'
      examples:
        - name: UserJoinedSession
          summary: Example of user joining collaboration session
          payload:
            message_type: participant_joined
            joined_user:
              user_id: john.doe@example.com
              email: john.doe@example.com
              displayName: John Doe
            timestamp: '2024-01-15T10:30:00Z'

    ParticipantLeftMessage:
      name: ParticipantLeftMessage
      title: Participant Left Message
      summary: Notification when a participant leaves a session
      description: |
        Sent to all remaining participants when a user leaves the collaboration session.
        Uses the standard message_type pattern for consistency.
      payload:
        $ref: '#/components/schemas/ParticipantLeftPayload'
      examples:
        - name: UserLeftSession
          summary: Example of user leaving collaboration session
          payload:
            message_type: participant_left
            departed_user:
              user_id: jane.smith@example.com
              email: jane.smith@example.com
              displayName: Jane Smith
            timestamp: '2024-01-15T11:45:00Z'

    RemoveParticipantMessage:
      name: RemoveParticipantMessage
      title: Remove Participant Message
      summary: Host removes a participant from collaboration session
      description: |
        Message sent by the host to remove a specific participant from the collaboration session.
        Only the host can send this message. When processed, the server will:
        1. Disconnect the specified user from the current session
        2. Add the user to a session-specific deny list
        3. Broadcast a participants_update message to all remaining participants
        
        The removed participant will not be able to rejoin the same session but can
        participate in other collaboration sessions.
      payload:
        $ref: '#/components/schemas/RemoveParticipantPayload'
      examples:
        - name: HostRemovesParticipant
          summary: Example of host removing a participant
          payload:
            message_type: remove_participant
            removed_user:
              user_id: disruptive-user@example.com
              email: disruptive-user@example.com
              displayName: Disruptive User


    ErrorMessage:
      name: ErrorMessage
      title: Error Message
      summary: General error message for WebSocket errors
      description: |
        Sent when WebSocket errors occur such as authentication failures,
        session errors, or other operational errors. Follows the standard
        message_type pattern with additional error details.
      payload:
        $ref: '#/components/schemas/ErrorPayload'
      examples:
        - name: UnauthorizedError
          summary: Example of unauthorized access error
          payload:
            message_type: error
            error: unauthorized
            message: You don't have sufficient permissions to collaborate on this diagram
            code: insufficient_permissions
            timestamp: '2024-01-15T14:30:00Z'
        - name: SessionInvalidError
          summary: Example of invalid session error
          payload:
            message_type: error
            error: session_invalid
            message: The collaboration session ID is invalid or expired
            code: session_mismatch
            details:
              new_session_id: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
            timestamp: '2024-01-15T14:35:00Z'

    OperationRejectedMessage:
      name: OperationRejectedMessage
      title: Operation Rejected Message
      summary: Notification sent to operation originator when operation is rejected
      description: |
        Sent exclusively to the client that originated a diagram operation when
        the server rejects the operation due to validation failure, conflicts,
        or other reasons. This provides explicit feedback to the originating
        client that their operation was not applied or broadcast.

        **Key behaviors:**
        - Only sent to the originating client (never broadcast to others)
        - Includes the original operation_id for correlation
        - Provides structured reason codes for programmatic handling
        - May include the sequence number if one was assigned before rejection

        **Reason codes:**
        - `validation_failed`: Operation structure or data failed validation
        - `conflict_detected`: Operation conflicts with current diagram state
        - `no_state_change`: Operation would result in no actual state change (idempotent no-op)
        - `diagram_not_found`: Target diagram no longer exists
        - `permission_denied`: User lacks permission for this operation
        - `invalid_operation_type`: Operation type is not recognized
        - `empty_operation`: Operation contains no cell operations
      payload:
        $ref: '#/components/schemas/OperationRejectedPayload'
      examples:
        - name: ConflictDetected
          summary: Operation rejected due to concurrent modification conflict
          payload:
            message_type: operation_rejected
            operation_id: 123e4567-e89b-12d3-a456-426614174000
            sequence_number: 12345
            reason: conflict_detected
            message: Cell 'cell-uuid-1' was modified by another user before your operation could be applied
            affected_cells:
              - cell-uuid-1
            requires_resync: true
            timestamp: '2024-01-15T14:30:00Z'
        - name: ValidationFailed
          summary: Operation rejected due to invalid data
          payload:
            message_type: operation_rejected
            operation_id: 789e4567-e89b-12d3-a456-426614174999
            reason: validation_failed
            message: Cell operation validation failed - cell ID mismatch
            details: "cell data ID (cell-uuid-1) must match operation ID (cell-uuid-2)"
            requires_resync: false
            timestamp: '2024-01-15T14:32:00Z'
        - name: NoStateChange
          summary: Operation rejected because it would result in no state change
          payload:
            message_type: operation_rejected
            operation_id: 456e4567-e89b-12d3-a456-426614174333
            sequence_number: 12346
            reason: no_state_change
            message: Operation resulted in no state changes (idempotent or no-op)
            requires_resync: false
            timestamp: '2024-01-15T14:33:00Z'

    ParticipantsUpdateMessage:
      name: ParticipantsUpdateMessage
      title: Participants Update Message
      summary: Complete list of session participants with roles
      description: |
        Sent to all participants whenever the participant list changes. Provides
        a complete snapshot of all current participants, their permissions, and
        roles (host, presenter). This eliminates the need for clients
        to poll the REST API for participant information.
      payload:
        $ref: '#/components/schemas/ParticipantsUpdatePayload'
      examples:
        - name: ParticipantsListUpdate
          summary: Example of participants update after user joined
          payload:
            message_type: participants_update
            participants:
              - user:
                  user_id: auth0|507f1f77bcf86cd799439011
                  name: Alice Johnson
                  email: alice@example.com
                permissions: writer
                last_activity: '2024-01-15T10:30:00Z'
              - user:
                  user_id: auth0|507f191e810c19729de860ea
                  name: Bob Smith
                  email: bob@example.com
                permissions: reader
                last_activity: '2024-01-15T10:35:00Z'
              - user:
                  user_id: auth0|507f1f77bcf86cd799439012
                  name: Charlie Brown
                  email: charlie@example.com
                permissions: writer
                last_activity: '2024-01-15T10:40:00Z'
            host: auth0|507f1f77bcf86cd799439011
            current_presenter: auth0|507f191e810c19729de860ea

  schemas:
    DiagramOperationPayload:
      type: object
      description: Enhanced payload for collaborative diagram operations with conflict resolution
      properties:
        message_type:
          const: diagram_operation
        initiating_user:
          $ref: '#/components/schemas/User'
        operation_id:
          type: string
          format: uuid
          description: Client-generated UUID for idempotency and tracking
          example: 123e4567-e89b-12d3-a456-426614174000
        sequence_number:
          type: integer
          description: Server-assigned sequence number for operation ordering
          minimum: 1
          example: 12345
        operation:
          $ref: '#/components/schemas/CellPatchOperation'
      required:
        - message_type
        - initiating_user
        - operation_id
        - operation
      additionalProperties: false

    User:
      type: object
      description: |
        User information from JWT claims. Authorization uses a two-step matching process:
        1. First attempts to match user_id as IdP user identifier (OAuth sub, SAML NameID/subject-id/pairwise-id)
        2. Falls back to email matching if no IdP user ID match is found

        This approach prioritizes IdP-provided user identifiers while maintaining backward compatibility
        with email-based authorization.
      properties:
        user_id:
          type: string
          description: |
            Primary user identifier from JWT 'sub' claim (IdP-provided unique identifier).
            This is the preferred and immutable identifier for user authorization.
            Format varies by IdP: OAuth providers use 'sub' claim, SAML uses NameID/subject-id/pairwise-id.
          example: auth0|507f1f77bcf86cd799439011
        email:
          type: string
          description: |
            User email address from JWT 'email' claim.
            Used as fallback identifier for authorization when IdP user ID matching fails.
          example: alice@example.com
        displayName:
          type: string
          description: User display name from JWT 'name' claim (optional)
          example: Alice Johnson
      anyOf:
        - required: [user_id]
        - required: [email]
      additionalProperties: false

    CellPatchOperation:
      type: object
      description: Mirrors REST PATCH operations for cells with batch support
      properties:
        type:
          const: patch
        cells:
          type: array
          description: Array of cell operations to perform
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Cell ID for the operation
              operation:
                type: string
                enum: [add, update, remove]
                description: Operation type to perform on the cell
              data:
                $ref: '#/components/schemas/Cell'
            required:
              - id
              - operation
            allOf:
              - if:
                  properties:
                    operation:
                      enum: [add, update]
                then:
                  required:
                    - data
              - if:
                  properties:
                    operation:
                      const: remove
                then:
                  properties:
                    data:
                      not: {}
          minItems: 1
      required:
        - type
        - cells
      additionalProperties: false

    Cell:
      oneOf:
        - $ref: 'tmi-openapi.json#/components/schemas/Node'
        - $ref: 'tmi-openapi.json#/components/schemas/Edge'
      description: |
        Represents a diagram cell following AntV X6 structure.
        Cells can be either nodes (process, store, actor, etc.) or edges (connectors).
        This is a union type that references the full Node and Edge schemas from the OpenAPI spec.

    PresenterRequestPayload:
      type: object
      description: Request to become the active presenter
      properties:
        message_type:
          const: presenter_request
      required:
        - message_type
      additionalProperties: false

    PresenterDeniedPayload:
      type: object
      description: Notification that presenter request was denied
      properties:
        message_type:
          const: presenter_denied
        current_presenter:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - current_presenter
      additionalProperties: false

    ChangePresenterPayload:
      type: object
      description: Host changes the active presenter
      properties:
        message_type:
          const: change_presenter
        initiating_user:
          $ref: '#/components/schemas/User'
        new_presenter:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - initiating_user
        - new_presenter
      additionalProperties: false

    CurrentPresenterPayload:
      type: object
      description: Server broadcasts current presenter to all clients
      properties:
        message_type:
          const: current_presenter
        current_presenter:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - current_presenter
      additionalProperties: false

    PresenterCursorPayload:
      type: object
      description: Cursor position from active presenter
      properties:
        message_type:
          const: presenter_cursor
        cursor_position:
          type: object
          description: Cursor coordinates
          properties:
            x:
              type: number
              description: X coordinate
              example: 100
            y:
              type: number
              description: Y coordinate
              example: 200
          required:
            - x
            - y
          additionalProperties: false
      required:
        - message_type
        - cursor_position
      additionalProperties: false

    PresenterSelectionPayload:
      type: object
      description: Selection state from active presenter
      properties:
        message_type:
          const: presenter_selection
        selected_cells:
          type: array
          description: Array of selected cell IDs
          items:
            type: string
            format: uuid
          example:
            - cell-uuid-1
            - cell-uuid-2
      required:
        - message_type
        - selected_cells
      additionalProperties: false

    AuthorizationDeniedPayload:
      type: object
      description: Notification of unauthorized operation attempt
      properties:
        message_type:
          const: authorization_denied
        original_operation_id:
          type: string
          format: uuid
          description: Operation ID that was denied
          example: 123e4567-e89b-12d3-a456-426614174000
        reason:
          type: string
          description: Reason for denial
          enum: [insufficient_permissions, read_only_user, invalid_user]
          example: insufficient_permissions
      required:
        - message_type
        - original_operation_id
        - reason
      additionalProperties: false

    StateCorrectionPayload:
      type: object
      description: |
        Server sends state correction notification with the current authoritative
        update vector. Clients should compare this with their local state and
        resync if the server's update vector is higher than their local version.
      properties:
        message_type:
          const: state_correction
        update_vector:
          type: integer
          format: int64
          minimum: 0
          description: |
            Current authoritative update vector for the diagram. Clients should
            compare this with their local update vector and fetch the latest
            diagram state via REST API if the server's vector is higher.
          example: 15
      required:
        - message_type
        - update_vector
      additionalProperties: false

    DiagramStateSyncPayload:
      type: object
      description: |
        Server sends complete diagram state to newly connected clients to ensure
        synchronization before operations are sent. Contains the current update_vector
        and full cells array for immediate state comparison and update.
      properties:
        message_type:
          const: diagram_state_sync
        diagram_id:
          type: string
          format: uuid
          description: |
            UUID of the diagram being synchronized. Matches the diagram_id from the
            WebSocket connection URL path parameter.
          example: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        update_vector:
          type: integer
          format: int64
          minimum: 0
          nullable: true
          description: |
            Current authoritative update vector for the diagram. Clients should
            compare this with their locally cached update_vector from REST API fetch.
            If different, the client's cached state is stale and should be updated.
            May be null for diagrams that have never been modified.
          example: 42
        cells:
          type: array
          description: |
            Complete array of diagram cells (nodes and edges) in current server state.
            Clients can use this to update their local state without an additional REST
            API call. For large diagrams (100+ cells), clients may choose to ignore
            this array and fetch via REST API instead for better performance.
          items:
            $ref: '#/components/schemas/Cell'
          example:
            - id: 123e4567-e89b-12d3-a456-426614174000
              shape: process
              x: 100
              y: 100
            - id: 987fcdeb-51a2-43f7-8a9b-426614174000
              shape: edge
              source: 123e4567-e89b-12d3-a456-426614174000
              target: 456e7890-abcd-12d3-a456-426614174000
      required:
        - message_type
        - diagram_id
        - cells
      additionalProperties: false

    ResyncRequestPayload:
      type: object
      description: Client requests full diagram synchronization
      properties:
        message_type:
          const: resync_request
      required:
        - message_type
      additionalProperties: false

    ResyncResponsePayload:
      type: object
      description: Server response to resync request
      properties:
        message_type:
          const: resync_response
        method:
          type: string
          description: Recommended resync method
          enum: [rest_api]
          example: rest_api
        diagram_id:
          type: string
          format: uuid
          description: Diagram ID to resync
          example: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        threat_model_id:
          type: string
          format: uuid
          description: Threat model ID containing the diagram
          example: 550e8400-e29b-41d4-a716-446655440000
      required:
        - message_type
        - method
        - diagram_id
      additionalProperties: false

    HistoryOperationPayload:
      type: object
      description: Server response to undo/redo operations
      properties:
        message_type:
          const: history_operation
        operation_type:
          type: string
          enum: [undo, redo]
          description: Type of history operation performed
        message:
          type: string
          enum: [resync_required, no_operations_to_undo, no_operations_to_redo]
          description: Result of the history operation
      required:
        - message_type
        - operation_type
        - message
      additionalProperties: false

    UndoRequestPayload:
      type: object
      description: Client requests undo operation
      properties:
        message_type:
          const: undo_request
        initiating_user:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - initiating_user
      additionalProperties: false

    RedoRequestPayload:
      type: object
      description: Client requests redo operation
      properties:
        message_type:
          const: redo_request
        initiating_user:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - initiating_user
      additionalProperties: false

    ParticipantsUpdatePayload:
      type: object
      description: Complete participant list with roles and permissions
      properties:
        message_type:
          const: participants_update
        participants:
          type: array
          description: List of all current participants
          items:
            type: object
            properties:
              user:
                type: object
                description: |
                  User information with IdP-provided identifiers.
                  user_id is the primary identifier for authorization matching.
                properties:
                  user_id:
                    type: string
                    description: |
                      Primary user identifier from JWT 'sub' claim (IdP-provided unique identifier, immutable).
                      This is the preferred identifier for user authorization and matching.
                    example: auth0|507f1f77bcf86cd799439011
                  name:
                    type: string
                    description: User display name from JWT 'name' claim
                    example: Alice Johnson
                  email:
                    type: string
                    description: |
                      User email address from JWT 'email' claim.
                      Used as fallback identifier for authorization when IdP user ID matching fails.
                    example: alice@example.com
                required:
                  - user_id
                  - name
                  - email
              permissions:
                type: string
                enum: [reader, writer]
                description: User's permissions for the collaboration session
              last_activity:
                type: string
                format: date-time
                description: Last activity timestamp from the user
            required:
              - user
              - permissions
              - last_activity
        host:
          type: string
          description: User ID of the host
          example: alice@example.com
        current_presenter:
          type: string
          description: User ID of the current presenter (may be empty)
          example: bob@example.com
      required:
        - message_type
        - participants
        - host
        - current_presenter
      additionalProperties: false

    ParticipantJoinedPayload:
      type: object
      description: Notification when a participant joins a session
      properties:
        message_type:
          const: participant_joined
        joined_user:
          $ref: '#/components/schemas/User'
        timestamp:
          type: string
          format: date-time
          description: UTC timestamp when the event occurred
          example: '2024-01-15T10:30:00Z'
      required:
        - message_type
        - joined_user
        - timestamp
      additionalProperties: false

    ParticipantLeftPayload:
      type: object
      description: Notification when a participant leaves a session
      properties:
        message_type:
          const: participant_left
        departed_user:
          $ref: '#/components/schemas/User'
        timestamp:
          type: string
          format: date-time
          description: UTC timestamp when the event occurred
          example: '2024-01-15T11:45:00Z'
      required:
        - message_type
        - departed_user
        - timestamp
      additionalProperties: false

    RemoveParticipantPayload:
      type: object
      description: Host removes a participant from collaboration session
      properties:
        message_type:
          const: remove_participant
        removed_user:
          $ref: '#/components/schemas/User'
      required:
        - message_type
        - removed_user
      additionalProperties: false


    ErrorPayload:
      type: object
      description: General error message payload
      properties:
        message_type:
          const: error
        error:
          type: string
          description: Error code/type
          example: unauthorized
        message:
          type: string
          description: Human-readable error message
          example: You don't have sufficient permissions to collaborate on this diagram
        code:
          type: string
          description: Optional specific error code for categorization
          example: insufficient_permissions
        details:
          type: object
          description: Optional additional error details
          additionalProperties: true
          example:
            new_session_id: 6ba7b810-9dad-11d1-80b4-00c04fd430c8
        timestamp:
          type: string
          format: date-time
          description: UTC timestamp when the error occurred
          example: '2024-01-15T14:30:00Z'
      required:
        - message_type
        - error
        - message
        - timestamp
      additionalProperties: false

    OperationRejectedPayload:
      type: object
      description: |
        Notification payload sent exclusively to the operation originator when
        their diagram operation is rejected. Provides structured feedback about
        why the operation was not applied or broadcast.
      properties:
        message_type:
          const: operation_rejected
        operation_id:
          type: string
          format: uuid
          description: Client-generated operation ID from the rejected operation
          example: 123e4567-e89b-12d3-a456-426614174000
        sequence_number:
          type: integer
          description: Server-assigned sequence number (if assigned before rejection)
          minimum: 1
          example: 12345
        reason:
          type: string
          description: Structured reason code for the rejection
          enum:
            - validation_failed
            - conflict_detected
            - no_state_change
            - diagram_not_found
            - permission_denied
            - invalid_operation_type
            - empty_operation
          example: conflict_detected
        message:
          type: string
          description: Human-readable description of the rejection
          example: Cell 'cell-uuid-1' was modified by another user before your operation could be applied
        details:
          type: string
          description: Optional additional technical details about the rejection
          example: "cell data ID (cell-uuid-1) must match operation ID (cell-uuid-2)"
        affected_cells:
          type: array
          description: List of cell IDs affected by the rejected operation
          items:
            type: string
            format: uuid
          example:
            - cell-uuid-1
            - cell-uuid-2
        requires_resync:
          type: boolean
          description: |
            Indicates whether the client should perform a full state resync.
            - true: Conflict detected, client state may be out of sync (send resync_request)
            - false: Validation or no-op, client state is likely still valid
          example: true
        timestamp:
          type: string
          format: date-time
          description: UTC timestamp when the operation was rejected
          example: '2024-01-15T14:30:00Z'
      required:
        - message_type
        - operation_id
        - reason
        - message
        - requires_resync
        - timestamp
      additionalProperties: false

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication for WebSocket connections. Authentication is handled by 
        server-side middleware that validates JWT tokens provided as query parameters.

        ## Authentication Flow
        1. Client includes JWT token as query parameter: `?token=eyJ0eXAiOiJKV1Q...`
        2. Server middleware validates token and extracts user claims
        3. Server verifies user has at least reader access to the threat model
        4. Server verifies the diagram exists within the specified threat model
        5. WebSocket connection is established if all validations pass

        ## Access Control
        - Users need minimum reader permissions on the parent threat model
        - Diagram must exist within the specified threat model
        - Token must contain valid user identification claims (sub, email)

        Example: ws://localhost:8080/threat_models/123/diagrams/456/ws?token=eyJ0eXAiOiJKV1Q...
