/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';
import Participant from './Participant';

/**
 * The CollaborationSession model module.
 * @module model/CollaborationSession
 * @version 1.0.0
 */
export default class CollaborationSession {
  /**
   * Constructs a new <code>CollaborationSession</code>.
   * Details of an active collaboration session for a diagram
   * @alias module:model/CollaborationSession
   * @class
   * @param sessionId {String} Unique identifier for the session (UUID)
   * @param host {String} Email address of the session host
   * @param threatModelId {String} Unique identifier of the associated threat model (UUID)
   * @param threatModelName {String} Name of the associated threat model
   * @param diagramId {String} Unique identifier of the associated diagram (UUID)
   * @param diagramName {String} Name of the associated diagram
   * @param participants {Array.<module:model/Participant>} List of active participants
   * @param websocketUrl {String} WebSocket URL for real-time updates
   */
  constructor(sessionId, host, threatModelId, threatModelName, diagramId, diagramName, participants, websocketUrl) {
    this.sessionId = sessionId;
    this.host = host;
    this.threatModelId = threatModelId;
    this.threatModelName = threatModelName;
    this.diagramId = diagramId;
    this.diagramName = diagramName;
    this.participants = participants;
    this.websocketUrl = websocketUrl;
  }

  /**
   * Constructs a <code>CollaborationSession</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CollaborationSession} obj Optional instance to populate.
   * @return {module:model/CollaborationSession} The populated <code>CollaborationSession</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CollaborationSession();
      if (data.hasOwnProperty('session_id'))
        obj.sessionId = ApiClient.convertToType(data['session_id'], 'String');
      if (data.hasOwnProperty('host'))
        obj.host = ApiClient.convertToType(data['host'], 'String');
      if (data.hasOwnProperty('presenter'))
        obj.presenter = ApiClient.convertToType(data['presenter'], 'String');
      if (data.hasOwnProperty('threat_model_id'))
        obj.threatModelId = ApiClient.convertToType(data['threat_model_id'], 'String');
      if (data.hasOwnProperty('threat_model_name'))
        obj.threatModelName = ApiClient.convertToType(data['threat_model_name'], 'String');
      if (data.hasOwnProperty('diagram_id'))
        obj.diagramId = ApiClient.convertToType(data['diagram_id'], 'String');
      if (data.hasOwnProperty('diagram_name'))
        obj.diagramName = ApiClient.convertToType(data['diagram_name'], 'String');
      if (data.hasOwnProperty('participants'))
        obj.participants = ApiClient.convertToType(data['participants'], [Participant]);
      if (data.hasOwnProperty('websocket_url'))
        obj.websocketUrl = ApiClient.convertToType(data['websocket_url'], 'String');
    }
    return obj;
  }
}

/**
 * Unique identifier for the session (UUID)
 * @member {String} sessionId
 */
CollaborationSession.prototype.sessionId = undefined;

/**
 * Email address of the session host
 * @member {String} host
 */
CollaborationSession.prototype.host = undefined;

/**
 * Email address of the current presenter
 * @member {String} presenter
 */
CollaborationSession.prototype.presenter = undefined;

/**
 * Unique identifier of the associated threat model (UUID)
 * @member {String} threatModelId
 */
CollaborationSession.prototype.threatModelId = undefined;

/**
 * Name of the associated threat model
 * @member {String} threatModelName
 */
CollaborationSession.prototype.threatModelName = undefined;

/**
 * Unique identifier of the associated diagram (UUID)
 * @member {String} diagramId
 */
CollaborationSession.prototype.diagramId = undefined;

/**
 * Name of the associated diagram
 * @member {String} diagramName
 */
CollaborationSession.prototype.diagramName = undefined;

/**
 * List of active participants
 * @member {Array.<module:model/Participant>} participants
 */
CollaborationSession.prototype.participants = undefined;

/**
 * WebSocket URL for real-time updates
 * @member {String} websocketUrl
 */
CollaborationSession.prototype.websocketUrl = undefined;

