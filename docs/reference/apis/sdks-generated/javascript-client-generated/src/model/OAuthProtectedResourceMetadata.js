/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from '../ApiClient';

/**
 * The OAuthProtectedResourceMetadata model module.
 * @module model/OAuthProtectedResourceMetadata
 * @version 1.0.0
 */
export default class OAuthProtectedResourceMetadata {
  /**
   * Constructs a new <code>OAuthProtectedResourceMetadata</code>.
   * OAuth 2.0 protected resource metadata as defined in RFC 9728
   * @alias module:model/OAuthProtectedResourceMetadata
   * @class
   * @param resource {String} The protected resource's resource identifier URL
   */
  constructor(resource) {
    this.resource = resource;
  }

  /**
   * Constructs a <code>OAuthProtectedResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/OAuthProtectedResourceMetadata} obj Optional instance to populate.
   * @return {module:model/OAuthProtectedResourceMetadata} The populated <code>OAuthProtectedResourceMetadata</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new OAuthProtectedResourceMetadata();
      if (data.hasOwnProperty('resource'))
        obj.resource = ApiClient.convertToType(data['resource'], 'String');
      if (data.hasOwnProperty('scopes_supported'))
        obj.scopesSupported = ApiClient.convertToType(data['scopes_supported'], ['String']);
      if (data.hasOwnProperty('authorization_servers'))
        obj.authorizationServers = ApiClient.convertToType(data['authorization_servers'], ['String']);
      if (data.hasOwnProperty('jwks_url'))
        obj.jwksUrl = ApiClient.convertToType(data['jwks_url'], 'String');
      if (data.hasOwnProperty('bearer_methods_supported'))
        obj.bearerMethodsSupported = ApiClient.convertToType(data['bearer_methods_supported'], ['String']);
      if (data.hasOwnProperty('resource_name'))
        obj.resourceName = ApiClient.convertToType(data['resource_name'], 'String');
      if (data.hasOwnProperty('resource_documentation'))
        obj.resourceDocumentation = ApiClient.convertToType(data['resource_documentation'], 'String');
      if (data.hasOwnProperty('tls_client_certificate_bound_access_tokens'))
        obj.tlsClientCertificateBoundAccessTokens = ApiClient.convertToType(data['tls_client_certificate_bound_access_tokens'], 'Boolean');
    }
    return obj;
  }
}

/**
 * The protected resource's resource identifier URL
 * @member {String} resource
 */
OAuthProtectedResourceMetadata.prototype.resource = undefined;

/**
 * JSON array of OAuth scope values supported by this protected resource
 * @member {Array.<String>} scopesSupported
 */
OAuthProtectedResourceMetadata.prototype.scopesSupported = undefined;

/**
 * List of authorization server issuer identifiers that can issue tokens for this resource
 * @member {Array.<String>} authorizationServers
 */
OAuthProtectedResourceMetadata.prototype.authorizationServers = undefined;

/**
 * URL of the protected resource's JSON Web Key Set
 * @member {String} jwksUrl
 */
OAuthProtectedResourceMetadata.prototype.jwksUrl = undefined;

/**
 * Supported token presentation methods for bearer tokens
 * @member {Array.<String>} bearerMethodsSupported
 */
OAuthProtectedResourceMetadata.prototype.bearerMethodsSupported = undefined;

/**
 * Human-readable name of the protected resource
 * @member {String} resourceName
 */
OAuthProtectedResourceMetadata.prototype.resourceName = undefined;

/**
 * URL with information for developers on how to use this protected resource
 * @member {String} resourceDocumentation
 */
OAuthProtectedResourceMetadata.prototype.resourceDocumentation = undefined;

/**
 * Whether the protected resource supports TLS client certificate bound access tokens
 * @member {Boolean} tlsClientCertificateBoundAccessTokens
 */
OAuthProtectedResourceMetadata.prototype.tlsClientCertificateBoundAccessTokens = undefined;

