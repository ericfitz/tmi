/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Asset from '../model/Asset';
import AssetInput from '../model/AssetInput';
import CreateDiagramRequest from '../model/CreateDiagramRequest';
import Diagram from '../model/Diagram';
import DiagramListItem from '../model/DiagramListItem';
import Document from '../model/Document';
import DocumentInput from '../model/DocumentInput';
import Error from '../model/Error';
import Metadata from '../model/Metadata';
import MetadataKeyBody from '../model/MetadataKeyBody';
import MetadataKeyBody1 from '../model/MetadataKeyBody1';
import MetadataKeyBody2 from '../model/MetadataKeyBody2';
import MetadataKeyBody3 from '../model/MetadataKeyBody3';
import MetadataKeyBody4 from '../model/MetadataKeyBody4';
import MetadataKeyBody5 from '../model/MetadataKeyBody5';
import Note from '../model/Note';
import NoteInput from '../model/NoteInput';
import NoteListItem from '../model/NoteListItem';
import Repository from '../model/Repository';
import RepositoryInput from '../model/RepositoryInput';
import Threat from '../model/Threat';
import ThreatInput from '../model/ThreatInput';
import ThreatsThreatIdBody from '../model/ThreatsThreatIdBody';

/**
* ThreatModelSubResources service.
* @module api/ThreatModelSubResourcesApi
* @version 1.0.0
*/
export default class ThreatModelSubResourcesApi {

    /**
    * Constructs a new ThreatModelSubResourcesApi. 
    * @alias module:api/ThreatModelSubResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the bulkCreateDiagramMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateDiagramMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create diagram metadata
     * Creates multiple metadata entries in a single operation for the specified diagram
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateDiagramMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateDiagramMetadata(body, threatModelId, diagramId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateDiagramMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateDiagramMetadata");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling bulkCreateDiagramMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateDocumentMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateDocumentMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create document metadata
     * Creates multiple metadata entries in a single operation for the specified document
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateDocumentMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateDocumentMetadata(body, threatModelId, documentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateDocumentMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateDocumentMetadata");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling bulkCreateDocumentMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateNoteMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateNoteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create note metadata
     * Creates multiple metadata key-value pairs for the specified note
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateNoteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateNoteMetadata(body, threatModelId, noteId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateNoteMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateNoteMetadata");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling bulkCreateNoteMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateRepositoryMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateRepositoryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create source metadata
     * Creates multiple metadata entries in a single operation for the specified source reference
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateRepositoryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateRepositoryMetadata(body, threatModelId, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateRepositoryMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateRepositoryMetadata");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling bulkCreateRepositoryMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create threat metadata
     * Creates multiple metadata entries in a single operation for the specified threat
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatMetadata(body, threatModelId, threatId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatMetadata");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling bulkCreateThreatMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create asset metadata
     * Creates multiple metadata key-value pairs for the specified asset
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelAssetMetadata(body, threatModelId, assetId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelAssetMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling bulkCreateThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelAssets operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create assets
     * Creates multiple assets within the specified threat model (maximum 50 per request)
     * @param {Array.<module:model/Asset>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelAssets(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelAssets");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelAssets");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Asset];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelDocuments operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create documents
     * Creates multiple documents in a single operation for the specified threat model
     * @param {Array.<module:model/Document>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelDocuments(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelDocuments");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelDocuments");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Document];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create threat model metadata
     * Creates multiple metadata entries in a single operation for the specified threat model
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelMetadata(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelRepositories operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create sources
     * Creates multiple source references in a single operation for the specified threat model
     * @param {Array.<module:model/Repository>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelRepositories(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelRepositories");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelRepositories");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkCreateThreatModelThreats operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkCreateThreatModelThreatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Threat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk create threats
     * Creates multiple threats in a single operation for the specified threat model
     * @param {Array.<module:model/Threat>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkCreateThreatModelThreatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkCreateThreatModelThreats(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkCreateThreatModelThreats");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelThreats");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Threat];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpdateNoteMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpdateNoteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update note metadata
     * Updates multiple metadata entries for the specified note in a single operation
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpdateNoteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpdateNoteMetadata(body, threatModelId, noteId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpdateNoteMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpdateNoteMetadata");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling bulkUpdateNoteMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpdateThreatModelThreats operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpdateThreatModelThreatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Threat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk update threats
     * Updates multiple threats in a single operation for the specified threat model
     * @param {Array.<module:model/Threat>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpdateThreatModelThreatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpdateThreatModelThreats(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpdateThreatModelThreats");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpdateThreatModelThreats");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Threat];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertDiagramMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertDiagramMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert diagram metadata
     * Creates or updates multiple metadata key-value pairs for the specified diagram
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertDiagramMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertDiagramMetadata(body, threatModelId, diagramId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertDiagramMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertDiagramMetadata");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling bulkUpsertDiagramMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertDocumentMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertDocumentMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert document metadata
     * Creates or updates multiple metadata key-value pairs for the specified document
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertDocumentMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertDocumentMetadata(body, threatModelId, documentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertDocumentMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertDocumentMetadata");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling bulkUpsertDocumentMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertRepositoryMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertRepositoryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert repository metadata
     * Creates or updates multiple metadata key-value pairs for the specified repository
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertRepositoryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertRepositoryMetadata(body, threatModelId, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertRepositoryMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertRepositoryMetadata");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling bulkUpsertRepositoryMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert threat metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatMetadata(body, threatModelId, threatId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatMetadata");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling bulkUpsertThreatMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert asset metadata
     * Creates or updates multiple metadata key-value pairs for the specified asset
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatModelAssetMetadata(body, threatModelId, assetId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatModelAssetMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling bulkUpsertThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatModelAssets operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatModelAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert assets
     * Create or update multiple assets in a single request
     * @param {Array.<module:model/Asset>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatModelAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatModelAssets(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatModelAssets");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelAssets");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Asset];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatModelDocuments operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatModelDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert documents
     * Create or update multiple documents in a single request
     * @param {Array.<module:model/Document>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatModelDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatModelDocuments(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatModelDocuments");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelDocuments");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Document];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatModelMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatModelMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert threat model metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat model
     * @param {Array.<module:model/Metadata>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatModelMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatModelMetadata(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatModelMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the bulkUpsertThreatModelRepositories operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~bulkUpsertThreatModelRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk upsert repositories
     * Create or update multiple repositories in a single request
     * @param {Array.<module:model/Repository>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~bulkUpsertThreatModelRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    bulkUpsertThreatModelRepositories(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling bulkUpsertThreatModelRepositories");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelRepositories");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/bulk', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDiagramMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createDiagramMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create diagram metadata
     * Creates a new metadata entry for the specified diagram
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createDiagramMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDiagramMetadata(body, threatModelId, diagramId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDiagramMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createDiagramMetadata");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling createDiagramMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createDocumentMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createDocumentMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create document metadata
     * Creates new metadata entry for the specified document
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createDocumentMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createDocumentMetadata(body, threatModelId, documentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDocumentMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createDocumentMetadata");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling createDocumentMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createNoteMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createNoteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create note metadata
     * Creates new metadata entry for the specified note
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createNoteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createNoteMetadata(body, threatModelId, noteId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createNoteMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createNoteMetadata");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling createNoteMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createRepositoryMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createRepositoryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create source metadata
     * Creates new metadata entry for the specified source reference
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createRepositoryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createRepositoryMetadata(body, threatModelId, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRepositoryMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createRepositoryMetadata");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling createRepositoryMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create threat metadata
     * Creates new metadata entry for the specified threat
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatMetadata(body, threatModelId, threatId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatMetadata");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling createThreatMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelAsset operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new asset
     * Creates a new asset within the specified threat model
     * @param {module:model/AssetInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelAsset(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelAsset");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelAsset");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Asset;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add metadata to an asset
     * Adds a new metadata key-value pair to the specified asset
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelAssetMetadata(body, threatModelId, assetId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelAssetMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling createThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelDiagram operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelDiagramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diagram{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new diagram
     * Creates a new diagram within the specified threat model
     * @param {module:model/CreateDiagramRequest} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelDiagram(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelDiagram");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelDiagram");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Diagram;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelDocument operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new document
     * Creates a new document within the specified threat model
     * @param {module:model/DocumentInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelDocument(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelDocument");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelDocument");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create threat model metadata
     * Creates new metadata entry for the specified threat model
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelMetadata(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelNote operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new note
     * Creates a new note within the specified threat model
     * @param {module:model/NoteInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelNote(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelNote");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelNote");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelRepository operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new source reference
     * Creates a new source code reference within the specified threat model
     * @param {module:model/RepositoryInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelRepository(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelRepository");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelRepository");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Repository;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createThreatModelThreat operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~createThreatModelThreatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new threat
     * Creates a new threat within the specified threat model
     * @param {module:model/ThreatInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~createThreatModelThreatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModelThreat(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModelThreat");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling createThreatModelThreat");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Threat;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDiagramMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteDiagramMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete diagram metadata by key
     * Removes a specific metadata entry for the diagram by key
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteDiagramMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDiagramMetadataByKey(threatModelId, diagramId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteDiagramMetadataByKey");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling deleteDiagramMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDiagramMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteDocumentMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteDocumentMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete document metadata by key
     * Deletes a specific metadata entry by key for the specified document
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteDocumentMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDocumentMetadataByKey(threatModelId, documentId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteDocumentMetadataByKey");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteDocumentMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDocumentMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteNoteMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteNoteMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete note metadata by key
     * Deletes a specific metadata entry by key for the specified note
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteNoteMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteNoteMetadataByKey(threatModelId, noteId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteNoteMetadataByKey");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteNoteMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteNoteMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteRepositoryMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteRepositoryMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete source metadata by key
     * Deletes a specific metadata entry by key for the specified source reference
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteRepositoryMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryMetadataByKey(threatModelId, repositoryId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteRepositoryMetadataByKey");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling deleteRepositoryMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteRepositoryMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete threat metadata by key
     * Deletes a specific metadata entry by key for the specified threat
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatMetadataByKey(threatModelId, threatId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatMetadataByKey");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling deleteThreatMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteThreatMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelAsset operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset
     * Deletes an asset from the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelAsset(threatModelId, assetId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelAsset");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteThreatModelAsset");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete asset metadata
     * Deletes a metadata key-value pair from the specified asset
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {String} key Metadata key
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelAssetMetadata(threatModelId, assetId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteThreatModelAssetMetadata");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelDiagram operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelDiagramCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a diagram
     * Permanently removes a diagram from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelDiagram(threatModelId, diagramId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelDiagram");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling deleteThreatModelDiagram");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelDocument operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a document
     * Deletes a specific document from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelDocument(threatModelId, documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling deleteThreatModelDocument");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete threat model metadata by key
     * Deletes a specific metadata entry by key for the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} key Metadata key to delete
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelMetadataByKey(threatModelId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteThreatModelMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelNote operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelNoteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a note
     * Deletes a specific note from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelNoteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelNote(threatModelId, noteId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteThreatModelNote");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelRepository operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a source reference
     * Deletes a specific source code reference from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelRepository(threatModelId, repositoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelRepository");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling deleteThreatModelRepository");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModelThreat operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~deleteThreatModelThreatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a threat
     * Deletes a specific threat from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~deleteThreatModelThreatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModelThreat(threatModelId, threatId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModelThreat");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling deleteThreatModelThreat");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDiagramMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getDiagramMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get diagram metadata
     * Retrieves all metadata entries for the specified diagram
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getDiagramMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDiagramMetadata(threatModelId, diagramId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getDiagramMetadata");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling getDiagramMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDiagramMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getDiagramMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get diagram metadata by key
     * Retrieves a specific metadata entry for the diagram by key
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getDiagramMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDiagramMetadataByKey(threatModelId, diagramId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getDiagramMetadataByKey");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling getDiagramMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDiagramMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocumentMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getDocumentMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document metadata
     * Returns all metadata key-value pairs for the specified document
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getDocumentMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocumentMetadata(threatModelId, documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getDocumentMetadata");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getDocumentMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getDocumentMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get document metadata by key
     * Returns a specific metadata entry by key for the specified document
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getDocumentMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getDocumentMetadataByKey(threatModelId, documentId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getDocumentMetadataByKey");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getDocumentMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNoteMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getNoteMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get note metadata
     * Returns all metadata key-value pairs for the specified note
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getNoteMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNoteMetadata(threatModelId, noteId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getNoteMetadata");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getNoteMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getNoteMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getNoteMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get note metadata by key
     * Returns a specific metadata entry by key for the specified note
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getNoteMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getNoteMetadataByKey(threatModelId, noteId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getNoteMetadataByKey");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getNoteMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getNoteMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRepositoryMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getRepositoryMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source metadata
     * Returns all metadata key-value pairs for the specified source reference
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getRepositoryMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRepositoryMetadata(threatModelId, repositoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getRepositoryMetadata");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling getRepositoryMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getRepositoryMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getRepositoryMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source metadata by key
     * Returns a specific metadata entry by key for the specified source reference
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getRepositoryMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getRepositoryMetadataByKey(threatModelId, repositoryId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getRepositoryMetadataByKey");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling getRepositoryMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getRepositoryMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get threat metadata
     * Returns all metadata key-value pairs for the specified threat
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatMetadata(threatModelId, threatId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatMetadata");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling getThreatMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get threat metadata by key
     * Returns a specific metadata entry by key for the specified threat
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getThreatMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatMetadataByKey(threatModelId, threatId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatMetadataByKey");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling getThreatMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getThreatMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelAsset operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific asset
     * Returns a single asset by its ID
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelAsset(threatModelId, assetId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelAsset");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getThreatModelAsset");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Asset;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all metadata for an asset
     * Returns all metadata key-value pairs for the specified asset
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelAssetMetadata(threatModelId, assetId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelAssetMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelAssetMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific metadata for an asset
     * Returns a single metadata value by its key
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {String} key Metadata key
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelAssetMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelAssetMetadataByKey(threatModelId, assetId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelAssetMetadataByKey");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getThreatModelAssetMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getThreatModelAssetMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelAssets operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelAssetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List assets in a threat model
     * Returns a paginated list of assets within the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of assets to return (default to <.>)
     * @param {Number} opts.offset Number of assets to skip (default to <.>)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelAssets(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelAssets");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Asset];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelDiagram operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelDiagramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diagram{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific diagram
     * Retrieves a specific diagram from the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelDiagram(threatModelId, diagramId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelDiagram");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling getThreatModelDiagram");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Diagram;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelDiagrams operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelDiagramsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DiagramListItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List threat model diagrams
     * Returns all diagrams associated with a specific threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of items to return (default to <.>)
     * @param {Number} opts.offset Number of items to skip (default to <.>)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelDiagramsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelDiagrams(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelDiagrams");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DiagramListItem];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelDocument operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific document
     * Returns details of a specific document within the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelDocument(threatModelId, documentId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getThreatModelDocument");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelDocuments operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Document>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List documents in a threat model
     * Returns a paginated list of documents within the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of documents to return (default to <.>)
     * @param {Number} opts.offset Number of documents to skip (default to <.>)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelDocuments(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelDocuments");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Document];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelMetadataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metadata>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get threat model metadata
     * Returns all metadata key-value pairs for the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelMetadata(threatModelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Metadata];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get threat model metadata by key
     * Returns a specific metadata entry by key for the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} key Metadata key to retrieve
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelMetadataByKey(threatModelId, key, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getThreatModelMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelNote operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific note
     * Returns details of a specific note within the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelNote(threatModelId, noteId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getThreatModelNote");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelNotes operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelNotesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NoteListItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List notes in a threat model
     * Returns a paginated list of notes within the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of notes to return (default to <.>)
     * @param {Number} opts.offset Number of notes to skip (default to <.>)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelNotes(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelNotes");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NoteListItem];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelRepositories operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Repository>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sources in a threat model
     * Returns a paginated list of source code references within the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of sources to return (default to <.>)
     * @param {Number} opts.offset Number of sources to skip (default to <.>)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelRepositories(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelRepositories");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Repository];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelRepository operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific source reference
     * Returns details of a specific source code reference within the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelRepository(threatModelId, repositoryId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelRepository");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling getThreatModelRepository");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Repository;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelThreat operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelThreatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific threat
     * Returns details of a specific threat within the threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelThreatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelThreat(threatModelId, threatId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelThreat");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling getThreatModelThreat");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Threat;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModelThreats operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~getThreatModelThreatsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Threat>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List threats in a threat model
     * Returns a paginated list of threats within the specified threat model
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Maximum number of threats to return (default to <.>)
     * @param {Number} opts.offset Number of threats to skip (default to <.>)
     * @param {String} opts.sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc) (default to <.>)
     * @param {String} opts.name Filter by threat name (partial match)
     * @param {String} opts.description Filter by threat description (partial match)
     * @param {String} opts.threatType Filter by threat type (exact match)
     * @param {module:model/String} opts.severity Filter by severity level (exact match)
     * @param {String} opts.priority Filter by priority (exact match)
     * @param {String} opts.status Filter by status (exact match)
     * @param {String} opts.diagramId Filter by diagram ID (exact match)
     * @param {String} opts.cellId Filter by cell ID (exact match)
     * @param {Number} opts.scoreGt Filter threats with score greater than this value
     * @param {Number} opts.scoreLt Filter threats with score less than this value
     * @param {Number} opts.scoreEq Filter threats with score equal to this value
     * @param {Number} opts.scoreGe Filter threats with score greater than or equal to this value
     * @param {Number} opts.scoreLe Filter threats with score less than or equal to this value
     * @param {Date} opts.createdAfter Filter threats created after this date (RFC3339 format)
     * @param {Date} opts.createdBefore Filter threats created before this date (RFC3339 format)
     * @param {Date} opts.modifiedAfter Filter threats modified after this date (RFC3339 format)
     * @param {Date} opts.modifiedBefore Filter threats modified before this date (RFC3339 format)
     * @param {module:api/ThreatModelSubResourcesApi~getThreatModelThreatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModelThreats(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModelThreats");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'sort': opts['sort'],'name': opts['name'],'description': opts['description'],'threat_type': opts['threatType'],'severity': opts['severity'],'priority': opts['priority'],'status': opts['status'],'diagram_id': opts['diagramId'],'cell_id': opts['cellId'],'score_gt': opts['scoreGt'],'score_lt': opts['scoreLt'],'score_eq': opts['scoreEq'],'score_ge': opts['scoreGe'],'score_le': opts['scoreLe'],'created_after': opts['createdAfter'],'created_before': opts['createdBefore'],'modified_after': opts['modifiedAfter'],'modified_before': opts['modifiedBefore']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Threat];

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchThreatModelDiagram operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~patchThreatModelDiagramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diagram{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a diagram
     * Apply JSON Patch operations to update specific parts of a diagram
     * @param {Array.<module:model/ThreatsThreatIdBody>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~patchThreatModelDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchThreatModelDiagram(body, threatModelId, diagramId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchThreatModelDiagram");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling patchThreatModelDiagram");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling patchThreatModelDiagram");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json-patch+json'];
      let accepts = ['application/json'];
      let returnType = Diagram;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchThreatModelThreat operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~patchThreatModelThreatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a threat
     * Applies JSON patch operations to a specific threat within the threat model
     * @param {Array.<module:model/ThreatsThreatIdBody>} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~patchThreatModelThreatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchThreatModelThreat(body, threatModelId, threatId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchThreatModelThreat");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling patchThreatModelThreat");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling patchThreatModelThreat");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json-patch+json'];
      let accepts = ['application/json'];
      let returnType = Threat;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDiagramMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateDiagramMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update diagram metadata by key
     * Updates or creates a metadata entry for the diagram with the specified key
     * @param {module:model/MetadataKeyBody4} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateDiagramMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateDiagramMetadataByKey(body, threatModelId, diagramId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDiagramMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateDiagramMetadataByKey");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling updateDiagramMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateDiagramMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateDocumentMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateDocumentMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update document metadata by key
     * Updates a specific metadata entry by key for the specified document
     * @param {module:model/MetadataKeyBody1} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateDocumentMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateDocumentMetadataByKey(body, threatModelId, documentId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDocumentMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateDocumentMetadataByKey");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateDocumentMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateDocumentMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateNoteMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateNoteMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update note metadata by key
     * Updates a specific metadata entry by key for the specified note
     * @param {module:model/MetadataKeyBody5} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateNoteMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateNoteMetadataByKey(body, threatModelId, noteId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateNoteMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateNoteMetadataByKey");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling updateNoteMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateNoteMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateRepositoryMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateRepositoryMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update source metadata by key
     * Updates a specific metadata entry by key for the specified source reference
     * @param {module:model/MetadataKeyBody2} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateRepositoryMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateRepositoryMetadataByKey(body, threatModelId, repositoryId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateRepositoryMetadataByKey");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling updateRepositoryMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateRepositoryMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update threat metadata by key
     * Updates a specific metadata entry by key for the specified threat
     * @param {module:model/MetadataKeyBody} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatMetadataByKey(body, threatModelId, threatId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatMetadataByKey");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling updateThreatMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateThreatMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelAsset operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an asset
     * Updates an existing asset within the specified threat model
     * @param {module:model/AssetInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelAsset(body, threatModelId, assetId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelAsset");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelAsset");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling updateThreatModelAsset");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Asset;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelAssetMetadata operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelAssetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update asset metadata
     * Updates an existing metadata value by its key
     * @param {module:model/Metadata} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} assetId Unique identifier of the asset (UUID)
     * @param {String} key Metadata key
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelAssetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelAssetMetadata(body, threatModelId, assetId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelAssetMetadata");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelAssetMetadata");
      }
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling updateThreatModelAssetMetadata");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateThreatModelAssetMetadata");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'asset_id': assetId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelDiagram operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelDiagramCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Diagram{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a diagram
     * Completely replaces a diagram with new data
     * @param {module:model/Diagram} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} diagramId Unique identifier of the diagram (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelDiagramCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelDiagram(body, threatModelId, diagramId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelDiagram");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelDiagram");
      }
      // verify the required parameter 'diagramId' is set
      if (diagramId === undefined || diagramId === null) {
        throw new Error("Missing the required parameter 'diagramId' when calling updateThreatModelDiagram");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'diagram_id': diagramId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Diagram;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/diagrams/{diagram_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelDocument operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a document
     * Updates a specific document within the threat model
     * @param {module:model/DocumentInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} documentId Unique identifier of the document (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelDocument(body, threatModelId, documentId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelDocument");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateThreatModelDocument");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'document_id': documentId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/documents/{document_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelMetadataByKey operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelMetadataByKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metadata{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update threat model metadata by key
     * Updates a specific metadata entry by key for the specified threat model
     * @param {module:model/MetadataKeyBody3} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} key Metadata key to update
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelMetadataByKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelMetadataByKey(body, threatModelId, key, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelMetadataByKey");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelMetadataByKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateThreatModelMetadataByKey");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'key': key
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Metadata;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/metadata/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelNote operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelNoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a note
     * Updates a specific note within the threat model
     * @param {module:model/NoteInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} noteId Unique identifier of the note (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelNoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelNote(body, threatModelId, noteId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelNote");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelNote");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling updateThreatModelNote");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'note_id': noteId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/notes/{note_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelRepository operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Repository{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a source reference
     * Updates a specific source code reference within the threat model
     * @param {module:model/RepositoryInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} repositoryId Unique identifier of the source reference (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelRepository(body, threatModelId, repositoryId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelRepository");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelRepository");
      }
      // verify the required parameter 'repositoryId' is set
      if (repositoryId === undefined || repositoryId === null) {
        throw new Error("Missing the required parameter 'repositoryId' when calling updateThreatModelRepository");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'repository_id': repositoryId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Repository;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/repositories/{repository_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModelThreat operation.
     * @callback moduleapi/ThreatModelSubResourcesApi~updateThreatModelThreatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Threat{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a threat
     * Updates a specific threat within the threat model
     * @param {module:model/ThreatInput} body 
     * @param {String} threatModelId Unique identifier of the threat model (UUID)
     * @param {String} threatId Unique identifier of the threat (UUID)
     * @param {module:api/ThreatModelSubResourcesApi~updateThreatModelThreatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModelThreat(body, threatModelId, threatId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModelThreat");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModelThreat");
      }
      // verify the required parameter 'threatId' is set
      if (threatId === undefined || threatId === null) {
        throw new Error("Missing the required parameter 'threatId' when calling updateThreatModelThreat");
      }

      let pathParams = {
        'threat_model_id': threatModelId,'threat_id': threatId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Threat;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}/threats/{threat_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}