/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import Error from '../model/Error';
import TMListItem from '../model/TMListItem';
import ThreatModel from '../model/ThreatModel';
import ThreatModelInput from '../model/ThreatModelInput';
import ThreatModelsThreatModelIdBody from '../model/ThreatModelsThreatModelIdBody';

/**
* ThreatModels service.
* @module api/ThreatModelsApi
* @version 1.0.0
*/
export default class ThreatModelsApi {

    /**
    * Constructs a new ThreatModelsApi. 
    * @alias module:api/ThreatModelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the createThreatModel operation.
     * @callback moduleapi/ThreatModelsApi~createThreatModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a threat model
     * Creates a new threat model with the authenticated user as owner
     * @param {module:model/ThreatModelInput} body 
     * @param {module:api/ThreatModelsApi~createThreatModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    createThreatModel(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createThreatModel");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThreatModel;

      return this.apiClient.callApi(
        '/threat_models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteThreatModel operation.
     * @callback moduleapi/ThreatModelsApi~deleteThreatModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a threat model
     * Deletes a threat model; restricted to owner role
     * @param {String} threatModelId Unique identifier of the threat model to delete (UUID)
     * @param {module:api/ThreatModelsApi~deleteThreatModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteThreatModel(threatModelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling deleteThreatModel");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getThreatModel operation.
     * @callback moduleapi/ThreatModelsApi~getThreatModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a threat model
     * Retrieves the full details of a specific threat model if the user has access
     * @param {String} threatModelId Unique identifier of the threat model to retrieve (UUID)
     * @param {module:api/ThreatModelsApi~getThreatModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getThreatModel(threatModelId, callback) {
      
      let postBody = null;
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling getThreatModel");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ThreatModel;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the listThreatModels operation.
     * @callback moduleapi/ThreatModelsApi~listThreatModelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TMListItem>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List threat models
     * Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of threat models to return (default to <.>)
     * @param {Number} opts.offset Pagination offset (default to <.>)
     * @param {String} opts.owner Filter by owner name or email
     * @param {String} opts.name Filter by threat model name (partial match)
     * @param {String} opts.description Filter by threat model description (partial match)
     * @param {String} opts.issueUri Filter by issue URI (partial match)
     * @param {Date} opts.createdAfter Filter threat models created after this date (RFC3339 format)
     * @param {Date} opts.createdBefore Filter threat models created before this date (RFC3339 format)
     * @param {Date} opts.modifiedAfter Filter threat models modified after this date (RFC3339 format)
     * @param {Date} opts.modifiedBefore Filter threat models modified before this date (RFC3339 format)
     * @param {String} opts.status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values.
     * @param {Date} opts.statusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339)
     * @param {Date} opts.statusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339)
     * @param {module:api/ThreatModelsApi~listThreatModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    listThreatModels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'limit': opts['limit'],'offset': opts['offset'],'owner': opts['owner'],'name': opts['name'],'description': opts['description'],'issue_uri': opts['issueUri'],'created_after': opts['createdAfter'],'created_before': opts['createdBefore'],'modified_after': opts['modifiedAfter'],'modified_before': opts['modifiedBefore'],'status': opts['status'],'status_updated_after': opts['statusUpdatedAfter'],'status_updated_before': opts['statusUpdatedBefore']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TMListItem];

      return this.apiClient.callApi(
        '/threat_models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchThreatModel operation.
     * @callback moduleapi/ThreatModelsApi~patchThreatModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update a threat model
     * Applies JSON Patch operations to a threat model; restricted to writer/owner roles
     * @param {String} threatModelId Unique identifier of the threat model to update (UUID)
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/ThreatModelsThreatModelIdBody>} opts.body 
     * @param {module:api/ThreatModelsApi~patchThreatModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchThreatModel(threatModelId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling patchThreatModel");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json-patch+json'];
      let accepts = ['application/json'];
      let returnType = ThreatModel;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateThreatModel operation.
     * @callback moduleapi/ThreatModelsApi~updateThreatModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreatModel{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a threat model
     * Fully updates a threat model; restricted to writer/owner roles
     * @param {module:model/ThreatModelInput} body 
     * @param {String} threatModelId Unique identifier of the threat model to update (UUID)
     * @param {module:api/ThreatModelsApi~updateThreatModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateThreatModel(body, threatModelId, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateThreatModel");
      }
      // verify the required parameter 'threatModelId' is set
      if (threatModelId === undefined || threatModelId === null) {
        throw new Error("Missing the required parameter 'threatModelId' when calling updateThreatModel");
      }

      let pathParams = {
        'threat_model_id': threatModelId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThreatModel;

      return this.apiClient.callApi(
        '/threat_models/{threat_model_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}