/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import AuthTokenResponse from '../model/AuthTokenResponse';
import Error from '../model/Error';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse2008 from '../model/InlineResponse2008';
import Oauth2RefreshBody from '../model/Oauth2RefreshBody';
import Oauth2TokenBody from '../model/Oauth2TokenBody';
import User from '../model/User';

/**
* Authentication service.
* @module api/AuthenticationApi
* @version 1.0.0
*/
export default class AuthenticationApi {

    /**
    * Constructs a new AuthenticationApi. 
    * @alias module:api/AuthenticationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the authorizeOAuthProvider operation.
     * @callback moduleapi/AuthenticationApi~authorizeOAuthProviderCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate OAuth authorization flow
     * Redirects user to OAuth provider&#x27;s authorization page. Supports client callback URL for seamless client integration. Generates state parameter for CSRF protection.
     * @param {String} scope OAuth 2.0 scope parameter. For OpenID Connect, must include \&quot;openid\&quot;. Supports \&quot;profile\&quot; and \&quot;email\&quot; scopes. Other scopes are silently ignored. Space-separated values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.idp OAuth provider identifier. Defaults to &#x27;test&#x27; provider in non-production builds if not specified.
     * @param {String} opts.clientCallback Client callback URL where TMI should redirect after successful OAuth completion with tokens as query parameters. If not provided, tokens are returned as JSON response.
     * @param {String} opts.state CSRF protection state parameter. Recommended for security. Will be included in the callback response.
     * @param {String} opts.loginHint User identity hint for test OAuth provider. Allows specifying a desired user identity for testing and automation. Only supported by the test provider (ignored by production providers like Google, GitHub, etc.). Must be 3-20 characters, alphanumeric and hyphens only.
     * @param {module:api/AuthenticationApi~authorizeOAuthProviderCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorizeOAuthProvider(scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling authorizeOAuthProvider");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idp': opts['idp'],'client_callback': opts['clientCallback'],'state': opts['state'],'login_hint': opts['loginHint'],'scope': scope
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the exchangeOAuthCode operation.
     * @callback moduleapi/AuthenticationApi~exchangeOAuthCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Exchange OAuth authorization code for JWT tokens
     * Provider-neutral endpoint to exchange OAuth authorization codes for TMI JWT tokens. Supports Google, GitHub, and Microsoft OAuth providers.
     * @param {module:model/Oauth2TokenBody} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.idp OAuth provider identifier. Defaults to &#x27;test&#x27; provider in non-production builds if not specified.
     * @param {module:api/AuthenticationApi~exchangeOAuthCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    exchangeOAuthCode(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling exchangeOAuthCode");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'idp': opts['idp']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthTokenResponse;

      return this.apiClient.callApi(
        '/oauth2/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAuthProviders operation.
     * @callback moduleapi/AuthenticationApi~getAuthProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List available OAuth providers
     * Returns a list of configured OAuth providers available for authentication
     * @param {module:api/AuthenticationApi~getAuthProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAuthProviders(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/oauth2/providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrentUser operation.
     * @callback moduleapi/AuthenticationApi~getCurrentUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user information
     * Returns information about the currently authenticated user
     * @param {module:api/AuthenticationApi~getCurrentUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCurrentUser(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/oauth2/userinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCurrentUserProfile operation.
     * @callback moduleapi/AuthenticationApi~getCurrentUserProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user profile
     * Returns detailed information about the currently authenticated user including groups and identity provider
     * @param {module:api/AuthenticationApi~getCurrentUserProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getCurrentUserProfile(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;

      return this.apiClient.callApi(
        '/users/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProviderGroups operation.
     * @callback moduleapi/AuthenticationApi~getProviderGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get groups for identity provider
     * Returns groups available from a specific identity provider for autocomplete and discovery
     * @param {String} idp Identity provider ID (e.g., saml_okta, saml_azure)
     * @param {module:api/AuthenticationApi~getProviderGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProviderGroups(idp, callback) {
      
      let postBody = null;
      // verify the required parameter 'idp' is set
      if (idp === undefined || idp === null) {
        throw new Error("Missing the required parameter 'idp' when calling getProviderGroups");
      }

      let pathParams = {
        'idp': idp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/oauth2/providers/{idp}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSAMLMetadata operation.
     * @callback moduleapi/AuthenticationApi~getSAMLMetadataCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get SAML service provider metadata
     * Returns the SP metadata XML for SAML configuration
     * @param {module:api/AuthenticationApi~getSAMLMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSAMLMetadata(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/samlmetadata+xml', 'application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/saml/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the handleOAuthCallback operation.
     * @callback moduleapi/AuthenticationApi~handleOAuthCallbackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle OAuth callback
     * Exchanges OAuth authorization code for JWT tokens. If client_callback was provided during authorization, redirects to client with tokens. Otherwise returns tokens as JSON response.
     * @param {String} code Authorization code from the OAuth provider
     * @param {Object} opts Optional parameters
     * @param {String} opts.state Optional state parameter for CSRF protection
     * @param {module:api/AuthenticationApi~handleOAuthCallbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    handleOAuthCallback(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling handleOAuthCallback");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'code': code,'state': opts['state']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuthTokenResponse;

      return this.apiClient.callApi(
        '/oauth2/callback', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the initiateSAMLLogin operation.
     * @callback moduleapi/AuthenticationApi~initiateSAMLLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate SAML authentication
     * Starts SAML authentication flow by redirecting to IdP
     * @param {Object} opts Optional parameters
     * @param {String} opts.clientCallback Client callback URL to redirect after authentication
     * @param {module:api/AuthenticationApi~initiateSAMLLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    initiateSAMLLogin(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'client_callback': opts['clientCallback']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/saml/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the introspectToken operation.
     * @callback moduleapi/AuthenticationApi~introspectTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Token Introspection
     * Introspects a JWT token to determine its validity and metadata as per RFC 7662
     * @param {String} token 
     * @param {String} tokenTypeHint 
     * @param {module:api/AuthenticationApi~introspectTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    introspectToken(token, tokenTypeHint, callback) {
      
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling introspectToken");
      }
      // verify the required parameter 'tokenTypeHint' is set
      if (tokenTypeHint === undefined || tokenTypeHint === null) {
        throw new Error("Missing the required parameter 'tokenTypeHint' when calling introspectToken");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'token': token,'token_type_hint': tokenTypeHint
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/oauth2/introspect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the logoutUser operation.
     * @callback moduleapi/AuthenticationApi~logoutUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout user
     * Invalidates the user&#x27;s JWT token by adding it to a blacklist, effectively ending the session. Once logged out, the token cannot be used for further authenticated requests until it naturally expires. The token blacklist is maintained in Redis with automatic cleanup based on token expiration times.
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body Empty request body - token is provided via Authorization header
     * @param {module:api/AuthenticationApi~logoutUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logoutUser(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/oauth2/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the processSAMLLogout operation.
     * @callback moduleapi/AuthenticationApi~processSAMLLogoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SAML Single Logout
     * Handles SAML logout requests from IdP
     * @param {String} sAMLRequest Base64-encoded SAML logout request
     * @param {module:api/AuthenticationApi~processSAMLLogoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    processSAMLLogout(sAMLRequest, callback) {
      
      let postBody = null;
      // verify the required parameter 'sAMLRequest' is set
      if (sAMLRequest === undefined || sAMLRequest === null) {
        throw new Error("Missing the required parameter 'sAMLRequest' when calling processSAMLLogout");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'SAMLRequest': sAMLRequest
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/saml/slo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the processSAMLLogoutPost operation.
     * @callback moduleapi/AuthenticationApi~processSAMLLogoutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SAML Single Logout (POST)
     * Handles SAML logout requests from IdP via POST
     * @param {Object} opts Optional parameters
     * @param {String} opts.sAMLRequest 
     * @param {module:api/AuthenticationApi~processSAMLLogoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    processSAMLLogoutPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'SAMLRequest': opts['sAMLRequest']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/saml/slo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the processSAMLResponse operation.
     * @callback moduleapi/AuthenticationApi~processSAMLResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * SAML Assertion Consumer Service
     * Processes SAML responses from IdP after authentication
     * @param {Object} opts Optional parameters
     * @param {String} opts.sAMLResponse 
     * @param {String} opts.relayState 
     * @param {module:api/AuthenticationApi~processSAMLResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    processSAMLResponse(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        'SAMLResponse': opts['sAMLResponse'],'RelayState': opts['relayState']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = AuthTokenResponse;

      return this.apiClient.callApi(
        '/saml/acs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback moduleapi/AuthenticationApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthTokenResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refresh JWT token
     * Exchanges a refresh token for a new JWT access token
     * @param {Object} opts Optional parameters
     * @param {module:model/Oauth2RefreshBody} opts.body 
     * @param {module:api/AuthenticationApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    refreshToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthTokenResponse;

      return this.apiClient.callApi(
        '/oauth2/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}