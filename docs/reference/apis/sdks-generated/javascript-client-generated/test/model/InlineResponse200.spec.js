/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TmiClient);
  }
}(this, function(expect, TmiClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InlineResponse200', function() {
      beforeEach(function() {
        instance = new TmiClient.InlineResponse200();
      });

      it('should create an instance of InlineResponse200', function() {
        // TODO: update the code to test InlineResponse200
        expect(instance).to.be.a(TmiClient.InlineResponse200);
      });

      it('should have the property issuer (base name: "issuer")', function() {
        // TODO: update the code to test the property issuer
        expect(instance).to.have.property('issuer');
        // expect(instance.issuer).to.be(expectedValueLiteral);
      });

      it('should have the property authorizationEndpoint (base name: "authorization_endpoint")', function() {
        // TODO: update the code to test the property authorizationEndpoint
        expect(instance).to.have.property('authorizationEndpoint');
        // expect(instance.authorizationEndpoint).to.be(expectedValueLiteral);
      });

      it('should have the property tokenEndpoint (base name: "token_endpoint")', function() {
        // TODO: update the code to test the property tokenEndpoint
        expect(instance).to.have.property('tokenEndpoint');
        // expect(instance.tokenEndpoint).to.be(expectedValueLiteral);
      });

      it('should have the property userinfoEndpoint (base name: "userinfo_endpoint")', function() {
        // TODO: update the code to test the property userinfoEndpoint
        expect(instance).to.have.property('userinfoEndpoint');
        // expect(instance.userinfoEndpoint).to.be(expectedValueLiteral);
      });

      it('should have the property jwksUri (base name: "jwks_uri")', function() {
        // TODO: update the code to test the property jwksUri
        expect(instance).to.have.property('jwksUri');
        // expect(instance.jwksUri).to.be(expectedValueLiteral);
      });

      it('should have the property responseTypesSupported (base name: "response_types_supported")', function() {
        // TODO: update the code to test the property responseTypesSupported
        expect(instance).to.have.property('responseTypesSupported');
        // expect(instance.responseTypesSupported).to.be(expectedValueLiteral);
      });

      it('should have the property subjectTypesSupported (base name: "subject_types_supported")', function() {
        // TODO: update the code to test the property subjectTypesSupported
        expect(instance).to.have.property('subjectTypesSupported');
        // expect(instance.subjectTypesSupported).to.be(expectedValueLiteral);
      });

      it('should have the property idTokenSigningAlgValuesSupported (base name: "id_token_signing_alg_values_supported")', function() {
        // TODO: update the code to test the property idTokenSigningAlgValuesSupported
        expect(instance).to.have.property('idTokenSigningAlgValuesSupported');
        // expect(instance.idTokenSigningAlgValuesSupported).to.be(expectedValueLiteral);
      });

      it('should have the property scopesSupported (base name: "scopes_supported")', function() {
        // TODO: update the code to test the property scopesSupported
        expect(instance).to.have.property('scopesSupported');
        // expect(instance.scopesSupported).to.be(expectedValueLiteral);
      });

      it('should have the property claimsSupported (base name: "claims_supported")', function() {
        // TODO: update the code to test the property claimsSupported
        expect(instance).to.have.property('claimsSupported');
        // expect(instance.claimsSupported).to.be(expectedValueLiteral);
      });

      it('should have the property introspectionEndpoint (base name: "introspection_endpoint")', function() {
        // TODO: update the code to test the property introspectionEndpoint
        expect(instance).to.have.property('introspectionEndpoint');
        // expect(instance.introspectionEndpoint).to.be(expectedValueLiteral);
      });

    });
  });

}));
