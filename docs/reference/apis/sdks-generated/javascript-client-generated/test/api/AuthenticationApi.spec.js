/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TmiClient);
  }
}(this, function(expect, TmiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TmiClient.AuthenticationApi();
  });

  describe('(package)', function() {
    describe('AuthenticationApi', function() {
      describe('authorizeOAuthProvider', function() {
        it('should call authorizeOAuthProvider successfully', function(done) {
          // TODO: uncomment, update parameter values for authorizeOAuthProvider call
          /*
          var opts = {};

          instance.authorizeOAuthProvider(scope, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('exchangeOAuthCode', function() {
        it('should call exchangeOAuthCode successfully', function(done) {
          // TODO: uncomment, update parameter values for exchangeOAuthCode call and complete the assertions
          /*
          var opts = {};

          instance.exchangeOAuthCode(body, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.AuthTokenResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getAuthProviders', function() {
        it('should call getAuthProviders successfully', function(done) {
          // TODO: uncomment getAuthProviders call and complete the assertions
          /*

          instance.getAuthProviders(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2004);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCurrentUser', function() {
        it('should call getCurrentUser successfully', function(done) {
          // TODO: uncomment getCurrentUser call and complete the assertions
          /*

          instance.getCurrentUser(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2006);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCurrentUserProfile', function() {
        it('should call getCurrentUserProfile successfully', function(done) {
          // TODO: uncomment getCurrentUserProfile call and complete the assertions
          /*

          instance.getCurrentUserProfile(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.User);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProviderGroups', function() {
        it('should call getProviderGroups successfully', function(done) {
          // TODO: uncomment, update parameter values for getProviderGroups call and complete the assertions
          /*

          instance.getProviderGroups(idp, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2005);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getSAMLMetadata', function() {
        it('should call getSAMLMetadata successfully', function(done) {
          // TODO: uncomment getSAMLMetadata call and complete the assertions
          /*

          instance.getSAMLMetadata(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(&#x27;string&#x27;);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('handleOAuthCallback', function() {
        it('should call handleOAuthCallback successfully', function(done) {
          // TODO: uncomment, update parameter values for handleOAuthCallback call and complete the assertions
          /*
          var opts = {};

          instance.handleOAuthCallback(code, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.AuthTokenResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('initiateSAMLLogin', function() {
        it('should call initiateSAMLLogin successfully', function(done) {
          // TODO: uncomment, update parameter values for initiateSAMLLogin call
          /*
          var opts = {};

          instance.initiateSAMLLogin(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('introspectToken', function() {
        it('should call introspectToken successfully', function(done) {
          // TODO: uncomment, update parameter values for introspectToken call and complete the assertions
          /*

          instance.introspectToken(token, tokenTypeHint, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2003);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('logoutUser', function() {
        it('should call logoutUser successfully', function(done) {
          // TODO: uncomment, update parameter values for logoutUser call
          /*
          var opts = {};

          instance.logoutUser(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('processSAMLLogout', function() {
        it('should call processSAMLLogout successfully', function(done) {
          // TODO: uncomment, update parameter values for processSAMLLogout call and complete the assertions
          /*

          instance.processSAMLLogout(sAMLRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('processSAMLLogoutPost', function() {
        it('should call processSAMLLogoutPost successfully', function(done) {
          // TODO: uncomment, update parameter values for processSAMLLogoutPost call and complete the assertions
          /*
          var opts = {};

          instance.processSAMLLogoutPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.InlineResponse2008);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('processSAMLResponse', function() {
        it('should call processSAMLResponse successfully', function(done) {
          // TODO: uncomment, update parameter values for processSAMLResponse call and complete the assertions
          /*
          var opts = {};

          instance.processSAMLResponse(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.AuthTokenResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('refreshToken', function() {
        it('should call refreshToken successfully', function(done) {
          // TODO: uncomment, update parameter values for refreshToken call and complete the assertions
          /*
          var opts = {};

          instance.refreshToken(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.AuthTokenResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
