/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.75
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TmiClient);
  }
}(this, function(expect, TmiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TmiClient.ThreatModelSubResourcesApi();
  });

  describe('(package)', function() {
    describe('ThreatModelSubResourcesApi', function() {
      describe('bulkCreateDiagramMetadata', function() {
        it('should call bulkCreateDiagramMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateDiagramMetadata call and complete the assertions
          /*

          instance.bulkCreateDiagramMetadata(body, threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateDocumentMetadata', function() {
        it('should call bulkCreateDocumentMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateDocumentMetadata call and complete the assertions
          /*

          instance.bulkCreateDocumentMetadata(body, threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateNoteMetadata', function() {
        it('should call bulkCreateNoteMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateNoteMetadata call and complete the assertions
          /*

          instance.bulkCreateNoteMetadata(body, threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateRepositoryMetadata', function() {
        it('should call bulkCreateRepositoryMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateRepositoryMetadata call and complete the assertions
          /*

          instance.bulkCreateRepositoryMetadata(body, threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatMetadata', function() {
        it('should call bulkCreateThreatMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatMetadata call and complete the assertions
          /*

          instance.bulkCreateThreatMetadata(body, threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelAssetMetadata', function() {
        it('should call bulkCreateThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelAssetMetadata call and complete the assertions
          /*

          instance.bulkCreateThreatModelAssetMetadata(body, threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelAssets', function() {
        it('should call bulkCreateThreatModelAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelAssets call and complete the assertions
          /*

          instance.bulkCreateThreatModelAssets(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Asset);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelDocuments', function() {
        it('should call bulkCreateThreatModelDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelDocuments call and complete the assertions
          /*

          instance.bulkCreateThreatModelDocuments(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Document);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelMetadata', function() {
        it('should call bulkCreateThreatModelMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelMetadata call and complete the assertions
          /*

          instance.bulkCreateThreatModelMetadata(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelRepositories', function() {
        it('should call bulkCreateThreatModelRepositories successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelRepositories call and complete the assertions
          /*

          instance.bulkCreateThreatModelRepositories(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkCreateThreatModelThreats', function() {
        it('should call bulkCreateThreatModelThreats successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkCreateThreatModelThreats call and complete the assertions
          /*

          instance.bulkCreateThreatModelThreats(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Threat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpdateNoteMetadata', function() {
        it('should call bulkUpdateNoteMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpdateNoteMetadata call and complete the assertions
          /*

          instance.bulkUpdateNoteMetadata(body, threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpdateThreatModelThreats', function() {
        it('should call bulkUpdateThreatModelThreats successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpdateThreatModelThreats call and complete the assertions
          /*

          instance.bulkUpdateThreatModelThreats(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Threat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertDiagramMetadata', function() {
        it('should call bulkUpsertDiagramMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertDiagramMetadata call and complete the assertions
          /*

          instance.bulkUpsertDiagramMetadata(body, threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertDocumentMetadata', function() {
        it('should call bulkUpsertDocumentMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertDocumentMetadata call and complete the assertions
          /*

          instance.bulkUpsertDocumentMetadata(body, threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertRepositoryMetadata', function() {
        it('should call bulkUpsertRepositoryMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertRepositoryMetadata call and complete the assertions
          /*

          instance.bulkUpsertRepositoryMetadata(body, threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatMetadata', function() {
        it('should call bulkUpsertThreatMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatMetadata call and complete the assertions
          /*

          instance.bulkUpsertThreatMetadata(body, threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatModelAssetMetadata', function() {
        it('should call bulkUpsertThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatModelAssetMetadata call and complete the assertions
          /*

          instance.bulkUpsertThreatModelAssetMetadata(body, threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatModelAssets', function() {
        it('should call bulkUpsertThreatModelAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatModelAssets call and complete the assertions
          /*

          instance.bulkUpsertThreatModelAssets(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Asset);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatModelDocuments', function() {
        it('should call bulkUpsertThreatModelDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatModelDocuments call and complete the assertions
          /*

          instance.bulkUpsertThreatModelDocuments(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Document);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatModelMetadata', function() {
        it('should call bulkUpsertThreatModelMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatModelMetadata call and complete the assertions
          /*

          instance.bulkUpsertThreatModelMetadata(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bulkUpsertThreatModelRepositories', function() {
        it('should call bulkUpsertThreatModelRepositories successfully', function(done) {
          // TODO: uncomment, update parameter values for bulkUpsertThreatModelRepositories call and complete the assertions
          /*

          instance.bulkUpsertThreatModelRepositories(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDiagramMetadata', function() {
        it('should call createDiagramMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createDiagramMetadata call and complete the assertions
          /*

          instance.createDiagramMetadata(body, threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createDocumentMetadata', function() {
        it('should call createDocumentMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createDocumentMetadata call and complete the assertions
          /*

          instance.createDocumentMetadata(body, threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createNoteMetadata', function() {
        it('should call createNoteMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createNoteMetadata call and complete the assertions
          /*

          instance.createNoteMetadata(body, threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRepositoryMetadata', function() {
        it('should call createRepositoryMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createRepositoryMetadata call and complete the assertions
          /*

          instance.createRepositoryMetadata(body, threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatMetadata', function() {
        it('should call createThreatMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatMetadata call and complete the assertions
          /*

          instance.createThreatMetadata(body, threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelAsset', function() {
        it('should call createThreatModelAsset successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelAsset call and complete the assertions
          /*

          instance.createThreatModelAsset(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Asset);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelAssetMetadata', function() {
        it('should call createThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelAssetMetadata call and complete the assertions
          /*

          instance.createThreatModelAssetMetadata(body, threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelDiagram', function() {
        it('should call createThreatModelDiagram successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelDiagram call and complete the assertions
          /*

          instance.createThreatModelDiagram(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Diagram);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelDocument', function() {
        it('should call createThreatModelDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelDocument call and complete the assertions
          /*

          instance.createThreatModelDocument(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelMetadata', function() {
        it('should call createThreatModelMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelMetadata call and complete the assertions
          /*

          instance.createThreatModelMetadata(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelNote', function() {
        it('should call createThreatModelNote successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelNote call and complete the assertions
          /*

          instance.createThreatModelNote(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Note);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelRepository', function() {
        it('should call createThreatModelRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelRepository call and complete the assertions
          /*

          instance.createThreatModelRepository(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createThreatModelThreat', function() {
        it('should call createThreatModelThreat successfully', function(done) {
          // TODO: uncomment, update parameter values for createThreatModelThreat call and complete the assertions
          /*

          instance.createThreatModelThreat(body, threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Threat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDiagramMetadataByKey', function() {
        it('should call deleteDiagramMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDiagramMetadataByKey call
          /*

          instance.deleteDiagramMetadataByKey(threatModelId, diagramId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteDocumentMetadataByKey', function() {
        it('should call deleteDocumentMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteDocumentMetadataByKey call
          /*

          instance.deleteDocumentMetadataByKey(threatModelId, documentId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteNoteMetadataByKey', function() {
        it('should call deleteNoteMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteNoteMetadataByKey call
          /*

          instance.deleteNoteMetadataByKey(threatModelId, noteId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRepositoryMetadataByKey', function() {
        it('should call deleteRepositoryMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRepositoryMetadataByKey call
          /*

          instance.deleteRepositoryMetadataByKey(threatModelId, repositoryId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatMetadataByKey', function() {
        it('should call deleteThreatMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatMetadataByKey call
          /*

          instance.deleteThreatMetadataByKey(threatModelId, threatId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelAsset', function() {
        it('should call deleteThreatModelAsset successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelAsset call
          /*

          instance.deleteThreatModelAsset(threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelAssetMetadata', function() {
        it('should call deleteThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelAssetMetadata call
          /*

          instance.deleteThreatModelAssetMetadata(threatModelId, assetId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelDiagram', function() {
        it('should call deleteThreatModelDiagram successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelDiagram call
          /*

          instance.deleteThreatModelDiagram(threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelDocument', function() {
        it('should call deleteThreatModelDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelDocument call
          /*

          instance.deleteThreatModelDocument(threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelMetadataByKey', function() {
        it('should call deleteThreatModelMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelMetadataByKey call
          /*

          instance.deleteThreatModelMetadataByKey(threatModelId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelNote', function() {
        it('should call deleteThreatModelNote successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelNote call
          /*

          instance.deleteThreatModelNote(threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelRepository', function() {
        it('should call deleteThreatModelRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelRepository call
          /*

          instance.deleteThreatModelRepository(threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteThreatModelThreat', function() {
        it('should call deleteThreatModelThreat successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteThreatModelThreat call
          /*

          instance.deleteThreatModelThreat(threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDiagramMetadata', function() {
        it('should call getDiagramMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getDiagramMetadata call and complete the assertions
          /*

          instance.getDiagramMetadata(threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDiagramMetadataByKey', function() {
        it('should call getDiagramMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getDiagramMetadataByKey call and complete the assertions
          /*

          instance.getDiagramMetadataByKey(threatModelId, diagramId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocumentMetadata', function() {
        it('should call getDocumentMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocumentMetadata call and complete the assertions
          /*

          instance.getDocumentMetadata(threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDocumentMetadataByKey', function() {
        it('should call getDocumentMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getDocumentMetadataByKey call and complete the assertions
          /*

          instance.getDocumentMetadataByKey(threatModelId, documentId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteMetadata', function() {
        it('should call getNoteMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteMetadata call and complete the assertions
          /*

          instance.getNoteMetadata(threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getNoteMetadataByKey', function() {
        it('should call getNoteMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getNoteMetadataByKey call and complete the assertions
          /*

          instance.getNoteMetadataByKey(threatModelId, noteId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRepositoryMetadata', function() {
        it('should call getRepositoryMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getRepositoryMetadata call and complete the assertions
          /*

          instance.getRepositoryMetadata(threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRepositoryMetadataByKey', function() {
        it('should call getRepositoryMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getRepositoryMetadataByKey call and complete the assertions
          /*

          instance.getRepositoryMetadataByKey(threatModelId, repositoryId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatMetadata', function() {
        it('should call getThreatMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatMetadata call and complete the assertions
          /*

          instance.getThreatMetadata(threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatMetadataByKey', function() {
        it('should call getThreatMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatMetadataByKey call and complete the assertions
          /*

          instance.getThreatMetadataByKey(threatModelId, threatId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelAsset', function() {
        it('should call getThreatModelAsset successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelAsset call and complete the assertions
          /*

          instance.getThreatModelAsset(threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Asset);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelAssetMetadata', function() {
        it('should call getThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelAssetMetadata call and complete the assertions
          /*

          instance.getThreatModelAssetMetadata(threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelAssetMetadataByKey', function() {
        it('should call getThreatModelAssetMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelAssetMetadataByKey call and complete the assertions
          /*

          instance.getThreatModelAssetMetadataByKey(threatModelId, assetId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelAssets', function() {
        it('should call getThreatModelAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelAssets call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelAssets(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Asset);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelDiagram', function() {
        it('should call getThreatModelDiagram successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelDiagram call and complete the assertions
          /*

          instance.getThreatModelDiagram(threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Diagram);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelDiagrams', function() {
        it('should call getThreatModelDiagrams successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelDiagrams call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelDiagrams(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.DiagramListItem);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelDocument', function() {
        it('should call getThreatModelDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelDocument call and complete the assertions
          /*

          instance.getThreatModelDocument(threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelDocuments', function() {
        it('should call getThreatModelDocuments successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelDocuments call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelDocuments(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Document);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelMetadata', function() {
        it('should call getThreatModelMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelMetadata call and complete the assertions
          /*

          instance.getThreatModelMetadata(threatModelId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Metadata);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelMetadataByKey', function() {
        it('should call getThreatModelMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelMetadataByKey call and complete the assertions
          /*

          instance.getThreatModelMetadataByKey(threatModelId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelNote', function() {
        it('should call getThreatModelNote successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelNote call and complete the assertions
          /*

          instance.getThreatModelNote(threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Note);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelNotes', function() {
        it('should call getThreatModelNotes successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelNotes call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelNotes(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.NoteListItem);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelRepositories', function() {
        it('should call getThreatModelRepositories successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelRepositories call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelRepositories(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Repository);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelRepository', function() {
        it('should call getThreatModelRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelRepository call and complete the assertions
          /*

          instance.getThreatModelRepository(threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelThreat', function() {
        it('should call getThreatModelThreat successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelThreat call and complete the assertions
          /*

          instance.getThreatModelThreat(threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Threat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getThreatModelThreats', function() {
        it('should call getThreatModelThreats successfully', function(done) {
          // TODO: uncomment, update parameter values for getThreatModelThreats call and complete the assertions
          /*
          var opts = {};

          instance.getThreatModelThreats(threatModelId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(TmiClient.Threat);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchThreatModelDiagram', function() {
        it('should call patchThreatModelDiagram successfully', function(done) {
          // TODO: uncomment, update parameter values for patchThreatModelDiagram call and complete the assertions
          /*

          instance.patchThreatModelDiagram(body, threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Diagram);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchThreatModelThreat', function() {
        it('should call patchThreatModelThreat successfully', function(done) {
          // TODO: uncomment, update parameter values for patchThreatModelThreat call and complete the assertions
          /*

          instance.patchThreatModelThreat(body, threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Threat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDiagramMetadataByKey', function() {
        it('should call updateDiagramMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDiagramMetadataByKey call and complete the assertions
          /*

          instance.updateDiagramMetadataByKey(body, threatModelId, diagramId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateDocumentMetadataByKey', function() {
        it('should call updateDocumentMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateDocumentMetadataByKey call and complete the assertions
          /*

          instance.updateDocumentMetadataByKey(body, threatModelId, documentId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateNoteMetadataByKey', function() {
        it('should call updateNoteMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateNoteMetadataByKey call and complete the assertions
          /*

          instance.updateNoteMetadataByKey(body, threatModelId, noteId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateRepositoryMetadataByKey', function() {
        it('should call updateRepositoryMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateRepositoryMetadataByKey call and complete the assertions
          /*

          instance.updateRepositoryMetadataByKey(body, threatModelId, repositoryId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatMetadataByKey', function() {
        it('should call updateThreatMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatMetadataByKey call and complete the assertions
          /*

          instance.updateThreatMetadataByKey(body, threatModelId, threatId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelAsset', function() {
        it('should call updateThreatModelAsset successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelAsset call and complete the assertions
          /*

          instance.updateThreatModelAsset(body, threatModelId, assetId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Asset);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelAssetMetadata', function() {
        it('should call updateThreatModelAssetMetadata successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelAssetMetadata call and complete the assertions
          /*

          instance.updateThreatModelAssetMetadata(body, threatModelId, assetId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelDiagram', function() {
        it('should call updateThreatModelDiagram successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelDiagram call and complete the assertions
          /*

          instance.updateThreatModelDiagram(body, threatModelId, diagramId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Diagram);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelDocument', function() {
        it('should call updateThreatModelDocument successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelDocument call and complete the assertions
          /*

          instance.updateThreatModelDocument(body, threatModelId, documentId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Document);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelMetadataByKey', function() {
        it('should call updateThreatModelMetadataByKey successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelMetadataByKey call and complete the assertions
          /*

          instance.updateThreatModelMetadataByKey(body, threatModelId, key, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Metadata);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelNote', function() {
        it('should call updateThreatModelNote successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelNote call and complete the assertions
          /*

          instance.updateThreatModelNote(body, threatModelId, noteId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Note);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelRepository', function() {
        it('should call updateThreatModelRepository successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelRepository call and complete the assertions
          /*

          instance.updateThreatModelRepository(body, threatModelId, repositoryId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Repository);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateThreatModelThreat', function() {
        it('should call updateThreatModelThreat successfully', function(done) {
          // TODO: uncomment, update parameter values for updateThreatModelThreat call and complete the assertions
          /*

          instance.updateThreatModelThreat(body, threatModelId, threatId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(TmiClient.Threat);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
