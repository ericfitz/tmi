/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TMListItem;
import io.swagger.client.model.ThreatModel;
import io.swagger.client.model.ThreatModelInput;
import io.swagger.client.model.ThreatModelsThreatModelIdBody;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ThreatModelsApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ThreatModelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThreatModelsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for createThreatModel
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelCall(ThreatModelInput body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelValidateBeforeCall(ThreatModelInput body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModel(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a threat model
     * Creates a new threat model with the authenticated user as owner
     * @param body  (required)
     * @return ThreatModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThreatModel createThreatModel(ThreatModelInput body) throws ApiException {
        ApiResponse<ThreatModel> resp = createThreatModelWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a threat model
     * Creates a new threat model with the authenticated user as owner
     * @param body  (required)
     * @return ApiResponse&lt;ThreatModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThreatModel> createThreatModelWithHttpInfo(ThreatModelInput body) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a threat model (asynchronously)
     * Creates a new threat model with the authenticated user as owner
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelAsync(ThreatModelInput body, final ApiCallback<ThreatModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModel
     * @param threatModelId Unique identifier of the threat model to delete (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelValidateBeforeCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModel(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelCall(threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a threat model
     * Deletes a threat model; restricted to owner role
     * @param threatModelId Unique identifier of the threat model to delete (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModel(UUID threatModelId) throws ApiException {
        deleteThreatModelWithHttpInfo(threatModelId);
    }

    /**
     * Delete a threat model
     * Deletes a threat model; restricted to owner role
     * @param threatModelId Unique identifier of the threat model to delete (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelWithHttpInfo(UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelValidateBeforeCall(threatModelId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a threat model (asynchronously)
     * Deletes a threat model; restricted to owner role
     * @param threatModelId Unique identifier of the threat model to delete (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelAsync(UUID threatModelId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelValidateBeforeCall(threatModelId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getThreatModel
     * @param threatModelId Unique identifier of the threat model to retrieve (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelValidateBeforeCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModel(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelCall(threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a threat model
     * Retrieves the full details of a specific threat model if the user has access
     * @param threatModelId Unique identifier of the threat model to retrieve (UUID) (required)
     * @return ThreatModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThreatModel getThreatModel(UUID threatModelId) throws ApiException {
        ApiResponse<ThreatModel> resp = getThreatModelWithHttpInfo(threatModelId);
        return resp.getData();
    }

    /**
     * Retrieve a threat model
     * Retrieves the full details of a specific threat model if the user has access
     * @param threatModelId Unique identifier of the threat model to retrieve (UUID) (required)
     * @return ApiResponse&lt;ThreatModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThreatModel> getThreatModelWithHttpInfo(UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelValidateBeforeCall(threatModelId, null, null);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a threat model (asynchronously)
     * Retrieves the full details of a specific threat model if the user has access
     * @param threatModelId Unique identifier of the threat model to retrieve (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAsync(UUID threatModelId, final ApiCallback<ThreatModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelValidateBeforeCall(threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listThreatModels
     * @param limit Number of threat models to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param owner Filter by owner name or email (optional)
     * @param name Filter by threat model name (partial match) (optional)
     * @param description Filter by threat model description (partial match) (optional)
     * @param issueUri Filter by issue URI (partial match) (optional)
     * @param createdAfter Filter threat models created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threat models created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threat models modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threat models modified before this date (RFC3339 format) (optional)
     * @param status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values. (optional)
     * @param statusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339) (optional)
     * @param statusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listThreatModelsCall(Integer limit, Integer offset, String owner, String name, String description, String issueUri, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String status, OffsetDateTime statusUpdatedAfter, OffsetDateTime statusUpdatedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (owner != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("owner", owner));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (issueUri != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("issue_uri", issueUri));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_after", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_before", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified_after", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified_before", modifiedBefore));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (statusUpdatedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status_updated_after", statusUpdatedAfter));
        if (statusUpdatedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status_updated_before", statusUpdatedBefore));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listThreatModelsValidateBeforeCall(Integer limit, Integer offset, String owner, String name, String description, String issueUri, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String status, OffsetDateTime statusUpdatedAfter, OffsetDateTime statusUpdatedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = listThreatModelsCall(limit, offset, owner, name, description, issueUri, createdAfter, createdBefore, modifiedAfter, modifiedBefore, status, statusUpdatedAfter, statusUpdatedBefore, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List threat models
     * Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts
     * @param limit Number of threat models to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param owner Filter by owner name or email (optional)
     * @param name Filter by threat model name (partial match) (optional)
     * @param description Filter by threat model description (partial match) (optional)
     * @param issueUri Filter by issue URI (partial match) (optional)
     * @param createdAfter Filter threat models created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threat models created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threat models modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threat models modified before this date (RFC3339 format) (optional)
     * @param status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values. (optional)
     * @param statusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339) (optional)
     * @param statusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339) (optional)
     * @return List&lt;TMListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TMListItem> listThreatModels(Integer limit, Integer offset, String owner, String name, String description, String issueUri, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String status, OffsetDateTime statusUpdatedAfter, OffsetDateTime statusUpdatedBefore) throws ApiException {
        ApiResponse<List<TMListItem>> resp = listThreatModelsWithHttpInfo(limit, offset, owner, name, description, issueUri, createdAfter, createdBefore, modifiedAfter, modifiedBefore, status, statusUpdatedAfter, statusUpdatedBefore);
        return resp.getData();
    }

    /**
     * List threat models
     * Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts
     * @param limit Number of threat models to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param owner Filter by owner name or email (optional)
     * @param name Filter by threat model name (partial match) (optional)
     * @param description Filter by threat model description (partial match) (optional)
     * @param issueUri Filter by issue URI (partial match) (optional)
     * @param createdAfter Filter threat models created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threat models created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threat models modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threat models modified before this date (RFC3339 format) (optional)
     * @param status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values. (optional)
     * @param statusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339) (optional)
     * @param statusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339) (optional)
     * @return ApiResponse&lt;List&lt;TMListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<TMListItem>> listThreatModelsWithHttpInfo(Integer limit, Integer offset, String owner, String name, String description, String issueUri, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String status, OffsetDateTime statusUpdatedAfter, OffsetDateTime statusUpdatedBefore) throws ApiException {
        com.squareup.okhttp.Call call = listThreatModelsValidateBeforeCall(limit, offset, owner, name, description, issueUri, createdAfter, createdBefore, modifiedAfter, modifiedBefore, status, statusUpdatedAfter, statusUpdatedBefore, null, null);
        Type localVarReturnType = new TypeToken<List<TMListItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List threat models (asynchronously)
     * Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts
     * @param limit Number of threat models to return (optional, default to 20)
     * @param offset Pagination offset (optional, default to 0)
     * @param owner Filter by owner name or email (optional)
     * @param name Filter by threat model name (partial match) (optional)
     * @param description Filter by threat model description (partial match) (optional)
     * @param issueUri Filter by issue URI (partial match) (optional)
     * @param createdAfter Filter threat models created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threat models created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threat models modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threat models modified before this date (RFC3339 format) (optional)
     * @param status Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values. (optional)
     * @param statusUpdatedAfter Filter threat models where status was updated after this timestamp (RFC3339) (optional)
     * @param statusUpdatedBefore Filter threat models where status was updated before this timestamp (RFC3339) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listThreatModelsAsync(Integer limit, Integer offset, String owner, String name, String description, String issueUri, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, String status, OffsetDateTime statusUpdatedAfter, OffsetDateTime statusUpdatedBefore, final ApiCallback<List<TMListItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listThreatModelsValidateBeforeCall(limit, offset, owner, name, description, issueUri, createdAfter, createdBefore, modifiedAfter, modifiedBefore, status, statusUpdatedAfter, statusUpdatedBefore, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<TMListItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchThreatModel
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelCall(UUID threatModelId, List<ThreatModelsThreatModelIdBody> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchThreatModelValidateBeforeCall(UUID threatModelId, List<ThreatModelsThreatModelIdBody> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling patchThreatModel(Async)");
        }
        
        com.squareup.okhttp.Call call = patchThreatModelCall(threatModelId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Partially update a threat model
     * Applies JSON Patch operations to a threat model; restricted to writer/owner roles
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param body  (optional)
     * @return ThreatModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThreatModel patchThreatModel(UUID threatModelId, List<ThreatModelsThreatModelIdBody> body) throws ApiException {
        ApiResponse<ThreatModel> resp = patchThreatModelWithHttpInfo(threatModelId, body);
        return resp.getData();
    }

    /**
     * Partially update a threat model
     * Applies JSON Patch operations to a threat model; restricted to writer/owner roles
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ThreatModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThreatModel> patchThreatModelWithHttpInfo(UUID threatModelId, List<ThreatModelsThreatModelIdBody> body) throws ApiException {
        com.squareup.okhttp.Call call = patchThreatModelValidateBeforeCall(threatModelId, body, null, null);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Partially update a threat model (asynchronously)
     * Applies JSON Patch operations to a threat model; restricted to writer/owner roles
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelAsync(UUID threatModelId, List<ThreatModelsThreatModelIdBody> body, final ApiCallback<ThreatModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchThreatModelValidateBeforeCall(threatModelId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModel
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelCall(ThreatModelInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelValidateBeforeCall(ThreatModelInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModel(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModel(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a threat model
     * Fully updates a threat model; restricted to writer/owner roles
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @return ThreatModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ThreatModel updateThreatModel(ThreatModelInput body, UUID threatModelId) throws ApiException {
        ApiResponse<ThreatModel> resp = updateThreatModelWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Update a threat model
     * Fully updates a threat model; restricted to writer/owner roles
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @return ApiResponse&lt;ThreatModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ThreatModel> updateThreatModelWithHttpInfo(ThreatModelInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a threat model (asynchronously)
     * Fully updates a threat model; restricted to writer/owner roles
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model to update (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelAsync(ThreatModelInput body, UUID threatModelId, final ApiCallback<ThreatModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ThreatModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
