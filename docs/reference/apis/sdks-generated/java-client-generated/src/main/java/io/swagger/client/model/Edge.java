/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Cell;
import io.swagger.client.model.CellTool;
import io.swagger.client.model.EdgeLabel;
import io.swagger.client.model.MarkupElement;
import io.swagger.client.model.Point;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
/**
 * Edge
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class Edge extends Cell {
  /**
   * Edge type identifier
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    @SerializedName("edge")
    EDGE("edge");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ShapeEnum fromValue(String input) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ShapeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("shape")
  private ShapeEnum edgeShape = null;

  @SerializedName("source")
  private Object source = null;

  @SerializedName("target")
  private Object target = null;

  @SerializedName("attrs")
  private Object attrs = null;

  @SerializedName("labels")
  private List<EdgeLabel> labels = null;

  @SerializedName("vertices")
  private List<Point> vertices = null;

  @SerializedName("router")
  private Object router = null;

  @SerializedName("connector")
  private Object connector = null;

  @SerializedName("defaultLabel")
  private Object defaultLabel = null;

  public Edge edgeShape(ShapeEnum edgeShape) {
    this.edgeShape = edgeShape;
    return this;
  }

   /**
   * Edge type identifier
   * @return edgeShape
  **/
  @Schema(description = "Edge type identifier")
  public ShapeEnum getEdgeShape() {
    return edgeShape;
  }

  public void setEdgeShape(ShapeEnum edgeShape) {
    this.edgeShape = edgeShape;
  }

  public Edge source(Object source) {
    this.source = source;
    return this;
  }

   /**
   * Source connection point
   * @return source
  **/
  @Schema(required = true, description = "Source connection point")
  public Object getSource() {
    return source;
  }

  public void setSource(Object source) {
    this.source = source;
  }

  public Edge target(Object target) {
    this.target = target;
    return this;
  }

   /**
   * Target connection point
   * @return target
  **/
  @Schema(required = true, description = "Target connection point")
  public Object getTarget() {
    return target;
  }

  public void setTarget(Object target) {
    this.target = target;
  }

  public Edge attrs(Object attrs) {
    this.attrs = attrs;
    return this;
  }

   /**
   * Visual styling attributes for the edge
   * @return attrs
  **/
  @Schema(description = "Visual styling attributes for the edge")
  public Object getAttrs() {
    return attrs;
  }

  public void setAttrs(Object attrs) {
    this.attrs = attrs;
  }

  public Edge labels(List<EdgeLabel> labels) {
    this.labels = labels;
    return this;
  }

  public Edge addLabelsItem(EdgeLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<EdgeLabel>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Text labels positioned along the edge
   * @return labels
  **/
  @Schema(description = "Text labels positioned along the edge")
  public List<EdgeLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<EdgeLabel> labels) {
    this.labels = labels;
  }

  public Edge vertices(List<Point> vertices) {
    this.vertices = vertices;
    return this;
  }

  public Edge addVerticesItem(Point verticesItem) {
    if (this.vertices == null) {
      this.vertices = new ArrayList<Point>();
    }
    this.vertices.add(verticesItem);
    return this;
  }

   /**
   * Intermediate waypoints for edge routing
   * @return vertices
  **/
  @Schema(description = "Intermediate waypoints for edge routing")
  public List<Point> getVertices() {
    return vertices;
  }

  public void setVertices(List<Point> vertices) {
    this.vertices = vertices;
  }

  public Edge router(Object router) {
    this.router = router;
    return this;
  }

   /**
   * Edge routing algorithm configuration for path calculation
   * @return router
  **/
  @Schema(description = "Edge routing algorithm configuration for path calculation")
  public Object getRouter() {
    return router;
  }

  public void setRouter(Object router) {
    this.router = router;
  }

  public Edge connector(Object connector) {
    this.connector = connector;
    return this;
  }

   /**
   * Edge connector style configuration for visual appearance
   * @return connector
  **/
  @Schema(description = "Edge connector style configuration for visual appearance")
  public Object getConnector() {
    return connector;
  }

  public void setConnector(Object connector) {
    this.connector = connector;
  }

  public Edge defaultLabel(Object defaultLabel) {
    this.defaultLabel = defaultLabel;
    return this;
  }

   /**
   * Default label configuration applied to edges without explicit labels
   * @return defaultLabel
  **/
  @Schema(description = "Default label configuration applied to edges without explicit labels")
  public Object getDefaultLabel() {
    return defaultLabel;
  }

  public void setDefaultLabel(Object defaultLabel) {
    this.defaultLabel = defaultLabel;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Edge edge = (Edge) o;
    return Objects.equals(this.edgeShape, edge.edgeShape) &&
        Objects.equals(this.source, edge.source) &&
        Objects.equals(this.target, edge.target) &&
        Objects.equals(this.attrs, edge.attrs) &&
        Objects.equals(this.labels, edge.labels) &&
        Objects.equals(this.vertices, edge.vertices) &&
        Objects.equals(this.router, edge.router) &&
        Objects.equals(this.connector, edge.connector) &&
        Objects.equals(this.defaultLabel, edge.defaultLabel) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edgeShape, source, target, attrs, labels, vertices, router, connector, defaultLabel, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Edge {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    edgeShape: ").append(toIndentedString(edgeShape)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    attrs: ").append(toIndentedString(attrs)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    vertices: ").append(toIndentedString(vertices)).append("\n");
    sb.append("    router: ").append(toIndentedString(router)).append("\n");
    sb.append("    connector: ").append(toIndentedString(connector)).append("\n");
    sb.append("    defaultLabel: ").append(toIndentedString(defaultLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
