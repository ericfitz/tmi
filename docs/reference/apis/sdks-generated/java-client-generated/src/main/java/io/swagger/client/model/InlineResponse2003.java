/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * InlineResponse2003
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class InlineResponse2003 {
  @SerializedName("active")
  private Boolean active = null;

  @SerializedName("sub")
  private String sub = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("email_verified")
  private Boolean emailVerified = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("exp")
  private Integer exp = null;

  @SerializedName("iat")
  private Integer iat = null;

  @SerializedName("iss")
  private String iss = null;

  public InlineResponse2003 active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Whether the token is active/valid
   * @return active
  **/
  @Schema(example = "true", required = true, description = "Whether the token is active/valid")
  public Boolean isActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }

  public InlineResponse2003 sub(String sub) {
    this.sub = sub;
    return this;
  }

   /**
   * Subject (user identifier)
   * @return sub
  **/
  @Schema(example = "user@example.com", description = "Subject (user identifier)")
  public String getSub() {
    return sub;
  }

  public void setSub(String sub) {
    this.sub = sub;
  }

  public InlineResponse2003 email(String email) {
    this.email = email;
    return this;
  }

   /**
   * User email address
   * @return email
  **/
  @Schema(example = "user@example.com", description = "User email address")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public InlineResponse2003 emailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
    return this;
  }

   /**
   * Whether the email is verified
   * @return emailVerified
  **/
  @Schema(example = "true", description = "Whether the email is verified")
  public Boolean isEmailVerified() {
    return emailVerified;
  }

  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }

  public InlineResponse2003 name(String name) {
    this.name = name;
    return this;
  }

   /**
   * User&#x27;s full name
   * @return name
  **/
  @Schema(example = "John Doe", description = "User's full name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public InlineResponse2003 exp(Integer exp) {
    this.exp = exp;
    return this;
  }

   /**
   * Token expiration time (Unix timestamp)
   * @return exp
  **/
  @Schema(example = "1640995200", description = "Token expiration time (Unix timestamp)")
  public Integer getExp() {
    return exp;
  }

  public void setExp(Integer exp) {
    this.exp = exp;
  }

  public InlineResponse2003 iat(Integer iat) {
    this.iat = iat;
    return this;
  }

   /**
   * Token issued at time (Unix timestamp)
   * @return iat
  **/
  @Schema(example = "1640991600", description = "Token issued at time (Unix timestamp)")
  public Integer getIat() {
    return iat;
  }

  public void setIat(Integer iat) {
    this.iat = iat;
  }

  public InlineResponse2003 iss(String iss) {
    this.iss = iss;
    return this;
  }

   /**
   * Token issuer
   * @return iss
  **/
  @Schema(example = "http://localhost:8080", description = "Token issuer")
  public String getIss() {
    return iss;
  }

  public void setIss(String iss) {
    this.iss = iss;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2003 inlineResponse2003 = (InlineResponse2003) o;
    return Objects.equals(this.active, inlineResponse2003.active) &&
        Objects.equals(this.sub, inlineResponse2003.sub) &&
        Objects.equals(this.email, inlineResponse2003.email) &&
        Objects.equals(this.emailVerified, inlineResponse2003.emailVerified) &&
        Objects.equals(this.name, inlineResponse2003.name) &&
        Objects.equals(this.exp, inlineResponse2003.exp) &&
        Objects.equals(this.iat, inlineResponse2003.iat) &&
        Objects.equals(this.iss, inlineResponse2003.iss);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, sub, email, emailVerified, name, exp, iat, iss);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2003 {\n");
    
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    sub: ").append(toIndentedString(sub)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    exp: ").append(toIndentedString(exp)).append("\n");
    sb.append("    iat: ").append(toIndentedString(iat)).append("\n");
    sb.append("    iss: ").append(toIndentedString(iss)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
