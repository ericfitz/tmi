/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CollaborationSession;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse409;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CollaborationApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public CollaborationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CollaborationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for createDiagramCollaborationSession
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDiagramCollaborationSessionCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDiagramCollaborationSessionValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createDiagramCollaborationSession(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling createDiagramCollaborationSession(Async)");
        }
        
        com.squareup.okhttp.Call call = createDiagramCollaborationSessionCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create diagram collaboration session
     * Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return CollaborationSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollaborationSession createDiagramCollaborationSession(UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<CollaborationSession> resp = createDiagramCollaborationSessionWithHttpInfo(threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Create diagram collaboration session
     * Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;CollaborationSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollaborationSession> createDiagramCollaborationSessionWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = createDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<CollaborationSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create diagram collaboration session (asynchronously)
     * Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDiagramCollaborationSessionAsync(UUID threatModelId, UUID diagramId, final ApiCallback<CollaborationSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollaborationSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for endDiagramCollaborationSession
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call endDiagramCollaborationSessionCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call endDiagramCollaborationSessionValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling endDiagramCollaborationSession(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling endDiagramCollaborationSession(Async)");
        }
        
        com.squareup.okhttp.Call call = endDiagramCollaborationSessionCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * End diagram collaboration session
     * Terminates the active collaboration session for a diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void endDiagramCollaborationSession(UUID threatModelId, UUID diagramId) throws ApiException {
        endDiagramCollaborationSessionWithHttpInfo(threatModelId, diagramId);
    }

    /**
     * End diagram collaboration session
     * Terminates the active collaboration session for a diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> endDiagramCollaborationSessionWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = endDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, null, null);
        return apiClient.execute(call);
    }

    /**
     * End diagram collaboration session (asynchronously)
     * Terminates the active collaboration session for a diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call endDiagramCollaborationSessionAsync(UUID threatModelId, UUID diagramId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = endDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCollaborationSessions
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCollaborationSessionsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/collaboration/sessions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCollaborationSessionsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getCollaborationSessionsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List active collaboration sessions
     * Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.
     * @return List&lt;CollaborationSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CollaborationSession> getCollaborationSessions() throws ApiException {
        ApiResponse<List<CollaborationSession>> resp = getCollaborationSessionsWithHttpInfo();
        return resp.getData();
    }

    /**
     * List active collaboration sessions
     * Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.
     * @return ApiResponse&lt;List&lt;CollaborationSession&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CollaborationSession>> getCollaborationSessionsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getCollaborationSessionsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<CollaborationSession>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List active collaboration sessions (asynchronously)
     * Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCollaborationSessionsAsync(final ApiCallback<List<CollaborationSession>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCollaborationSessionsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CollaborationSession>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiagramCollaborationSession
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiagramCollaborationSessionCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiagramCollaborationSessionValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getDiagramCollaborationSession(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling getDiagramCollaborationSession(Async)");
        }
        
        com.squareup.okhttp.Call call = getDiagramCollaborationSessionCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get diagram collaboration session
     * Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return CollaborationSession
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CollaborationSession getDiagramCollaborationSession(UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<CollaborationSession> resp = getDiagramCollaborationSessionWithHttpInfo(threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Get diagram collaboration session
     * Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;CollaborationSession&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CollaborationSession> getDiagramCollaborationSessionWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = getDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<CollaborationSession>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get diagram collaboration session (asynchronously)
     * Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiagramCollaborationSessionAsync(UUID threatModelId, UUID diagramId, final ApiCallback<CollaborationSession> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiagramCollaborationSessionValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CollaborationSession>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
