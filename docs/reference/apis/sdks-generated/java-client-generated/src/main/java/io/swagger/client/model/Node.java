/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Cell;
import io.swagger.client.model.CellTool;
import io.swagger.client.model.MarkupElement;
import io.swagger.client.model.NodePosition;
import io.swagger.client.model.NodeSize;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;
/**
 * Node
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class Node extends Cell {
  /**
   * Node type determining its visual representation and behavior
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    @SerializedName("actor")
    ACTOR("actor"),
    @SerializedName("process")
    PROCESS("process"),
    @SerializedName("store")
    STORE("store"),
    @SerializedName("security-boundary")
    SECURITY_BOUNDARY("security-boundary"),
    @SerializedName("text-box")
    TEXT_BOX("text-box");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ShapeEnum fromValue(String input) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ShapeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("shape")
  private ShapeEnum nodeShape = null;

  @SerializedName("position")
  private NodePosition position = null;

  @SerializedName("size")
  private NodeSize size = null;

  @SerializedName("angle")
  private BigDecimal angle = new BigDecimal(0);

  @SerializedName("attrs")
  private Object attrs = null;

  @SerializedName("ports")
  private Object ports = null;

  @SerializedName("parent")
  private UUID parent = null;

  public Node nodeShape(ShapeEnum nodeShape) {
    this.nodeShape = nodeShape;
    return this;
  }

   /**
   * Node type determining its visual representation and behavior
   * @return nodeShape
  **/
  @Schema(description = "Node type determining its visual representation and behavior")
  public ShapeEnum getNodeShape() {
    return nodeShape;
  }

  public void setNodeShape(ShapeEnum nodeShape) {
    this.nodeShape = nodeShape;
  }

  public Node position(NodePosition position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @Schema(required = true, description = "")
  public NodePosition getPosition() {
    return position;
  }

  public void setPosition(NodePosition position) {
    this.position = position;
  }

  public Node size(NodeSize size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @Schema(required = true, description = "")
  public NodeSize getSize() {
    return size;
  }

  public void setSize(NodeSize size) {
    this.size = size;
  }

  public Node angle(BigDecimal angle) {
    this.angle = angle;
    return this;
  }

   /**
   * Rotation angle in degrees
   * @return angle
  **/
  @Schema(description = "Rotation angle in degrees")
  public BigDecimal getAngle() {
    return angle;
  }

  public void setAngle(BigDecimal angle) {
    this.angle = angle;
  }

  public Node attrs(Object attrs) {
    this.attrs = attrs;
    return this;
  }

   /**
   * Visual styling attributes for the node
   * @return attrs
  **/
  @Schema(description = "Visual styling attributes for the node")
  public Object getAttrs() {
    return attrs;
  }

  public void setAttrs(Object attrs) {
    this.attrs = attrs;
  }

  public Node ports(Object ports) {
    this.ports = ports;
    return this;
  }

   /**
   * Port configuration for connections
   * @return ports
  **/
  @Schema(description = "Port configuration for connections")
  public Object getPorts() {
    return ports;
  }

  public void setPorts(Object ports) {
    this.ports = ports;
  }

  public Node parent(UUID parent) {
    this.parent = parent;
    return this;
  }

   /**
   * ID of the parent cell for nested/grouped nodes (UUID)
   * @return parent
  **/
  @Schema(description = "ID of the parent cell for nested/grouped nodes (UUID)")
  public UUID getParent() {
    return parent;
  }

  public void setParent(UUID parent) {
    this.parent = parent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.nodeShape, node.nodeShape) &&
        Objects.equals(this.position, node.position) &&
        Objects.equals(this.size, node.size) &&
        Objects.equals(this.angle, node.angle) &&
        Objects.equals(this.attrs, node.attrs) &&
        Objects.equals(this.ports, node.ports) &&
        Objects.equals(this.parent, node.parent) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeShape, position, size, angle, attrs, ports, parent, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    nodeShape: ").append(toIndentedString(nodeShape)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    attrs: ").append(toIndentedString(attrs)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
