/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Asset;
import io.swagger.client.model.AssetInput;
import java.math.BigDecimal;
import io.swagger.client.model.CreateDiagramRequest;
import io.swagger.client.model.Diagram;
import io.swagger.client.model.DiagramListItem;
import io.swagger.client.model.Document;
import io.swagger.client.model.DocumentInput;
import io.swagger.client.model.Error;
import io.swagger.client.model.Metadata;
import io.swagger.client.model.MetadataKeyBody;
import io.swagger.client.model.MetadataKeyBody1;
import io.swagger.client.model.MetadataKeyBody2;
import io.swagger.client.model.MetadataKeyBody3;
import io.swagger.client.model.MetadataKeyBody4;
import io.swagger.client.model.MetadataKeyBody5;
import io.swagger.client.model.Note;
import io.swagger.client.model.NoteInput;
import io.swagger.client.model.NoteListItem;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.Repository;
import io.swagger.client.model.RepositoryInput;
import io.swagger.client.model.Threat;
import io.swagger.client.model.ThreatInput;
import io.swagger.client.model.ThreatsThreatIdBody;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ThreatModelSubResourcesApi {
    private ApiClient apiClient;
    private Map<String, String> headers;

    public ThreatModelSubResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ThreatModelSubResourcesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public void setHeadersOverrides(Map<String, String> headers) {
        this.headers = headers;
    }

    /**
     * Build call for bulkCreateDiagramMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateDiagramMetadataCall(List<Metadata> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateDiagramMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateDiagramMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateDiagramMetadata(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling bulkCreateDiagramMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateDiagramMetadataCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create diagram metadata
     * Creates multiple metadata entries in a single operation for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateDiagramMetadata(List<Metadata> body, UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateDiagramMetadataWithHttpInfo(body, threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Bulk create diagram metadata
     * Creates multiple metadata entries in a single operation for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateDiagramMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create diagram metadata (asynchronously)
     * Creates multiple metadata entries in a single operation for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateDiagramMetadataAsync(List<Metadata> body, UUID threatModelId, UUID diagramId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateDocumentMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateDocumentMetadataCall(List<Metadata> body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateDocumentMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateDocumentMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateDocumentMetadata(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling bulkCreateDocumentMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateDocumentMetadataCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create document metadata
     * Creates multiple metadata entries in a single operation for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateDocumentMetadata(List<Metadata> body, UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateDocumentMetadataWithHttpInfo(body, threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Bulk create document metadata
     * Creates multiple metadata entries in a single operation for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateDocumentMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create document metadata (asynchronously)
     * Creates multiple metadata entries in a single operation for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateDocumentMetadataAsync(List<Metadata> body, UUID threatModelId, UUID documentId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateNoteMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateNoteMetadataCall(List<Metadata> body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateNoteMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateNoteMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateNoteMetadata(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling bulkCreateNoteMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateNoteMetadataCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create note metadata
     * Creates multiple metadata key-value pairs for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateNoteMetadata(List<Metadata> body, UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateNoteMetadataWithHttpInfo(body, threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Bulk create note metadata
     * Creates multiple metadata key-value pairs for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateNoteMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateNoteMetadataValidateBeforeCall(body, threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create note metadata (asynchronously)
     * Creates multiple metadata key-value pairs for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateNoteMetadataAsync(List<Metadata> body, UUID threatModelId, UUID noteId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateNoteMetadataValidateBeforeCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateRepositoryMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateRepositoryMetadataCall(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateRepositoryMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateRepositoryMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateRepositoryMetadata(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling bulkCreateRepositoryMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateRepositoryMetadataCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create source metadata
     * Creates multiple metadata entries in a single operation for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateRepositoryMetadata(List<Metadata> body, UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateRepositoryMetadataWithHttpInfo(body, threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Bulk create source metadata
     * Creates multiple metadata entries in a single operation for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateRepositoryMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create source metadata (asynchronously)
     * Creates multiple metadata entries in a single operation for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateRepositoryMetadataAsync(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatMetadataCall(List<Metadata> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatMetadata(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling bulkCreateThreatMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatMetadataCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create threat metadata
     * Creates multiple metadata entries in a single operation for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateThreatMetadata(List<Metadata> body, UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateThreatMetadataWithHttpInfo(body, threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Bulk create threat metadata
     * Creates multiple metadata entries in a single operation for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateThreatMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatMetadataValidateBeforeCall(body, threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create threat metadata (asynchronously)
     * Creates multiple metadata entries in a single operation for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatMetadataAsync(List<Metadata> body, UUID threatModelId, UUID threatId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatMetadataValidateBeforeCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelAssetMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelAssetMetadataCall(List<Metadata> body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelAssetMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling bulkCreateThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetMetadataCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create asset metadata
     * Creates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateThreatModelAssetMetadata(List<Metadata> body, UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateThreatModelAssetMetadataWithHttpInfo(body, threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Bulk create asset metadata
     * Creates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateThreatModelAssetMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create asset metadata (asynchronously)
     * Creates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelAssetMetadataAsync(List<Metadata> body, UUID threatModelId, UUID assetId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelAssets
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelAssetsCall(List<Asset> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelAssetsValidateBeforeCall(List<Asset> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelAssets(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelAssets(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create assets
     * Creates multiple assets within the specified threat model (maximum 50 per request)
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Asset> bulkCreateThreatModelAssets(List<Asset> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Asset>> resp = bulkCreateThreatModelAssetsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk create assets
     * Creates multiple assets within the specified threat model (maximum 50 per request)
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Asset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Asset>> bulkCreateThreatModelAssetsWithHttpInfo(List<Asset> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create assets (asynchronously)
     * Creates multiple assets within the specified threat model (maximum 50 per request)
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelAssetsAsync(List<Asset> body, UUID threatModelId, final ApiCallback<List<Asset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelAssetsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelDocuments
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelDocumentsCall(List<Document> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelDocumentsValidateBeforeCall(List<Document> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelDocuments(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelDocuments(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelDocumentsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create documents
     * Creates multiple documents in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Document> bulkCreateThreatModelDocuments(List<Document> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Document>> resp = bulkCreateThreatModelDocumentsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk create documents
     * Creates multiple documents in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Document>> bulkCreateThreatModelDocumentsWithHttpInfo(List<Document> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelDocumentsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create documents (asynchronously)
     * Creates multiple documents in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelDocumentsAsync(List<Document> body, UUID threatModelId, final ApiCallback<List<Document>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelDocumentsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelMetadataCall(List<Metadata> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelMetadataCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create threat model metadata
     * Creates multiple metadata entries in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkCreateThreatModelMetadata(List<Metadata> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkCreateThreatModelMetadataWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk create threat model metadata
     * Creates multiple metadata entries in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkCreateThreatModelMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelMetadataValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create threat model metadata (asynchronously)
     * Creates multiple metadata entries in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelMetadataAsync(List<Metadata> body, UUID threatModelId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelMetadataValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelRepositories
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelRepositoriesCall(List<Repository> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelRepositoriesValidateBeforeCall(List<Repository> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelRepositories(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelRepositories(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelRepositoriesCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create sources
     * Creates multiple source references in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Repository> bulkCreateThreatModelRepositories(List<Repository> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Repository>> resp = bulkCreateThreatModelRepositoriesWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk create sources
     * Creates multiple source references in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Repository>> bulkCreateThreatModelRepositoriesWithHttpInfo(List<Repository> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelRepositoriesValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create sources (asynchronously)
     * Creates multiple source references in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelRepositoriesAsync(List<Repository> body, UUID threatModelId, final ApiCallback<List<Repository>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelRepositoriesValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkCreateThreatModelThreats
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelThreatsCall(List<Threat> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkCreateThreatModelThreatsValidateBeforeCall(List<Threat> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkCreateThreatModelThreats(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkCreateThreatModelThreats(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkCreateThreatModelThreatsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk create threats
     * Creates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Threat> bulkCreateThreatModelThreats(List<Threat> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Threat>> resp = bulkCreateThreatModelThreatsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk create threats
     * Creates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Threat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Threat>> bulkCreateThreatModelThreatsWithHttpInfo(List<Threat> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkCreateThreatModelThreatsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk create threats (asynchronously)
     * Creates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkCreateThreatModelThreatsAsync(List<Threat> body, UUID threatModelId, final ApiCallback<List<Threat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkCreateThreatModelThreatsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpdateNoteMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateNoteMetadataCall(List<Metadata> body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpdateNoteMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpdateNoteMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpdateNoteMetadata(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling bulkUpdateNoteMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpdateNoteMetadataCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk update note metadata
     * Updates multiple metadata entries for the specified note in a single operation
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpdateNoteMetadata(List<Metadata> body, UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpdateNoteMetadataWithHttpInfo(body, threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Bulk update note metadata
     * Updates multiple metadata entries for the specified note in a single operation
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpdateNoteMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpdateNoteMetadataValidateBeforeCall(body, threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk update note metadata (asynchronously)
     * Updates multiple metadata entries for the specified note in a single operation
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateNoteMetadataAsync(List<Metadata> body, UUID threatModelId, UUID noteId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpdateNoteMetadataValidateBeforeCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpdateThreatModelThreats
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateThreatModelThreatsCall(List<Threat> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpdateThreatModelThreatsValidateBeforeCall(List<Threat> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpdateThreatModelThreats(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpdateThreatModelThreats(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpdateThreatModelThreatsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk update threats
     * Updates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Threat> bulkUpdateThreatModelThreats(List<Threat> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Threat>> resp = bulkUpdateThreatModelThreatsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk update threats
     * Updates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Threat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Threat>> bulkUpdateThreatModelThreatsWithHttpInfo(List<Threat> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpdateThreatModelThreatsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk update threats (asynchronously)
     * Updates multiple threats in a single operation for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpdateThreatModelThreatsAsync(List<Threat> body, UUID threatModelId, final ApiCallback<List<Threat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpdateThreatModelThreatsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertDiagramMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertDiagramMetadataCall(List<Metadata> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertDiagramMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertDiagramMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertDiagramMetadata(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling bulkUpsertDiagramMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertDiagramMetadataCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert diagram metadata
     * Creates or updates multiple metadata key-value pairs for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertDiagramMetadata(List<Metadata> body, UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertDiagramMetadataWithHttpInfo(body, threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Bulk upsert diagram metadata
     * Creates or updates multiple metadata key-value pairs for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertDiagramMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert diagram metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertDiagramMetadataAsync(List<Metadata> body, UUID threatModelId, UUID diagramId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertDocumentMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertDocumentMetadataCall(List<Metadata> body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertDocumentMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertDocumentMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertDocumentMetadata(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling bulkUpsertDocumentMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertDocumentMetadataCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert document metadata
     * Creates or updates multiple metadata key-value pairs for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertDocumentMetadata(List<Metadata> body, UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertDocumentMetadataWithHttpInfo(body, threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Bulk upsert document metadata
     * Creates or updates multiple metadata key-value pairs for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertDocumentMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert document metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertDocumentMetadataAsync(List<Metadata> body, UUID threatModelId, UUID documentId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertRepositoryMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertRepositoryMetadataCall(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertRepositoryMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertRepositoryMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertRepositoryMetadata(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling bulkUpsertRepositoryMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertRepositoryMetadataCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert repository metadata
     * Creates or updates multiple metadata key-value pairs for the specified repository
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertRepositoryMetadata(List<Metadata> body, UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertRepositoryMetadataWithHttpInfo(body, threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Bulk upsert repository metadata
     * Creates or updates multiple metadata key-value pairs for the specified repository
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertRepositoryMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert repository metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified repository
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertRepositoryMetadataAsync(List<Metadata> body, UUID threatModelId, UUID repositoryId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatMetadataCall(List<Metadata> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatMetadata(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling bulkUpsertThreatMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatMetadataCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert threat metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertThreatMetadata(List<Metadata> body, UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertThreatMetadataWithHttpInfo(body, threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Bulk upsert threat metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertThreatMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatMetadataValidateBeforeCall(body, threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert threat metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatMetadataAsync(List<Metadata> body, UUID threatModelId, UUID threatId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatMetadataValidateBeforeCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatModelAssetMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelAssetMetadataCall(List<Metadata> body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatModelAssetMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling bulkUpsertThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetMetadataCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert asset metadata
     * Creates or updates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertThreatModelAssetMetadata(List<Metadata> body, UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertThreatModelAssetMetadataWithHttpInfo(body, threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Bulk upsert asset metadata
     * Creates or updates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertThreatModelAssetMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert asset metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelAssetMetadataAsync(List<Metadata> body, UUID threatModelId, UUID assetId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatModelAssets
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelAssetsCall(List<Asset> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatModelAssetsValidateBeforeCall(List<Asset> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatModelAssets(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelAssets(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert assets
     * Create or update multiple assets in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Asset> bulkUpsertThreatModelAssets(List<Asset> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Asset>> resp = bulkUpsertThreatModelAssetsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk upsert assets
     * Create or update multiple assets in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Asset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Asset>> bulkUpsertThreatModelAssetsWithHttpInfo(List<Asset> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert assets (asynchronously)
     * Create or update multiple assets in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelAssetsAsync(List<Asset> body, UUID threatModelId, final ApiCallback<List<Asset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatModelAssetsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatModelDocuments
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelDocumentsCall(List<Document> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatModelDocumentsValidateBeforeCall(List<Document> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatModelDocuments(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelDocuments(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatModelDocumentsCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert documents
     * Create or update multiple documents in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Document> bulkUpsertThreatModelDocuments(List<Document> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Document>> resp = bulkUpsertThreatModelDocumentsWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk upsert documents
     * Create or update multiple documents in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Document>> bulkUpsertThreatModelDocumentsWithHttpInfo(List<Document> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatModelDocumentsValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert documents (asynchronously)
     * Create or update multiple documents in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelDocumentsAsync(List<Document> body, UUID threatModelId, final ApiCallback<List<Document>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatModelDocumentsValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatModelMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelMetadataCall(List<Metadata> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatModelMetadataValidateBeforeCall(List<Metadata> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatModelMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatModelMetadataCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert threat model metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> bulkUpsertThreatModelMetadata(List<Metadata> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Metadata>> resp = bulkUpsertThreatModelMetadataWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk upsert threat model metadata
     * Creates or updates multiple metadata key-value pairs for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> bulkUpsertThreatModelMetadataWithHttpInfo(List<Metadata> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatModelMetadataValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert threat model metadata (asynchronously)
     * Creates or updates multiple metadata key-value pairs for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelMetadataAsync(List<Metadata> body, UUID threatModelId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatModelMetadataValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bulkUpsertThreatModelRepositories
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelRepositoriesCall(List<Repository> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/bulk"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bulkUpsertThreatModelRepositoriesValidateBeforeCall(List<Repository> body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling bulkUpsertThreatModelRepositories(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling bulkUpsertThreatModelRepositories(Async)");
        }
        
        com.squareup.okhttp.Call call = bulkUpsertThreatModelRepositoriesCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Bulk upsert repositories
     * Create or update multiple repositories in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Repository> bulkUpsertThreatModelRepositories(List<Repository> body, UUID threatModelId) throws ApiException {
        ApiResponse<List<Repository>> resp = bulkUpsertThreatModelRepositoriesWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Bulk upsert repositories
     * Create or update multiple repositories in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Repository>> bulkUpsertThreatModelRepositoriesWithHttpInfo(List<Repository> body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = bulkUpsertThreatModelRepositoriesValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bulk upsert repositories (asynchronously)
     * Create or update multiple repositories in a single request
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bulkUpsertThreatModelRepositoriesAsync(List<Repository> body, UUID threatModelId, final ApiCallback<List<Repository>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bulkUpsertThreatModelRepositoriesValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDiagramMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDiagramMetadataCall(Metadata body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDiagramMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDiagramMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createDiagramMetadata(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling createDiagramMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createDiagramMetadataCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create diagram metadata
     * Creates a new metadata entry for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createDiagramMetadata(Metadata body, UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<Metadata> resp = createDiagramMetadataWithHttpInfo(body, threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Create diagram metadata
     * Creates a new metadata entry for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createDiagramMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = createDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create diagram metadata (asynchronously)
     * Creates a new metadata entry for the specified diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDiagramMetadataAsync(Metadata body, UUID threatModelId, UUID diagramId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDiagramMetadataValidateBeforeCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createDocumentMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createDocumentMetadataCall(Metadata body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createDocumentMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDocumentMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createDocumentMetadata(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling createDocumentMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createDocumentMetadataCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create document metadata
     * Creates new metadata entry for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createDocumentMetadata(Metadata body, UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<Metadata> resp = createDocumentMetadataWithHttpInfo(body, threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Create document metadata
     * Creates new metadata entry for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createDocumentMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = createDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create document metadata (asynchronously)
     * Creates new metadata entry for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createDocumentMetadataAsync(Metadata body, UUID threatModelId, UUID documentId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createDocumentMetadataValidateBeforeCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createNoteMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createNoteMetadataCall(Metadata body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createNoteMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createNoteMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createNoteMetadata(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling createNoteMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createNoteMetadataCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create note metadata
     * Creates new metadata entry for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createNoteMetadata(Metadata body, UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<Metadata> resp = createNoteMetadataWithHttpInfo(body, threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Create note metadata
     * Creates new metadata entry for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createNoteMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = createNoteMetadataValidateBeforeCall(body, threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create note metadata (asynchronously)
     * Creates new metadata entry for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createNoteMetadataAsync(Metadata body, UUID threatModelId, UUID noteId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createNoteMetadataValidateBeforeCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createRepositoryMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createRepositoryMetadataCall(Metadata body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createRepositoryMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRepositoryMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createRepositoryMetadata(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling createRepositoryMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createRepositoryMetadataCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create source metadata
     * Creates new metadata entry for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createRepositoryMetadata(Metadata body, UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<Metadata> resp = createRepositoryMetadataWithHttpInfo(body, threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Create source metadata
     * Creates new metadata entry for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createRepositoryMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = createRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create source metadata (asynchronously)
     * Creates new metadata entry for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createRepositoryMetadataAsync(Metadata body, UUID threatModelId, UUID repositoryId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createRepositoryMetadataValidateBeforeCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatMetadataCall(Metadata body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatMetadata(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling createThreatMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatMetadataCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create threat metadata
     * Creates new metadata entry for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createThreatMetadata(Metadata body, UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<Metadata> resp = createThreatMetadataWithHttpInfo(body, threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Create threat metadata
     * Creates new metadata entry for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createThreatMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatMetadataValidateBeforeCall(body, threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create threat metadata (asynchronously)
     * Creates new metadata entry for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatMetadataAsync(Metadata body, UUID threatModelId, UUID threatId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatMetadataValidateBeforeCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelAsset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelAssetCall(AssetInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelAssetValidateBeforeCall(AssetInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelAsset(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelAsset(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelAssetCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new asset
     * Creates a new asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Asset createThreatModelAsset(AssetInput body, UUID threatModelId) throws ApiException {
        ApiResponse<Asset> resp = createThreatModelAssetWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new asset
     * Creates a new asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Asset> createThreatModelAssetWithHttpInfo(AssetInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelAssetValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new asset (asynchronously)
     * Creates a new asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelAssetAsync(AssetInput body, UUID threatModelId, final ApiCallback<Asset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelAssetValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelAssetMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelAssetMetadataCall(Metadata body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelAssetMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling createThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelAssetMetadataCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add metadata to an asset
     * Adds a new metadata key-value pair to the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createThreatModelAssetMetadata(Metadata body, UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<Metadata> resp = createThreatModelAssetMetadataWithHttpInfo(body, threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Add metadata to an asset
     * Adds a new metadata key-value pair to the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createThreatModelAssetMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add metadata to an asset (asynchronously)
     * Adds a new metadata key-value pair to the specified asset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelAssetMetadataAsync(Metadata body, UUID threatModelId, UUID assetId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelDiagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelDiagramCall(CreateDiagramRequest body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelDiagramValidateBeforeCall(CreateDiagramRequest body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelDiagram(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelDiagram(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelDiagramCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new diagram
     * Creates a new diagram within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Diagram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Diagram createThreatModelDiagram(CreateDiagramRequest body, UUID threatModelId) throws ApiException {
        ApiResponse<Diagram> resp = createThreatModelDiagramWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new diagram
     * Creates a new diagram within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Diagram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Diagram> createThreatModelDiagramWithHttpInfo(CreateDiagramRequest body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelDiagramValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new diagram (asynchronously)
     * Creates a new diagram within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelDiagramAsync(CreateDiagramRequest body, UUID threatModelId, final ApiCallback<Diagram> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelDiagramValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelDocument
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelDocumentCall(DocumentInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelDocumentValidateBeforeCall(DocumentInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelDocument(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelDocumentCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new document
     * Creates a new document within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document createThreatModelDocument(DocumentInput body, UUID threatModelId) throws ApiException {
        ApiResponse<Document> resp = createThreatModelDocumentWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new document
     * Creates a new document within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> createThreatModelDocumentWithHttpInfo(DocumentInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelDocumentValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new document (asynchronously)
     * Creates a new document within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelDocumentAsync(DocumentInput body, UUID threatModelId, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelDocumentValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelMetadataCall(Metadata body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelMetadataValidateBeforeCall(Metadata body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelMetadataCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create threat model metadata
     * Creates new metadata entry for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata createThreatModelMetadata(Metadata body, UUID threatModelId) throws ApiException {
        ApiResponse<Metadata> resp = createThreatModelMetadataWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create threat model metadata
     * Creates new metadata entry for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> createThreatModelMetadataWithHttpInfo(Metadata body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelMetadataValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create threat model metadata (asynchronously)
     * Creates new metadata entry for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelMetadataAsync(Metadata body, UUID threatModelId, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelMetadataValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelNote
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelNoteCall(NoteInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelNoteValidateBeforeCall(NoteInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelNote(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelNote(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelNoteCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new note
     * Creates a new note within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note createThreatModelNote(NoteInput body, UUID threatModelId) throws ApiException {
        ApiResponse<Note> resp = createThreatModelNoteWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new note
     * Creates a new note within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> createThreatModelNoteWithHttpInfo(NoteInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelNoteValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new note (asynchronously)
     * Creates a new note within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelNoteAsync(NoteInput body, UUID threatModelId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelNoteValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelRepository
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelRepositoryCall(RepositoryInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelRepositoryValidateBeforeCall(RepositoryInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelRepository(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelRepository(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelRepositoryCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new source reference
     * Creates a new source code reference within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Repository createThreatModelRepository(RepositoryInput body, UUID threatModelId) throws ApiException {
        ApiResponse<Repository> resp = createThreatModelRepositoryWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new source reference
     * Creates a new source code reference within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Repository> createThreatModelRepositoryWithHttpInfo(RepositoryInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelRepositoryValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new source reference (asynchronously)
     * Creates a new source code reference within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelRepositoryAsync(RepositoryInput body, UUID threatModelId, final ApiCallback<Repository> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelRepositoryValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createThreatModelThreat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createThreatModelThreatCall(ThreatInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createThreatModelThreatValidateBeforeCall(ThreatInput body, UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling createThreatModelThreat(Async)");
        }
        
        com.squareup.okhttp.Call call = createThreatModelThreatCall(body, threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new threat
     * Creates a new threat within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return Threat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Threat createThreatModelThreat(ThreatInput body, UUID threatModelId) throws ApiException {
        ApiResponse<Threat> resp = createThreatModelThreatWithHttpInfo(body, threatModelId);
        return resp.getData();
    }

    /**
     * Create a new threat
     * Creates a new threat within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Threat> createThreatModelThreatWithHttpInfo(ThreatInput body, UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = createThreatModelThreatValidateBeforeCall(body, threatModelId, null, null);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new threat (asynchronously)
     * Creates a new threat within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createThreatModelThreatAsync(ThreatInput body, UUID threatModelId, final ApiCallback<Threat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createThreatModelThreatValidateBeforeCall(body, threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteDiagramMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDiagramMetadataByKeyCall(UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDiagramMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling deleteDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteDiagramMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDiagramMetadataByKeyCall(threatModelId, diagramId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete diagram metadata by key
     * Removes a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDiagramMetadataByKey(UUID threatModelId, UUID diagramId, String key) throws ApiException {
        deleteDiagramMetadataByKeyWithHttpInfo(threatModelId, diagramId, key);
    }

    /**
     * Delete diagram metadata by key
     * Removes a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDiagramMetadataByKeyWithHttpInfo(UUID threatModelId, UUID diagramId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteDiagramMetadataByKeyValidateBeforeCall(threatModelId, diagramId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete diagram metadata by key (asynchronously)
     * Removes a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDiagramMetadataByKeyAsync(UUID threatModelId, UUID diagramId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDiagramMetadataByKeyValidateBeforeCall(threatModelId, diagramId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteDocumentMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentMetadataByKeyCall(UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDocumentMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteDocumentMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteDocumentMetadataByKeyCall(threatModelId, documentId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete document metadata by key
     * Deletes a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDocumentMetadataByKey(UUID threatModelId, UUID documentId, String key) throws ApiException {
        deleteDocumentMetadataByKeyWithHttpInfo(threatModelId, documentId, key);
    }

    /**
     * Delete document metadata by key
     * Deletes a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDocumentMetadataByKeyWithHttpInfo(UUID threatModelId, UUID documentId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentMetadataByKeyValidateBeforeCall(threatModelId, documentId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete document metadata by key (asynchronously)
     * Deletes a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentMetadataByKeyAsync(UUID threatModelId, UUID documentId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentMetadataByKeyValidateBeforeCall(threatModelId, documentId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteNoteMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteNoteMetadataByKeyCall(UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteNoteMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteNoteMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteNoteMetadataByKeyCall(threatModelId, noteId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete note metadata by key
     * Deletes a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteNoteMetadataByKey(UUID threatModelId, UUID noteId, String key) throws ApiException {
        deleteNoteMetadataByKeyWithHttpInfo(threatModelId, noteId, key);
    }

    /**
     * Delete note metadata by key
     * Deletes a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteNoteMetadataByKeyWithHttpInfo(UUID threatModelId, UUID noteId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteNoteMetadataByKeyValidateBeforeCall(threatModelId, noteId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete note metadata by key (asynchronously)
     * Deletes a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteNoteMetadataByKeyAsync(UUID threatModelId, UUID noteId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteNoteMetadataByKeyValidateBeforeCall(threatModelId, noteId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteRepositoryMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteRepositoryMetadataByKeyCall(UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteRepositoryMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling deleteRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteRepositoryMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteRepositoryMetadataByKeyCall(threatModelId, repositoryId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete source metadata by key
     * Deletes a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteRepositoryMetadataByKey(UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        deleteRepositoryMetadataByKeyWithHttpInfo(threatModelId, repositoryId, key);
    }

    /**
     * Delete source metadata by key
     * Deletes a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteRepositoryMetadataByKeyWithHttpInfo(UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteRepositoryMetadataByKeyValidateBeforeCall(threatModelId, repositoryId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete source metadata by key (asynchronously)
     * Deletes a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteRepositoryMetadataByKeyAsync(UUID threatModelId, UUID repositoryId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteRepositoryMetadataByKeyValidateBeforeCall(threatModelId, repositoryId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatMetadataByKeyCall(UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling deleteThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteThreatMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatMetadataByKeyCall(threatModelId, threatId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete threat metadata by key
     * Deletes a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatMetadataByKey(UUID threatModelId, UUID threatId, String key) throws ApiException {
        deleteThreatMetadataByKeyWithHttpInfo(threatModelId, threatId, key);
    }

    /**
     * Delete threat metadata by key
     * Deletes a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatMetadataByKeyWithHttpInfo(UUID threatModelId, UUID threatId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatMetadataByKeyValidateBeforeCall(threatModelId, threatId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete threat metadata by key (asynchronously)
     * Deletes a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatMetadataByKeyAsync(UUID threatModelId, UUID threatId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatMetadataByKeyValidateBeforeCall(threatModelId, threatId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelAsset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelAssetCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelAssetValidateBeforeCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelAsset(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling deleteThreatModelAsset(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelAssetCall(threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an asset
     * Deletes an asset from the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelAsset(UUID threatModelId, UUID assetId) throws ApiException {
        deleteThreatModelAssetWithHttpInfo(threatModelId, assetId);
    }

    /**
     * Delete an asset
     * Deletes an asset from the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelAssetWithHttpInfo(UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelAssetValidateBeforeCall(threatModelId, assetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an asset (asynchronously)
     * Deletes an asset from the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelAssetAsync(UUID threatModelId, UUID assetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelAssetValidateBeforeCall(threatModelId, assetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelAssetMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelAssetMetadataCall(UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelAssetMetadataValidateBeforeCall(UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling deleteThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelAssetMetadataCall(threatModelId, assetId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete asset metadata
     * Deletes a metadata key-value pair from the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelAssetMetadata(UUID threatModelId, UUID assetId, String key) throws ApiException {
        deleteThreatModelAssetMetadataWithHttpInfo(threatModelId, assetId, key);
    }

    /**
     * Delete asset metadata
     * Deletes a metadata key-value pair from the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelAssetMetadataWithHttpInfo(UUID threatModelId, UUID assetId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelAssetMetadataValidateBeforeCall(threatModelId, assetId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete asset metadata (asynchronously)
     * Deletes a metadata key-value pair from the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelAssetMetadataAsync(UUID threatModelId, UUID assetId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelAssetMetadataValidateBeforeCall(threatModelId, assetId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelDiagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelDiagramCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelDiagramValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelDiagram(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling deleteThreatModelDiagram(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelDiagramCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a diagram
     * Permanently removes a diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelDiagram(UUID threatModelId, UUID diagramId) throws ApiException {
        deleteThreatModelDiagramWithHttpInfo(threatModelId, diagramId);
    }

    /**
     * Delete a diagram
     * Permanently removes a diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelDiagramWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelDiagramValidateBeforeCall(threatModelId, diagramId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a diagram (asynchronously)
     * Permanently removes a diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelDiagramAsync(UUID threatModelId, UUID diagramId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelDiagramValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelDocument
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelDocumentCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelDocumentValidateBeforeCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelDocument(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling deleteThreatModelDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelDocumentCall(threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a document
     * Deletes a specific document from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelDocument(UUID threatModelId, UUID documentId) throws ApiException {
        deleteThreatModelDocumentWithHttpInfo(threatModelId, documentId);
    }

    /**
     * Delete a document
     * Deletes a specific document from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelDocumentWithHttpInfo(UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelDocumentValidateBeforeCall(threatModelId, documentId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a document (asynchronously)
     * Deletes a specific document from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelDocumentAsync(UUID threatModelId, UUID documentId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelDocumentValidateBeforeCall(threatModelId, documentId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelMetadataByKeyCall(UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelMetadataByKeyValidateBeforeCall(UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteThreatModelMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelMetadataByKeyCall(threatModelId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete threat model metadata by key
     * Deletes a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelMetadataByKey(UUID threatModelId, String key) throws ApiException {
        deleteThreatModelMetadataByKeyWithHttpInfo(threatModelId, key);
    }

    /**
     * Delete threat model metadata by key
     * Deletes a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelMetadataByKeyWithHttpInfo(UUID threatModelId, String key) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelMetadataByKeyValidateBeforeCall(threatModelId, key, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete threat model metadata by key (asynchronously)
     * Deletes a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to delete (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelMetadataByKeyAsync(UUID threatModelId, String key, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelMetadataByKeyValidateBeforeCall(threatModelId, key, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelNote
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelNoteCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelNoteValidateBeforeCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling deleteThreatModelNote(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelNoteCall(threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a note
     * Deletes a specific note from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelNote(UUID threatModelId, UUID noteId) throws ApiException {
        deleteThreatModelNoteWithHttpInfo(threatModelId, noteId);
    }

    /**
     * Delete a note
     * Deletes a specific note from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelNoteWithHttpInfo(UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelNoteValidateBeforeCall(threatModelId, noteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a note (asynchronously)
     * Deletes a specific note from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelNoteAsync(UUID threatModelId, UUID noteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelNoteValidateBeforeCall(threatModelId, noteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelRepository
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelRepositoryCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelRepositoryValidateBeforeCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelRepository(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling deleteThreatModelRepository(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelRepositoryCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a source reference
     * Deletes a specific source code reference from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelRepository(UUID threatModelId, UUID repositoryId) throws ApiException {
        deleteThreatModelRepositoryWithHttpInfo(threatModelId, repositoryId);
    }

    /**
     * Delete a source reference
     * Deletes a specific source code reference from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelRepositoryWithHttpInfo(UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelRepositoryValidateBeforeCall(threatModelId, repositoryId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a source reference (asynchronously)
     * Deletes a specific source code reference from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelRepositoryAsync(UUID threatModelId, UUID repositoryId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelRepositoryValidateBeforeCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteThreatModelThreat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelThreatCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteThreatModelThreatValidateBeforeCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling deleteThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling deleteThreatModelThreat(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteThreatModelThreatCall(threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a threat
     * Deletes a specific threat from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteThreatModelThreat(UUID threatModelId, UUID threatId) throws ApiException {
        deleteThreatModelThreatWithHttpInfo(threatModelId, threatId);
    }

    /**
     * Delete a threat
     * Deletes a specific threat from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteThreatModelThreatWithHttpInfo(UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = deleteThreatModelThreatValidateBeforeCall(threatModelId, threatId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a threat (asynchronously)
     * Deletes a specific threat from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteThreatModelThreatAsync(UUID threatModelId, UUID threatId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteThreatModelThreatValidateBeforeCall(threatModelId, threatId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getDiagramMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiagramMetadataCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiagramMetadataValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getDiagramMetadata(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling getDiagramMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getDiagramMetadataCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get diagram metadata
     * Retrieves all metadata entries for the specified diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getDiagramMetadata(UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getDiagramMetadataWithHttpInfo(threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Get diagram metadata
     * Retrieves all metadata entries for the specified diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getDiagramMetadataWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = getDiagramMetadataValidateBeforeCall(threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get diagram metadata (asynchronously)
     * Retrieves all metadata entries for the specified diagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiagramMetadataAsync(UUID threatModelId, UUID diagramId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiagramMetadataValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDiagramMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDiagramMetadataByKeyCall(UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDiagramMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling getDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getDiagramMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getDiagramMetadataByKeyCall(threatModelId, diagramId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get diagram metadata by key
     * Retrieves a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getDiagramMetadataByKey(UUID threatModelId, UUID diagramId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getDiagramMetadataByKeyWithHttpInfo(threatModelId, diagramId, key);
        return resp.getData();
    }

    /**
     * Get diagram metadata by key
     * Retrieves a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getDiagramMetadataByKeyWithHttpInfo(UUID threatModelId, UUID diagramId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getDiagramMetadataByKeyValidateBeforeCall(threatModelId, diagramId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get diagram metadata by key (asynchronously)
     * Retrieves a specific metadata entry for the diagram by key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDiagramMetadataByKeyAsync(UUID threatModelId, UUID diagramId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDiagramMetadataByKeyValidateBeforeCall(threatModelId, diagramId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentMetadataCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentMetadataValidateBeforeCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getDocumentMetadata(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getDocumentMetadataCall(threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get document metadata
     * Returns all metadata key-value pairs for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getDocumentMetadata(UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getDocumentMetadataWithHttpInfo(threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Get document metadata
     * Returns all metadata key-value pairs for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getDocumentMetadataWithHttpInfo(UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentMetadataValidateBeforeCall(threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document metadata (asynchronously)
     * Returns all metadata key-value pairs for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentMetadataAsync(UUID threatModelId, UUID documentId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentMetadataValidateBeforeCall(threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDocumentMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentMetadataByKeyCall(UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getDocumentMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getDocumentMetadataByKeyCall(threatModelId, documentId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get document metadata by key
     * Returns a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getDocumentMetadataByKey(UUID threatModelId, UUID documentId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getDocumentMetadataByKeyWithHttpInfo(threatModelId, documentId, key);
        return resp.getData();
    }

    /**
     * Get document metadata by key
     * Returns a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getDocumentMetadataByKeyWithHttpInfo(UUID threatModelId, UUID documentId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentMetadataByKeyValidateBeforeCall(threatModelId, documentId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get document metadata by key (asynchronously)
     * Returns a specific metadata entry by key for the specified document
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentMetadataByKeyAsync(UUID threatModelId, UUID documentId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentMetadataByKeyValidateBeforeCall(threatModelId, documentId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNoteMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNoteMetadataCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNoteMetadataValidateBeforeCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getNoteMetadata(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getNoteMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getNoteMetadataCall(threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get note metadata
     * Returns all metadata key-value pairs for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getNoteMetadata(UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getNoteMetadataWithHttpInfo(threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Get note metadata
     * Returns all metadata key-value pairs for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getNoteMetadataWithHttpInfo(UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = getNoteMetadataValidateBeforeCall(threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get note metadata (asynchronously)
     * Returns all metadata key-value pairs for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNoteMetadataAsync(UUID threatModelId, UUID noteId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNoteMetadataValidateBeforeCall(threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNoteMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNoteMetadataByKeyCall(UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNoteMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getNoteMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getNoteMetadataByKeyCall(threatModelId, noteId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get note metadata by key
     * Returns a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getNoteMetadataByKey(UUID threatModelId, UUID noteId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getNoteMetadataByKeyWithHttpInfo(threatModelId, noteId, key);
        return resp.getData();
    }

    /**
     * Get note metadata by key
     * Returns a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getNoteMetadataByKeyWithHttpInfo(UUID threatModelId, UUID noteId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getNoteMetadataByKeyValidateBeforeCall(threatModelId, noteId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get note metadata by key (asynchronously)
     * Returns a specific metadata entry by key for the specified note
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNoteMetadataByKeyAsync(UUID threatModelId, UUID noteId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNoteMetadataByKeyValidateBeforeCall(threatModelId, noteId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRepositoryMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRepositoryMetadataCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRepositoryMetadataValidateBeforeCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getRepositoryMetadata(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getRepositoryMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getRepositoryMetadataCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get source metadata
     * Returns all metadata key-value pairs for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getRepositoryMetadata(UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getRepositoryMetadataWithHttpInfo(threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Get source metadata
     * Returns all metadata key-value pairs for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getRepositoryMetadataWithHttpInfo(UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = getRepositoryMetadataValidateBeforeCall(threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get source metadata (asynchronously)
     * Returns all metadata key-value pairs for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRepositoryMetadataAsync(UUID threatModelId, UUID repositoryId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRepositoryMetadataValidateBeforeCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRepositoryMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRepositoryMetadataByKeyCall(UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRepositoryMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getRepositoryMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getRepositoryMetadataByKeyCall(threatModelId, repositoryId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get source metadata by key
     * Returns a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getRepositoryMetadataByKey(UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getRepositoryMetadataByKeyWithHttpInfo(threatModelId, repositoryId, key);
        return resp.getData();
    }

    /**
     * Get source metadata by key
     * Returns a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getRepositoryMetadataByKeyWithHttpInfo(UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getRepositoryMetadataByKeyValidateBeforeCall(threatModelId, repositoryId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get source metadata by key (asynchronously)
     * Returns a specific metadata entry by key for the specified source reference
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRepositoryMetadataByKeyAsync(UUID threatModelId, UUID repositoryId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRepositoryMetadataByKeyValidateBeforeCall(threatModelId, repositoryId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatMetadataCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatMetadataValidateBeforeCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatMetadata(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling getThreatMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatMetadataCall(threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get threat metadata
     * Returns all metadata key-value pairs for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getThreatMetadata(UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getThreatMetadataWithHttpInfo(threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Get threat metadata
     * Returns all metadata key-value pairs for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getThreatMetadataWithHttpInfo(UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatMetadataValidateBeforeCall(threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get threat metadata (asynchronously)
     * Returns all metadata key-value pairs for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatMetadataAsync(UUID threatModelId, UUID threatId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatMetadataValidateBeforeCall(threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatMetadataByKeyCall(UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling getThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getThreatMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatMetadataByKeyCall(threatModelId, threatId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get threat metadata by key
     * Returns a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getThreatMetadataByKey(UUID threatModelId, UUID threatId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getThreatMetadataByKeyWithHttpInfo(threatModelId, threatId, key);
        return resp.getData();
    }

    /**
     * Get threat metadata by key
     * Returns a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getThreatMetadataByKeyWithHttpInfo(UUID threatModelId, UUID threatId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getThreatMetadataByKeyValidateBeforeCall(threatModelId, threatId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get threat metadata by key (asynchronously)
     * Returns a specific metadata entry by key for the specified threat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatMetadataByKeyAsync(UUID threatModelId, UUID threatId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatMetadataByKeyValidateBeforeCall(threatModelId, threatId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelAsset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelAssetValidateBeforeCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelAsset(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getThreatModelAsset(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelAssetCall(threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific asset
     * Returns a single asset by its ID
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Asset getThreatModelAsset(UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<Asset> resp = getThreatModelAssetWithHttpInfo(threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Get a specific asset
     * Returns a single asset by its ID
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Asset> getThreatModelAssetWithHttpInfo(UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelAssetValidateBeforeCall(threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific asset (asynchronously)
     * Returns a single asset by its ID
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetAsync(UUID threatModelId, UUID assetId, final ApiCallback<Asset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelAssetValidateBeforeCall(threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelAssetMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetMetadataCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelAssetMetadataValidateBeforeCall(UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelAssetMetadataCall(threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all metadata for an asset
     * Returns all metadata key-value pairs for the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getThreatModelAssetMetadata(UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getThreatModelAssetMetadataWithHttpInfo(threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Get all metadata for an asset
     * Returns all metadata key-value pairs for the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getThreatModelAssetMetadataWithHttpInfo(UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelAssetMetadataValidateBeforeCall(threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all metadata for an asset (asynchronously)
     * Returns all metadata key-value pairs for the specified asset
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetMetadataAsync(UUID threatModelId, UUID assetId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelAssetMetadataValidateBeforeCall(threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelAssetMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetMetadataByKeyCall(UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelAssetMetadataByKeyValidateBeforeCall(UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelAssetMetadataByKey(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getThreatModelAssetMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getThreatModelAssetMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelAssetMetadataByKeyCall(threatModelId, assetId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific metadata for an asset
     * Returns a single metadata value by its key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getThreatModelAssetMetadataByKey(UUID threatModelId, UUID assetId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getThreatModelAssetMetadataByKeyWithHttpInfo(threatModelId, assetId, key);
        return resp.getData();
    }

    /**
     * Get specific metadata for an asset
     * Returns a single metadata value by its key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getThreatModelAssetMetadataByKeyWithHttpInfo(UUID threatModelId, UUID assetId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelAssetMetadataByKeyValidateBeforeCall(threatModelId, assetId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific metadata for an asset (asynchronously)
     * Returns a single metadata value by its key
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetMetadataByKeyAsync(UUID threatModelId, UUID assetId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelAssetMetadataByKeyValidateBeforeCall(threatModelId, assetId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelAssets
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of assets to return (optional, default to 20)
     * @param offset Number of assets to skip (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetsCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelAssetsValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelAssets(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelAssetsCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List assets in a threat model
     * Returns a paginated list of assets within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of assets to return (optional, default to 20)
     * @param offset Number of assets to skip (optional, default to 0)
     * @return List&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Asset> getThreatModelAssets(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<Asset>> resp = getThreatModelAssetsWithHttpInfo(threatModelId, limit, offset);
        return resp.getData();
    }

    /**
     * List assets in a threat model
     * Returns a paginated list of assets within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of assets to return (optional, default to 20)
     * @param offset Number of assets to skip (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Asset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Asset>> getThreatModelAssetsWithHttpInfo(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelAssetsValidateBeforeCall(threatModelId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List assets in a threat model (asynchronously)
     * Returns a paginated list of assets within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of assets to return (optional, default to 20)
     * @param offset Number of assets to skip (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelAssetsAsync(UUID threatModelId, Integer limit, Integer offset, final ApiCallback<List<Asset>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelAssetsValidateBeforeCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelDiagram
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDiagramCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelDiagramValidateBeforeCall(UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelDiagram(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling getThreatModelDiagram(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelDiagramCall(threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific diagram
     * Retrieves a specific diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return Diagram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Diagram getThreatModelDiagram(UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<Diagram> resp = getThreatModelDiagramWithHttpInfo(threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Get a specific diagram
     * Retrieves a specific diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Diagram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Diagram> getThreatModelDiagramWithHttpInfo(UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelDiagramValidateBeforeCall(threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific diagram (asynchronously)
     * Retrieves a specific diagram from the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDiagramAsync(UUID threatModelId, UUID diagramId, final ApiCallback<Diagram> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelDiagramValidateBeforeCall(threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelDiagrams
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Number of items to skip (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDiagramsCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelDiagramsValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelDiagrams(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelDiagramsCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List threat model diagrams
     * Returns all diagrams associated with a specific threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Number of items to skip (optional, default to 0)
     * @return List&lt;DiagramListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DiagramListItem> getThreatModelDiagrams(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<DiagramListItem>> resp = getThreatModelDiagramsWithHttpInfo(threatModelId, limit, offset);
        return resp.getData();
    }

    /**
     * List threat model diagrams
     * Returns all diagrams associated with a specific threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Number of items to skip (optional, default to 0)
     * @return ApiResponse&lt;List&lt;DiagramListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DiagramListItem>> getThreatModelDiagramsWithHttpInfo(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelDiagramsValidateBeforeCall(threatModelId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<DiagramListItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List threat model diagrams (asynchronously)
     * Returns all diagrams associated with a specific threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of items to return (optional, default to 20)
     * @param offset Number of items to skip (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDiagramsAsync(UUID threatModelId, Integer limit, Integer offset, final ApiCallback<List<DiagramListItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelDiagramsValidateBeforeCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DiagramListItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelDocument
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDocumentCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelDocumentValidateBeforeCall(UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelDocument(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getThreatModelDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelDocumentCall(threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific document
     * Returns details of a specific document within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document getThreatModelDocument(UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<Document> resp = getThreatModelDocumentWithHttpInfo(threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Get a specific document
     * Returns details of a specific document within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> getThreatModelDocumentWithHttpInfo(UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelDocumentValidateBeforeCall(threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific document (asynchronously)
     * Returns details of a specific document within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDocumentAsync(UUID threatModelId, UUID documentId, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelDocumentValidateBeforeCall(threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelDocuments
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of documents to return (optional, default to 20)
     * @param offset Number of documents to skip (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDocumentsCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelDocumentsValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelDocuments(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelDocumentsCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List documents in a threat model
     * Returns a paginated list of documents within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of documents to return (optional, default to 20)
     * @param offset Number of documents to skip (optional, default to 0)
     * @return List&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Document> getThreatModelDocuments(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<Document>> resp = getThreatModelDocumentsWithHttpInfo(threatModelId, limit, offset);
        return resp.getData();
    }

    /**
     * List documents in a threat model
     * Returns a paginated list of documents within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of documents to return (optional, default to 20)
     * @param offset Number of documents to skip (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Document&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Document>> getThreatModelDocumentsWithHttpInfo(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelDocumentsValidateBeforeCall(threatModelId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List documents in a threat model (asynchronously)
     * Returns a paginated list of documents within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of documents to return (optional, default to 20)
     * @param offset Number of documents to skip (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelDocumentsAsync(UUID threatModelId, Integer limit, Integer offset, final ApiCallback<List<Document>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelDocumentsValidateBeforeCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Document>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelMetadata
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelMetadataCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelMetadataValidateBeforeCall(UUID threatModelId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelMetadataCall(threatModelId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get threat model metadata
     * Returns all metadata key-value pairs for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return List&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Metadata> getThreatModelMetadata(UUID threatModelId) throws ApiException {
        ApiResponse<List<Metadata>> resp = getThreatModelMetadataWithHttpInfo(threatModelId);
        return resp.getData();
    }

    /**
     * Get threat model metadata
     * Returns all metadata key-value pairs for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @return ApiResponse&lt;List&lt;Metadata&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Metadata>> getThreatModelMetadataWithHttpInfo(UUID threatModelId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelMetadataValidateBeforeCall(threatModelId, null, null);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get threat model metadata (asynchronously)
     * Returns all metadata key-value pairs for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelMetadataAsync(UUID threatModelId, final ApiCallback<List<Metadata>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelMetadataValidateBeforeCall(threatModelId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Metadata>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelMetadataByKey
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelMetadataByKeyCall(UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelMetadataByKeyValidateBeforeCall(UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getThreatModelMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelMetadataByKeyCall(threatModelId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get threat model metadata by key
     * Returns a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata getThreatModelMetadataByKey(UUID threatModelId, String key) throws ApiException {
        ApiResponse<Metadata> resp = getThreatModelMetadataByKeyWithHttpInfo(threatModelId, key);
        return resp.getData();
    }

    /**
     * Get threat model metadata by key
     * Returns a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> getThreatModelMetadataByKeyWithHttpInfo(UUID threatModelId, String key) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelMetadataByKeyValidateBeforeCall(threatModelId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get threat model metadata by key (asynchronously)
     * Returns a specific metadata entry by key for the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to retrieve (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelMetadataByKeyAsync(UUID threatModelId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelMetadataByKeyValidateBeforeCall(threatModelId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelNote
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelNoteCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelNoteValidateBeforeCall(UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling getThreatModelNote(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelNoteCall(threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific note
     * Returns details of a specific note within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note getThreatModelNote(UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<Note> resp = getThreatModelNoteWithHttpInfo(threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Get a specific note
     * Returns details of a specific note within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> getThreatModelNoteWithHttpInfo(UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelNoteValidateBeforeCall(threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific note (asynchronously)
     * Returns details of a specific note within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelNoteAsync(UUID threatModelId, UUID noteId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelNoteValidateBeforeCall(threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelNotes
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of notes to return (optional, default to 20)
     * @param offset Number of notes to skip (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelNotesCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelNotesValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelNotes(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelNotesCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List notes in a threat model
     * Returns a paginated list of notes within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of notes to return (optional, default to 20)
     * @param offset Number of notes to skip (optional, default to 0)
     * @return List&lt;NoteListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NoteListItem> getThreatModelNotes(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<NoteListItem>> resp = getThreatModelNotesWithHttpInfo(threatModelId, limit, offset);
        return resp.getData();
    }

    /**
     * List notes in a threat model
     * Returns a paginated list of notes within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of notes to return (optional, default to 20)
     * @param offset Number of notes to skip (optional, default to 0)
     * @return ApiResponse&lt;List&lt;NoteListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NoteListItem>> getThreatModelNotesWithHttpInfo(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelNotesValidateBeforeCall(threatModelId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<NoteListItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List notes in a threat model (asynchronously)
     * Returns a paginated list of notes within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of notes to return (optional, default to 20)
     * @param offset Number of notes to skip (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelNotesAsync(UUID threatModelId, Integer limit, Integer offset, final ApiCallback<List<NoteListItem>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelNotesValidateBeforeCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NoteListItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelRepositories
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of sources to return (optional, default to 20)
     * @param offset Number of sources to skip (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelRepositoriesCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelRepositoriesValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelRepositories(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelRepositoriesCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List sources in a threat model
     * Returns a paginated list of source code references within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of sources to return (optional, default to 20)
     * @param offset Number of sources to skip (optional, default to 0)
     * @return List&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Repository> getThreatModelRepositories(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<Repository>> resp = getThreatModelRepositoriesWithHttpInfo(threatModelId, limit, offset);
        return resp.getData();
    }

    /**
     * List sources in a threat model
     * Returns a paginated list of source code references within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of sources to return (optional, default to 20)
     * @param offset Number of sources to skip (optional, default to 0)
     * @return ApiResponse&lt;List&lt;Repository&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Repository>> getThreatModelRepositoriesWithHttpInfo(UUID threatModelId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelRepositoriesValidateBeforeCall(threatModelId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List sources in a threat model (asynchronously)
     * Returns a paginated list of source code references within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of sources to return (optional, default to 20)
     * @param offset Number of sources to skip (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelRepositoriesAsync(UUID threatModelId, Integer limit, Integer offset, final ApiCallback<List<Repository>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelRepositoriesValidateBeforeCall(threatModelId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Repository>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelRepository
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelRepositoryCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelRepositoryValidateBeforeCall(UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelRepository(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling getThreatModelRepository(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelRepositoryCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific source reference
     * Returns details of a specific source code reference within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Repository getThreatModelRepository(UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<Repository> resp = getThreatModelRepositoryWithHttpInfo(threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Get a specific source reference
     * Returns details of a specific source code reference within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Repository> getThreatModelRepositoryWithHttpInfo(UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelRepositoryValidateBeforeCall(threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific source reference (asynchronously)
     * Returns details of a specific source code reference within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelRepositoryAsync(UUID threatModelId, UUID repositoryId, final ApiCallback<Repository> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelRepositoryValidateBeforeCall(threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelThreat
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelThreatCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelThreatValidateBeforeCall(UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling getThreatModelThreat(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelThreatCall(threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a specific threat
     * Returns details of a specific threat within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return Threat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Threat getThreatModelThreat(UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<Threat> resp = getThreatModelThreatWithHttpInfo(threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Get a specific threat
     * Returns details of a specific threat within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Threat> getThreatModelThreatWithHttpInfo(UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelThreatValidateBeforeCall(threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a specific threat (asynchronously)
     * Returns details of a specific threat within the threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelThreatAsync(UUID threatModelId, UUID threatId, final ApiCallback<Threat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelThreatValidateBeforeCall(threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getThreatModelThreats
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of threats to return (optional, default to 20)
     * @param offset Number of threats to skip (optional, default to 0)
     * @param sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc) (optional, default to created_at:desc)
     * @param name Filter by threat name (partial match) (optional)
     * @param description Filter by threat description (partial match) (optional)
     * @param threatType Filter by threat type (exact match) (optional)
     * @param severity Filter by severity level (exact match) (optional)
     * @param priority Filter by priority (exact match) (optional)
     * @param status Filter by status (exact match) (optional)
     * @param diagramId Filter by diagram ID (exact match) (optional)
     * @param cellId Filter by cell ID (exact match) (optional)
     * @param scoreGt Filter threats with score greater than this value (optional)
     * @param scoreLt Filter threats with score less than this value (optional)
     * @param scoreEq Filter threats with score equal to this value (optional)
     * @param scoreGe Filter threats with score greater than or equal to this value (optional)
     * @param scoreLe Filter threats with score less than or equal to this value (optional)
     * @param createdAfter Filter threats created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threats created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threats modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threats modified before this date (RFC3339 format) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getThreatModelThreatsCall(UUID threatModelId, Integer limit, Integer offset, String sort, String name, String description, String threatType, String severity, String priority, String status, UUID diagramId, UUID cellId, BigDecimal scoreGt, BigDecimal scoreLt, BigDecimal scoreEq, BigDecimal scoreGe, BigDecimal scoreLe, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (description != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        if (threatType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("threat_type", threatType));
        if (severity != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("severity", severity));
        if (priority != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("priority", priority));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (diagramId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("diagram_id", diagramId));
        if (cellId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("cell_id", cellId));
        if (scoreGt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("score_gt", scoreGt));
        if (scoreLt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("score_lt", scoreLt));
        if (scoreEq != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("score_eq", scoreEq));
        if (scoreGe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("score_ge", scoreGe));
        if (scoreLe != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("score_le", scoreLe));
        if (createdAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_after", createdAfter));
        if (createdBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created_before", createdBefore));
        if (modifiedAfter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified_after", modifiedAfter));
        if (modifiedBefore != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("modified_before", modifiedBefore));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getThreatModelThreatsValidateBeforeCall(UUID threatModelId, Integer limit, Integer offset, String sort, String name, String description, String threatType, String severity, String priority, String status, UUID diagramId, UUID cellId, BigDecimal scoreGt, BigDecimal scoreLt, BigDecimal scoreEq, BigDecimal scoreGe, BigDecimal scoreLe, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling getThreatModelThreats(Async)");
        }
        
        com.squareup.okhttp.Call call = getThreatModelThreatsCall(threatModelId, limit, offset, sort, name, description, threatType, severity, priority, status, diagramId, cellId, scoreGt, scoreLt, scoreEq, scoreGe, scoreLe, createdAfter, createdBefore, modifiedAfter, modifiedBefore, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List threats in a threat model
     * Returns a paginated list of threats within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of threats to return (optional, default to 20)
     * @param offset Number of threats to skip (optional, default to 0)
     * @param sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc) (optional, default to created_at:desc)
     * @param name Filter by threat name (partial match) (optional)
     * @param description Filter by threat description (partial match) (optional)
     * @param threatType Filter by threat type (exact match) (optional)
     * @param severity Filter by severity level (exact match) (optional)
     * @param priority Filter by priority (exact match) (optional)
     * @param status Filter by status (exact match) (optional)
     * @param diagramId Filter by diagram ID (exact match) (optional)
     * @param cellId Filter by cell ID (exact match) (optional)
     * @param scoreGt Filter threats with score greater than this value (optional)
     * @param scoreLt Filter threats with score less than this value (optional)
     * @param scoreEq Filter threats with score equal to this value (optional)
     * @param scoreGe Filter threats with score greater than or equal to this value (optional)
     * @param scoreLe Filter threats with score less than or equal to this value (optional)
     * @param createdAfter Filter threats created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threats created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threats modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threats modified before this date (RFC3339 format) (optional)
     * @return List&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Threat> getThreatModelThreats(UUID threatModelId, Integer limit, Integer offset, String sort, String name, String description, String threatType, String severity, String priority, String status, UUID diagramId, UUID cellId, BigDecimal scoreGt, BigDecimal scoreLt, BigDecimal scoreEq, BigDecimal scoreGe, BigDecimal scoreLe, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore) throws ApiException {
        ApiResponse<List<Threat>> resp = getThreatModelThreatsWithHttpInfo(threatModelId, limit, offset, sort, name, description, threatType, severity, priority, status, diagramId, cellId, scoreGt, scoreLt, scoreEq, scoreGe, scoreLe, createdAfter, createdBefore, modifiedAfter, modifiedBefore);
        return resp.getData();
    }

    /**
     * List threats in a threat model
     * Returns a paginated list of threats within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of threats to return (optional, default to 20)
     * @param offset Number of threats to skip (optional, default to 0)
     * @param sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc) (optional, default to created_at:desc)
     * @param name Filter by threat name (partial match) (optional)
     * @param description Filter by threat description (partial match) (optional)
     * @param threatType Filter by threat type (exact match) (optional)
     * @param severity Filter by severity level (exact match) (optional)
     * @param priority Filter by priority (exact match) (optional)
     * @param status Filter by status (exact match) (optional)
     * @param diagramId Filter by diagram ID (exact match) (optional)
     * @param cellId Filter by cell ID (exact match) (optional)
     * @param scoreGt Filter threats with score greater than this value (optional)
     * @param scoreLt Filter threats with score less than this value (optional)
     * @param scoreEq Filter threats with score equal to this value (optional)
     * @param scoreGe Filter threats with score greater than or equal to this value (optional)
     * @param scoreLe Filter threats with score less than or equal to this value (optional)
     * @param createdAfter Filter threats created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threats created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threats modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threats modified before this date (RFC3339 format) (optional)
     * @return ApiResponse&lt;List&lt;Threat&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Threat>> getThreatModelThreatsWithHttpInfo(UUID threatModelId, Integer limit, Integer offset, String sort, String name, String description, String threatType, String severity, String priority, String status, UUID diagramId, UUID cellId, BigDecimal scoreGt, BigDecimal scoreLt, BigDecimal scoreEq, BigDecimal scoreGe, BigDecimal scoreLe, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore) throws ApiException {
        com.squareup.okhttp.Call call = getThreatModelThreatsValidateBeforeCall(threatModelId, limit, offset, sort, name, description, threatType, severity, priority, status, diagramId, cellId, scoreGt, scoreLt, scoreEq, scoreGe, scoreLe, createdAfter, createdBefore, modifiedAfter, modifiedBefore, null, null);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List threats in a threat model (asynchronously)
     * Returns a paginated list of threats within the specified threat model
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param limit Maximum number of threats to return (optional, default to 20)
     * @param offset Number of threats to skip (optional, default to 0)
     * @param sort Sort order (e.g., created_at:desc, name:asc, severity:desc, score:desc) (optional, default to created_at:desc)
     * @param name Filter by threat name (partial match) (optional)
     * @param description Filter by threat description (partial match) (optional)
     * @param threatType Filter by threat type (exact match) (optional)
     * @param severity Filter by severity level (exact match) (optional)
     * @param priority Filter by priority (exact match) (optional)
     * @param status Filter by status (exact match) (optional)
     * @param diagramId Filter by diagram ID (exact match) (optional)
     * @param cellId Filter by cell ID (exact match) (optional)
     * @param scoreGt Filter threats with score greater than this value (optional)
     * @param scoreLt Filter threats with score less than this value (optional)
     * @param scoreEq Filter threats with score equal to this value (optional)
     * @param scoreGe Filter threats with score greater than or equal to this value (optional)
     * @param scoreLe Filter threats with score less than or equal to this value (optional)
     * @param createdAfter Filter threats created after this date (RFC3339 format) (optional)
     * @param createdBefore Filter threats created before this date (RFC3339 format) (optional)
     * @param modifiedAfter Filter threats modified after this date (RFC3339 format) (optional)
     * @param modifiedBefore Filter threats modified before this date (RFC3339 format) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getThreatModelThreatsAsync(UUID threatModelId, Integer limit, Integer offset, String sort, String name, String description, String threatType, String severity, String priority, String status, UUID diagramId, UUID cellId, BigDecimal scoreGt, BigDecimal scoreLt, BigDecimal scoreEq, BigDecimal scoreGe, BigDecimal scoreLe, OffsetDateTime createdAfter, OffsetDateTime createdBefore, OffsetDateTime modifiedAfter, OffsetDateTime modifiedBefore, final ApiCallback<List<Threat>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getThreatModelThreatsValidateBeforeCall(threatModelId, limit, offset, sort, name, description, threatType, severity, priority, status, diagramId, cellId, scoreGt, scoreLt, scoreEq, scoreGe, scoreLe, createdAfter, createdBefore, modifiedAfter, modifiedBefore, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Threat>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchThreatModelDiagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelDiagramCall(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchThreatModelDiagramValidateBeforeCall(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchThreatModelDiagram(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling patchThreatModelDiagram(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling patchThreatModelDiagram(Async)");
        }
        
        com.squareup.okhttp.Call call = patchThreatModelDiagramCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Partially update a diagram
     * Apply JSON Patch operations to update specific parts of a diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return Diagram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Diagram patchThreatModelDiagram(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<Diagram> resp = patchThreatModelDiagramWithHttpInfo(body, threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Partially update a diagram
     * Apply JSON Patch operations to update specific parts of a diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Diagram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Diagram> patchThreatModelDiagramWithHttpInfo(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = patchThreatModelDiagramValidateBeforeCall(body, threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Partially update a diagram (asynchronously)
     * Apply JSON Patch operations to update specific parts of a diagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelDiagramAsync(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID diagramId, final ApiCallback<Diagram> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchThreatModelDiagramValidateBeforeCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchThreatModelThreat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelThreatCall(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchThreatModelThreatValidateBeforeCall(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling patchThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling patchThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling patchThreatModelThreat(Async)");
        }
        
        com.squareup.okhttp.Call call = patchThreatModelThreatCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Partially update a threat
     * Applies JSON patch operations to a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return Threat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Threat patchThreatModelThreat(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<Threat> resp = patchThreatModelThreatWithHttpInfo(body, threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Partially update a threat
     * Applies JSON patch operations to a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Threat> patchThreatModelThreatWithHttpInfo(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = patchThreatModelThreatValidateBeforeCall(body, threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Partially update a threat (asynchronously)
     * Applies JSON patch operations to a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchThreatModelThreatAsync(List<ThreatsThreatIdBody> body, UUID threatModelId, UUID threatId, final ApiCallback<Threat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchThreatModelThreatValidateBeforeCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDiagramMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDiagramMetadataByKeyCall(MetadataKeyBody4 body, UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDiagramMetadataByKeyValidateBeforeCall(MetadataKeyBody4 body, UUID threatModelId, UUID diagramId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling updateDiagramMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateDiagramMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDiagramMetadataByKeyCall(body, threatModelId, diagramId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update diagram metadata by key
     * Updates or creates a metadata entry for the diagram with the specified key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateDiagramMetadataByKey(MetadataKeyBody4 body, UUID threatModelId, UUID diagramId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateDiagramMetadataByKeyWithHttpInfo(body, threatModelId, diagramId, key);
        return resp.getData();
    }

    /**
     * Update diagram metadata by key
     * Updates or creates a metadata entry for the diagram with the specified key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateDiagramMetadataByKeyWithHttpInfo(MetadataKeyBody4 body, UUID threatModelId, UUID diagramId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateDiagramMetadataByKeyValidateBeforeCall(body, threatModelId, diagramId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update diagram metadata by key (asynchronously)
     * Updates or creates a metadata entry for the diagram with the specified key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDiagramMetadataByKeyAsync(MetadataKeyBody4 body, UUID threatModelId, UUID diagramId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDiagramMetadataByKeyValidateBeforeCall(body, threatModelId, diagramId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDocumentMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDocumentMetadataByKeyCall(MetadataKeyBody1 body, UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDocumentMetadataByKeyValidateBeforeCall(MetadataKeyBody1 body, UUID threatModelId, UUID documentId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateDocumentMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateDocumentMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateDocumentMetadataByKeyCall(body, threatModelId, documentId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update document metadata by key
     * Updates a specific metadata entry by key for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateDocumentMetadataByKey(MetadataKeyBody1 body, UUID threatModelId, UUID documentId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateDocumentMetadataByKeyWithHttpInfo(body, threatModelId, documentId, key);
        return resp.getData();
    }

    /**
     * Update document metadata by key
     * Updates a specific metadata entry by key for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateDocumentMetadataByKeyWithHttpInfo(MetadataKeyBody1 body, UUID threatModelId, UUID documentId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateDocumentMetadataByKeyValidateBeforeCall(body, threatModelId, documentId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update document metadata by key (asynchronously)
     * Updates a specific metadata entry by key for the specified document
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDocumentMetadataByKeyAsync(MetadataKeyBody1 body, UUID threatModelId, UUID documentId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDocumentMetadataByKeyValidateBeforeCall(body, threatModelId, documentId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateNoteMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateNoteMetadataByKeyCall(MetadataKeyBody5 body, UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateNoteMetadataByKeyValidateBeforeCall(MetadataKeyBody5 body, UUID threatModelId, UUID noteId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateNoteMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateNoteMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateNoteMetadataByKeyCall(body, threatModelId, noteId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update note metadata by key
     * Updates a specific metadata entry by key for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateNoteMetadataByKey(MetadataKeyBody5 body, UUID threatModelId, UUID noteId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateNoteMetadataByKeyWithHttpInfo(body, threatModelId, noteId, key);
        return resp.getData();
    }

    /**
     * Update note metadata by key
     * Updates a specific metadata entry by key for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateNoteMetadataByKeyWithHttpInfo(MetadataKeyBody5 body, UUID threatModelId, UUID noteId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateNoteMetadataByKeyValidateBeforeCall(body, threatModelId, noteId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update note metadata by key (asynchronously)
     * Updates a specific metadata entry by key for the specified note
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateNoteMetadataByKeyAsync(MetadataKeyBody5 body, UUID threatModelId, UUID noteId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateNoteMetadataByKeyValidateBeforeCall(body, threatModelId, noteId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateRepositoryMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateRepositoryMetadataByKeyCall(MetadataKeyBody2 body, UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateRepositoryMetadataByKeyValidateBeforeCall(MetadataKeyBody2 body, UUID threatModelId, UUID repositoryId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling updateRepositoryMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateRepositoryMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateRepositoryMetadataByKeyCall(body, threatModelId, repositoryId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update source metadata by key
     * Updates a specific metadata entry by key for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateRepositoryMetadataByKey(MetadataKeyBody2 body, UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateRepositoryMetadataByKeyWithHttpInfo(body, threatModelId, repositoryId, key);
        return resp.getData();
    }

    /**
     * Update source metadata by key
     * Updates a specific metadata entry by key for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateRepositoryMetadataByKeyWithHttpInfo(MetadataKeyBody2 body, UUID threatModelId, UUID repositoryId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateRepositoryMetadataByKeyValidateBeforeCall(body, threatModelId, repositoryId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update source metadata by key (asynchronously)
     * Updates a specific metadata entry by key for the specified source reference
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateRepositoryMetadataByKeyAsync(MetadataKeyBody2 body, UUID threatModelId, UUID repositoryId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateRepositoryMetadataByKeyValidateBeforeCall(body, threatModelId, repositoryId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatMetadataByKeyCall(MetadataKeyBody body, UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatMetadataByKeyValidateBeforeCall(MetadataKeyBody body, UUID threatModelId, UUID threatId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling updateThreatMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateThreatMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatMetadataByKeyCall(body, threatModelId, threatId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update threat metadata by key
     * Updates a specific metadata entry by key for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateThreatMetadataByKey(MetadataKeyBody body, UUID threatModelId, UUID threatId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateThreatMetadataByKeyWithHttpInfo(body, threatModelId, threatId, key);
        return resp.getData();
    }

    /**
     * Update threat metadata by key
     * Updates a specific metadata entry by key for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateThreatMetadataByKeyWithHttpInfo(MetadataKeyBody body, UUID threatModelId, UUID threatId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatMetadataByKeyValidateBeforeCall(body, threatModelId, threatId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update threat metadata by key (asynchronously)
     * Updates a specific metadata entry by key for the specified threat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatMetadataByKeyAsync(MetadataKeyBody body, UUID threatModelId, UUID threatId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatMetadataByKeyValidateBeforeCall(body, threatModelId, threatId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelAsset
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelAssetCall(AssetInput body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelAssetValidateBeforeCall(AssetInput body, UUID threatModelId, UUID assetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelAsset(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelAsset(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling updateThreatModelAsset(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelAssetCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update an asset
     * Updates an existing asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return Asset
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Asset updateThreatModelAsset(AssetInput body, UUID threatModelId, UUID assetId) throws ApiException {
        ApiResponse<Asset> resp = updateThreatModelAssetWithHttpInfo(body, threatModelId, assetId);
        return resp.getData();
    }

    /**
     * Update an asset
     * Updates an existing asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @return ApiResponse&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Asset> updateThreatModelAssetWithHttpInfo(AssetInput body, UUID threatModelId, UUID assetId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelAssetValidateBeforeCall(body, threatModelId, assetId, null, null);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an asset (asynchronously)
     * Updates an existing asset within the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelAssetAsync(AssetInput body, UUID threatModelId, UUID assetId, final ApiCallback<Asset> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelAssetValidateBeforeCall(body, threatModelId, assetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Asset>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelAssetMetadata
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelAssetMetadataCall(Metadata body, UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/assets/{asset_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "asset_id" + "\\}", apiClient.escapeString(assetId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelAssetMetadataValidateBeforeCall(Metadata body, UUID threatModelId, UUID assetId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling updateThreatModelAssetMetadata(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateThreatModelAssetMetadata(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelAssetMetadataCall(body, threatModelId, assetId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update asset metadata
     * Updates an existing metadata value by its key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateThreatModelAssetMetadata(Metadata body, UUID threatModelId, UUID assetId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateThreatModelAssetMetadataWithHttpInfo(body, threatModelId, assetId, key);
        return resp.getData();
    }

    /**
     * Update asset metadata
     * Updates an existing metadata value by its key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateThreatModelAssetMetadataWithHttpInfo(Metadata body, UUID threatModelId, UUID assetId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update asset metadata (asynchronously)
     * Updates an existing metadata value by its key
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param assetId Unique identifier of the asset (UUID) (required)
     * @param key Metadata key (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelAssetMetadataAsync(Metadata body, UUID threatModelId, UUID assetId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelAssetMetadataValidateBeforeCall(body, threatModelId, assetId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelDiagram
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelDiagramCall(Diagram body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/diagrams/{diagram_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "diagram_id" + "\\}", apiClient.escapeString(diagramId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelDiagramValidateBeforeCall(Diagram body, UUID threatModelId, UUID diagramId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelDiagram(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelDiagram(Async)");
        }
        // verify the required parameter 'diagramId' is set
        if (diagramId == null) {
            throw new ApiException("Missing the required parameter 'diagramId' when calling updateThreatModelDiagram(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelDiagramCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a diagram
     * Completely replaces a diagram with new data
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return Diagram
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Diagram updateThreatModelDiagram(Diagram body, UUID threatModelId, UUID diagramId) throws ApiException {
        ApiResponse<Diagram> resp = updateThreatModelDiagramWithHttpInfo(body, threatModelId, diagramId);
        return resp.getData();
    }

    /**
     * Update a diagram
     * Completely replaces a diagram with new data
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @return ApiResponse&lt;Diagram&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Diagram> updateThreatModelDiagramWithHttpInfo(Diagram body, UUID threatModelId, UUID diagramId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelDiagramValidateBeforeCall(body, threatModelId, diagramId, null, null);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a diagram (asynchronously)
     * Completely replaces a diagram with new data
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param diagramId Unique identifier of the diagram (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelDiagramAsync(Diagram body, UUID threatModelId, UUID diagramId, final ApiCallback<Diagram> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelDiagramValidateBeforeCall(body, threatModelId, diagramId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Diagram>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelDocument
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelDocumentCall(DocumentInput body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/documents/{document_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "document_id" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelDocumentValidateBeforeCall(DocumentInput body, UUID threatModelId, UUID documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelDocument(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelDocument(Async)");
        }
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling updateThreatModelDocument(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelDocumentCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a document
     * Updates a specific document within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return Document
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Document updateThreatModelDocument(DocumentInput body, UUID threatModelId, UUID documentId) throws ApiException {
        ApiResponse<Document> resp = updateThreatModelDocumentWithHttpInfo(body, threatModelId, documentId);
        return resp.getData();
    }

    /**
     * Update a document
     * Updates a specific document within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @return ApiResponse&lt;Document&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Document> updateThreatModelDocumentWithHttpInfo(DocumentInput body, UUID threatModelId, UUID documentId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelDocumentValidateBeforeCall(body, threatModelId, documentId, null, null);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a document (asynchronously)
     * Updates a specific document within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param documentId Unique identifier of the document (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelDocumentAsync(DocumentInput body, UUID threatModelId, UUID documentId, final ApiCallback<Document> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelDocumentValidateBeforeCall(body, threatModelId, documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Document>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelMetadataByKey
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to update (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelMetadataByKeyCall(MetadataKeyBody3 body, UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/metadata/{key}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "key" + "\\}", apiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelMetadataByKeyValidateBeforeCall(MetadataKeyBody3 body, UUID threatModelId, String key, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelMetadataByKey(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelMetadataByKey(Async)");
        }
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateThreatModelMetadataByKey(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelMetadataByKeyCall(body, threatModelId, key, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update threat model metadata by key
     * Updates a specific metadata entry by key for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to update (required)
     * @return Metadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Metadata updateThreatModelMetadataByKey(MetadataKeyBody3 body, UUID threatModelId, String key) throws ApiException {
        ApiResponse<Metadata> resp = updateThreatModelMetadataByKeyWithHttpInfo(body, threatModelId, key);
        return resp.getData();
    }

    /**
     * Update threat model metadata by key
     * Updates a specific metadata entry by key for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to update (required)
     * @return ApiResponse&lt;Metadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Metadata> updateThreatModelMetadataByKeyWithHttpInfo(MetadataKeyBody3 body, UUID threatModelId, String key) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelMetadataByKeyValidateBeforeCall(body, threatModelId, key, null, null);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update threat model metadata by key (asynchronously)
     * Updates a specific metadata entry by key for the specified threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param key Metadata key to update (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelMetadataByKeyAsync(MetadataKeyBody3 body, UUID threatModelId, String key, final ApiCallback<Metadata> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelMetadataByKeyValidateBeforeCall(body, threatModelId, key, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Metadata>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelNote
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelNoteCall(NoteInput body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/notes/{note_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "note_id" + "\\}", apiClient.escapeString(noteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelNoteValidateBeforeCall(NoteInput body, UUID threatModelId, UUID noteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelNote(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelNote(Async)");
        }
        // verify the required parameter 'noteId' is set
        if (noteId == null) {
            throw new ApiException("Missing the required parameter 'noteId' when calling updateThreatModelNote(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelNoteCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a note
     * Updates a specific note within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return Note
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Note updateThreatModelNote(NoteInput body, UUID threatModelId, UUID noteId) throws ApiException {
        ApiResponse<Note> resp = updateThreatModelNoteWithHttpInfo(body, threatModelId, noteId);
        return resp.getData();
    }

    /**
     * Update a note
     * Updates a specific note within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @return ApiResponse&lt;Note&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Note> updateThreatModelNoteWithHttpInfo(NoteInput body, UUID threatModelId, UUID noteId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelNoteValidateBeforeCall(body, threatModelId, noteId, null, null);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a note (asynchronously)
     * Updates a specific note within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param noteId Unique identifier of the note (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelNoteAsync(NoteInput body, UUID threatModelId, UUID noteId, final ApiCallback<Note> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelNoteValidateBeforeCall(body, threatModelId, noteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Note>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelRepository
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelRepositoryCall(RepositoryInput body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/repositories/{repository_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "repository_id" + "\\}", apiClient.escapeString(repositoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelRepositoryValidateBeforeCall(RepositoryInput body, UUID threatModelId, UUID repositoryId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelRepository(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelRepository(Async)");
        }
        // verify the required parameter 'repositoryId' is set
        if (repositoryId == null) {
            throw new ApiException("Missing the required parameter 'repositoryId' when calling updateThreatModelRepository(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelRepositoryCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a source reference
     * Updates a specific source code reference within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return Repository
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Repository updateThreatModelRepository(RepositoryInput body, UUID threatModelId, UUID repositoryId) throws ApiException {
        ApiResponse<Repository> resp = updateThreatModelRepositoryWithHttpInfo(body, threatModelId, repositoryId);
        return resp.getData();
    }

    /**
     * Update a source reference
     * Updates a specific source code reference within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @return ApiResponse&lt;Repository&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Repository> updateThreatModelRepositoryWithHttpInfo(RepositoryInput body, UUID threatModelId, UUID repositoryId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelRepositoryValidateBeforeCall(body, threatModelId, repositoryId, null, null);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a source reference (asynchronously)
     * Updates a specific source code reference within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param repositoryId Unique identifier of the source reference (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelRepositoryAsync(RepositoryInput body, UUID threatModelId, UUID repositoryId, final ApiCallback<Repository> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelRepositoryValidateBeforeCall(body, threatModelId, repositoryId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Repository>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateThreatModelThreat
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelThreatCall(ThreatInput body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/threat_models/{threat_model_id}/threats/{threat_id}"
            .replaceAll("\\{" + "threat_model_id" + "\\}", apiClient.escapeString(threatModelId.toString()))
            .replaceAll("\\{" + "threat_id" + "\\}", apiClient.escapeString(threatId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        if (headers != null) {
            localVarHeaderParams.putAll(headers);
        }
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateThreatModelThreatValidateBeforeCall(ThreatInput body, UUID threatModelId, UUID threatId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatModelId' is set
        if (threatModelId == null) {
            throw new ApiException("Missing the required parameter 'threatModelId' when calling updateThreatModelThreat(Async)");
        }
        // verify the required parameter 'threatId' is set
        if (threatId == null) {
            throw new ApiException("Missing the required parameter 'threatId' when calling updateThreatModelThreat(Async)");
        }
        
        com.squareup.okhttp.Call call = updateThreatModelThreatCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a threat
     * Updates a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return Threat
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Threat updateThreatModelThreat(ThreatInput body, UUID threatModelId, UUID threatId) throws ApiException {
        ApiResponse<Threat> resp = updateThreatModelThreatWithHttpInfo(body, threatModelId, threatId);
        return resp.getData();
    }

    /**
     * Update a threat
     * Updates a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @return ApiResponse&lt;Threat&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Threat> updateThreatModelThreatWithHttpInfo(ThreatInput body, UUID threatModelId, UUID threatId) throws ApiException {
        com.squareup.okhttp.Call call = updateThreatModelThreatValidateBeforeCall(body, threatModelId, threatId, null, null);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a threat (asynchronously)
     * Updates a specific threat within the threat model
     * @param body  (required)
     * @param threatModelId Unique identifier of the threat model (UUID) (required)
     * @param threatId Unique identifier of the threat (UUID) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateThreatModelThreatAsync(ThreatInput body, UUID threatModelId, UUID threatId, final ApiCallback<Threat> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateThreatModelThreatValidateBeforeCall(body, threatModelId, threatId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Threat>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
