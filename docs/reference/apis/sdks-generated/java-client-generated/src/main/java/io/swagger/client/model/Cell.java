/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CellTool;
import io.swagger.client.model.MarkupElement;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
/**
 * Base schema for all diagram cells (nodes and edges) in AntV X6 native format. This schema matches X6&#x27;s toJSON() output exactly, enabling zero-transformation persistence. X6-specific properties like markup, tools, router, and connector are fully supported.
 */
@Schema(description = "Base schema for all diagram cells (nodes and edges) in AntV X6 native format. This schema matches X6's toJSON() output exactly, enabling zero-transformation persistence. X6-specific properties like markup, tools, router, and connector are fully supported.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class Cell {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("shape")
  private String shape = null;

  @SerializedName("zIndex")
  private BigDecimal zIndex = new BigDecimal(1);

  @SerializedName("visible")
  private Boolean visible = true;

  @SerializedName("data")
  private Map data = null;

  @SerializedName("markup")
  private List<MarkupElement> markup = null;

  @SerializedName("tools")
  private List<CellTool> tools = null;

  public Cell() {
    this.shape = this.getClass().getSimpleName();
  }
  public Cell id(UUID id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the cell (UUID)
   * @return id
  **/
  @Schema(example = "37eaedfa-bf37-4996-8665-242fec34bbff", required = true, description = "Unique identifier of the cell (UUID)")
  public UUID getId() {
    return id;
  }

  public void setId(UUID id) {
    this.id = id;
  }

  public Cell shape(String shape) {
    this.shape = shape;
    return this;
  }

   /**
   * Shape type identifier that determines cell structure and behavior
   * @return shape
  **/
  @Schema(example = "process", required = true, description = "Shape type identifier that determines cell structure and behavior")
  public String getShape() {
    return shape;
  }

  public void setShape(String shape) {
    this.shape = shape;
  }

  public Cell zIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
    return this;
  }

   /**
   * Z-order layer for rendering (higher values render on top)
   * minimum: 0
   * @return zIndex
  **/
  @Schema(description = "Z-order layer for rendering (higher values render on top)")
  public BigDecimal getZIndex() {
    return zIndex;
  }

  public void setZIndex(BigDecimal zIndex) {
    this.zIndex = zIndex;
  }

  public Cell visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

   /**
   * Whether the cell is visible in the diagram
   * @return visible
  **/
  @Schema(description = "Whether the cell is visible in the diagram")
  public Boolean isVisible() {
    return visible;
  }

  public void setVisible(Boolean visible) {
    this.visible = visible;
  }

  public Cell data(Map data) {
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @Schema(description = "")
  public Map getData() {
    return data;
  }

  public void setData(Map data) {
    this.data = data;
  }

  public Cell markup(List<MarkupElement> markup) {
    this.markup = markup;
    return this;
  }

  public Cell addMarkupItem(MarkupElement markupItem) {
    if (this.markup == null) {
      this.markup = new ArrayList<MarkupElement>();
    }
    this.markup.add(markupItem);
    return this;
  }

   /**
   * SVG/HTML markup definition for custom shape rendering in X6
   * @return markup
  **/
  @Schema(description = "SVG/HTML markup definition for custom shape rendering in X6")
  public List<MarkupElement> getMarkup() {
    return markup;
  }

  public void setMarkup(List<MarkupElement> markup) {
    this.markup = markup;
  }

  public Cell tools(List<CellTool> tools) {
    this.tools = tools;
    return this;
  }

  public Cell addToolsItem(CellTool toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<CellTool>();
    }
    this.tools.add(toolsItem);
    return this;
  }

   /**
   * Interactive tools attached to the cell for user interaction
   * @return tools
  **/
  @Schema(description = "Interactive tools attached to the cell for user interaction")
  public List<CellTool> getTools() {
    return tools;
  }

  public void setTools(List<CellTool> tools) {
    this.tools = tools;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Cell cell = (Cell) o;
    return Objects.equals(this.id, cell.id) &&
        Objects.equals(this.shape, cell.shape) &&
        Objects.equals(this.zIndex, cell.zIndex) &&
        Objects.equals(this.visible, cell.visible) &&
        Objects.equals(this.data, cell.data) &&
        Objects.equals(this.markup, cell.markup) &&
        Objects.equals(this.tools, cell.tools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, shape, zIndex, visible, data, markup, tools);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Cell {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    zIndex: ").append(toIndentedString(zIndex)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    markup: ").append(toIndentedString(markup)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
