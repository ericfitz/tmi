/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Authorization;
import io.swagger.client.model.Metadata;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Base schema for ThreatModel with client-writable fields
 */
@Schema(description = "Base schema for ThreatModel with client-writable fields")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class ThreatModelBase {
  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("owner")
  private String owner = null;

  @SerializedName("threat_model_framework")
  private String threatModelFramework = null;

  @SerializedName("authorization")
  private List<Authorization> authorization = new ArrayList<Authorization>();

  @SerializedName("metadata")
  private List<Metadata> metadata = null;

  @SerializedName("issue_uri")
  private String issueUri = null;

  @SerializedName("status")
  private List<String> status = null;

  public ThreatModelBase name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the threat model
   * @return name
  **/
  @Schema(required = true, description = "Name of the threat model")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ThreatModelBase description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the threat model
   * @return description
  **/
  @Schema(description = "Description of the threat model")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ThreatModelBase owner(String owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Email address of the current owner
   * @return owner
  **/
  @Schema(required = true, description = "Email address of the current owner")
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }

  public ThreatModelBase threatModelFramework(String threatModelFramework) {
    this.threatModelFramework = threatModelFramework;
    return this;
  }

   /**
   * The framework used for this threat model
   * @return threatModelFramework
  **/
  @Schema(required = true, description = "The framework used for this threat model")
  public String getThreatModelFramework() {
    return threatModelFramework;
  }

  public void setThreatModelFramework(String threatModelFramework) {
    this.threatModelFramework = threatModelFramework;
  }

  public ThreatModelBase authorization(List<Authorization> authorization) {
    this.authorization = authorization;
    return this;
  }

  public ThreatModelBase addAuthorizationItem(Authorization authorizationItem) {
    this.authorization.add(authorizationItem);
    return this;
  }

   /**
   * List of users and their roles for this threat model
   * @return authorization
  **/
  @Schema(required = true, description = "List of users and their roles for this threat model")
  public List<Authorization> getAuthorization() {
    return authorization;
  }

  public void setAuthorization(List<Authorization> authorization) {
    this.authorization = authorization;
  }

  public ThreatModelBase metadata(List<Metadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ThreatModelBase addMetadataItem(Metadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<Metadata>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Key-value pairs for additional threat model metadata
   * @return metadata
  **/
  @Schema(description = "Key-value pairs for additional threat model metadata")
  public List<Metadata> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadata> metadata) {
    this.metadata = metadata;
  }

  public ThreatModelBase issueUri(String issueUri) {
    this.issueUri = issueUri;
    return this;
  }

   /**
   * URL to an issue in an issue tracking system for this threat model
   * @return issueUri
  **/
  @Schema(description = "URL to an issue in an issue tracking system for this threat model")
  public String getIssueUri() {
    return issueUri;
  }

  public void setIssueUri(String issueUri) {
    this.issueUri = issueUri;
  }

  public ThreatModelBase status(List<String> status) {
    this.status = status;
    return this;
  }

  public ThreatModelBase addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<String>();
    }
    this.status.add(statusItem);
    return this;
  }

   /**
   * Status of the threat model in the organization&#x27;s threat modeling or SDLC process. Examples: \&quot;Not started\&quot;, \&quot;In progress\&quot;, \&quot;Review\&quot;, \&quot;Approved\&quot;, \&quot;Closed\&quot;
   * @return status
  **/
  @Schema(description = "Status of the threat model in the organization's threat modeling or SDLC process. Examples: \"Not started\", \"In progress\", \"Review\", \"Approved\", \"Closed\"")
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreatModelBase threatModelBase = (ThreatModelBase) o;
    return Objects.equals(this.name, threatModelBase.name) &&
        Objects.equals(this.description, threatModelBase.description) &&
        Objects.equals(this.owner, threatModelBase.owner) &&
        Objects.equals(this.threatModelFramework, threatModelBase.threatModelFramework) &&
        Objects.equals(this.authorization, threatModelBase.authorization) &&
        Objects.equals(this.metadata, threatModelBase.metadata) &&
        Objects.equals(this.issueUri, threatModelBase.issueUri) &&
        Objects.equals(this.status, threatModelBase.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, owner, threatModelFramework, authorization, metadata, issueUri, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreatModelBase {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    threatModelFramework: ").append(toIndentedString(threatModelFramework)).append("\n");
    sb.append("    authorization: ").append(toIndentedString(authorization)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    issueUri: ").append(toIndentedString(issueUri)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
