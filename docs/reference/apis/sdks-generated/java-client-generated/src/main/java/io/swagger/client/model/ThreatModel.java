/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Authorization;
import io.swagger.client.model.Diagram;
import io.swagger.client.model.Document;
import io.swagger.client.model.ExtendedAsset;
import io.swagger.client.model.Metadata;
import io.swagger.client.model.Note;
import io.swagger.client.model.Repository;
import io.swagger.client.model.Threat;
import io.swagger.client.model.ThreatModelBase;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * ThreatModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class ThreatModel extends ThreatModelBase {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("modified_at")
  private OffsetDateTime modifiedAt = null;

  @SerializedName("created_by")
  private String createdBy = null;

  @SerializedName("documents")
  private List<Document> documents = null;

  @SerializedName("repositories")
  private List<Repository> repositories = null;

  @SerializedName("diagrams")
  private List<Diagram> diagrams = null;

  @SerializedName("threats")
  private List<Threat> threats = null;

  @SerializedName("notes")
  private List<Note> notes = null;

  @SerializedName("assets")
  private List<ExtendedAsset> assets = null;

  @SerializedName("status_updated")
  private OffsetDateTime statusUpdated = null;

   /**
   * Unique identifier for the threat model (UUID)
   * @return id
  **/
  @Schema(description = "Unique identifier for the threat model (UUID)")
  public UUID getId() {
    return id;
  }

   /**
   * Creation timestamp (RFC3339)
   * @return createdAt
  **/
  @Schema(description = "Creation timestamp (RFC3339)")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

   /**
   * Last modification timestamp (RFC3339)
   * @return modifiedAt
  **/
  @Schema(description = "Last modification timestamp (RFC3339)")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

   /**
   * User name, email or identifier of the creator of the threat model
   * @return createdBy
  **/
  @Schema(description = "User name, email or identifier of the creator of the threat model")
  public String getCreatedBy() {
    return createdBy;
  }

   /**
   * List of documents related to the threat model
   * @return documents
  **/
  @Schema(description = "List of documents related to the threat model")
  public List<Document> getDocuments() {
    return documents;
  }

   /**
   * List of source code repositories related to the threat model
   * @return repositories
  **/
  @Schema(description = "List of source code repositories related to the threat model")
  public List<Repository> getRepositories() {
    return repositories;
  }

   /**
   * List of diagram objects associated with this threat model
   * @return diagrams
  **/
  @Schema(description = "List of diagram objects associated with this threat model")
  public List<Diagram> getDiagrams() {
    return diagrams;
  }

   /**
   * List of threats within the threat model
   * @return threats
  **/
  @Schema(description = "List of threats within the threat model")
  public List<Threat> getThreats() {
    return threats;
  }

   /**
   * List of notes associated with the threat model
   * @return notes
  **/
  @Schema(description = "List of notes associated with the threat model")
  public List<Note> getNotes() {
    return notes;
  }

   /**
   * List of assets associated with the threat model
   * @return assets
  **/
  @Schema(description = "List of assets associated with the threat model")
  public List<ExtendedAsset> getAssets() {
    return assets;
  }

   /**
   * Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.
   * @return statusUpdated
  **/
  @Schema(description = "Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.")
  public OffsetDateTime getStatusUpdated() {
    return statusUpdated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreatModel threatModel = (ThreatModel) o;
    return Objects.equals(this.id, threatModel.id) &&
        Objects.equals(this.createdAt, threatModel.createdAt) &&
        Objects.equals(this.modifiedAt, threatModel.modifiedAt) &&
        Objects.equals(this.createdBy, threatModel.createdBy) &&
        Objects.equals(this.documents, threatModel.documents) &&
        Objects.equals(this.repositories, threatModel.repositories) &&
        Objects.equals(this.diagrams, threatModel.diagrams) &&
        Objects.equals(this.threats, threatModel.threats) &&
        Objects.equals(this.notes, threatModel.notes) &&
        Objects.equals(this.assets, threatModel.assets) &&
        Objects.equals(this.statusUpdated, threatModel.statusUpdated) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, modifiedAt, createdBy, documents, repositories, diagrams, threats, notes, assets, statusUpdated, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreatModel {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    documents: ").append(toIndentedString(documents)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    diagrams: ").append(toIndentedString(diagrams)).append("\n");
    sb.append("    threats: ").append(toIndentedString(threats)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    statusUpdated: ").append(toIndentedString(statusUpdated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
