/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.BaseDiagramImage;
import io.swagger.client.model.Metadata;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.threeten.bp.OffsetDateTime;
/**
 * Base diagram object with common properties
 */
@Schema(description = "Base diagram object with common properties")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2025-11-01T19:29:35.350343762Z[GMT]")

public class BaseDiagram {
  @SerializedName("id")
  private UUID id = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Type of diagram with version
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("DFD-1.0.0")
    DFD_1_0_0("DFD-1.0.0");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("modified_at")
  private OffsetDateTime modifiedAt = null;

  @SerializedName("metadata")
  private List<Metadata> metadata = null;

  @SerializedName("update_vector")
  private Long updateVector = null;

  @SerializedName("image")
  private BaseDiagramImage image = null;

  @SerializedName("description")
  private String description = null;

  public BaseDiagram() {
    this.type = this.getClass().getSimpleName();
  }
   /**
   * Unique identifier for the diagram (UUID)
   * @return id
  **/
  @Schema(required = true, description = "Unique identifier for the diagram (UUID)")
  public UUID getId() {
    return id;
  }

  public BaseDiagram name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the diagram
   * @return name
  **/
  @Schema(required = true, description = "Name of the diagram")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BaseDiagram type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of diagram with version
   * @return type
  **/
  @Schema(required = true, description = "Type of diagram with version")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public BaseDiagram createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation timestamp (ISO3339)
   * @return createdAt
  **/
  @Schema(required = true, description = "Creation timestamp (ISO3339)")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public BaseDiagram modifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

   /**
   * Last modification timestamp (ISO3339)
   * @return modifiedAt
  **/
  @Schema(required = true, description = "Last modification timestamp (ISO3339)")
  public OffsetDateTime getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(OffsetDateTime modifiedAt) {
    this.modifiedAt = modifiedAt;
  }

  public BaseDiagram metadata(List<Metadata> metadata) {
    this.metadata = metadata;
    return this;
  }

  public BaseDiagram addMetadataItem(Metadata metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<Metadata>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Key-value pairs for additional diagram metadata
   * @return metadata
  **/
  @Schema(description = "Key-value pairs for additional diagram metadata")
  public List<Metadata> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<Metadata> metadata) {
    this.metadata = metadata;
  }

   /**
   * Server-managed monotonic version counter, incremented on each diagram update
   * minimum: 0
   * @return updateVector
  **/
  @Schema(description = "Server-managed monotonic version counter, incremented on each diagram update")
  public Long getUpdateVector() {
    return updateVector;
  }

  public BaseDiagram image(BaseDiagramImage image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @Schema(description = "")
  public BaseDiagramImage getImage() {
    return image;
  }

  public void setImage(BaseDiagramImage image) {
    this.image = image;
  }

  public BaseDiagram description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Optional description of the diagram
   * @return description
  **/
  @Schema(description = "Optional description of the diagram")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseDiagram baseDiagram = (BaseDiagram) o;
    return Objects.equals(this.id, baseDiagram.id) &&
        Objects.equals(this.name, baseDiagram.name) &&
        Objects.equals(this.type, baseDiagram.type) &&
        Objects.equals(this.createdAt, baseDiagram.createdAt) &&
        Objects.equals(this.modifiedAt, baseDiagram.modifiedAt) &&
        Objects.equals(this.metadata, baseDiagram.metadata) &&
        Objects.equals(this.updateVector, baseDiagram.updateVector) &&
        Objects.equals(this.image, baseDiagram.image) &&
        Objects.equals(this.description, baseDiagram.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, createdAt, modifiedAt, metadata, updateVector, image, description);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseDiagram {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    updateVector: ").append(toIndentedString(updateVector)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
