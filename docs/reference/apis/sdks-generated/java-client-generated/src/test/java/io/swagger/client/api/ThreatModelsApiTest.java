/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Error;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.TMListItem;
import io.swagger.client.model.ThreatModel;
import io.swagger.client.model.ThreatModelInput;
import io.swagger.client.model.ThreatModelsThreatModelIdBody;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ThreatModelsApi
 */
@Ignore
public class ThreatModelsApiTest {

    private final ThreatModelsApi api = new ThreatModelsApi();

    /**
     * Create a threat model
     *
     * Creates a new threat model with the authenticated user as owner
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelTest() throws Exception {
        ThreatModelInput body = null;
        ThreatModel response = api.createThreatModel(body);

        // TODO: test validations
    }
    /**
     * Delete a threat model
     *
     * Deletes a threat model; restricted to owner role
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelTest() throws Exception {
        UUID threatModelId = null;
        api.deleteThreatModel(threatModelId);

        // TODO: test validations
    }
    /**
     * Retrieve a threat model
     *
     * Retrieves the full details of a specific threat model if the user has access
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelTest() throws Exception {
        UUID threatModelId = null;
        ThreatModel response = api.getThreatModel(threatModelId);

        // TODO: test validations
    }
    /**
     * List threat models
     *
     * Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void listThreatModelsTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        String owner = null;
        String name = null;
        String description = null;
        String issueUri = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        String status = null;
        OffsetDateTime statusUpdatedAfter = null;
        OffsetDateTime statusUpdatedBefore = null;
        List<TMListItem> response = api.listThreatModels(limit, offset, owner, name, description, issueUri, createdAfter, createdBefore, modifiedAfter, modifiedBefore, status, statusUpdatedAfter, statusUpdatedBefore);

        // TODO: test validations
    }
    /**
     * Partially update a threat model
     *
     * Applies JSON Patch operations to a threat model; restricted to writer/owner roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchThreatModelTest() throws Exception {
        UUID threatModelId = null;
        List<ThreatModelsThreatModelIdBody> body = null;
        ThreatModel response = api.patchThreatModel(threatModelId, body);

        // TODO: test validations
    }
    /**
     * Update a threat model
     *
     * Fully updates a threat model; restricted to writer/owner roles
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelTest() throws Exception {
        ThreatModelInput body = null;
        UUID threatModelId = null;
        ThreatModel response = api.updateThreatModel(body, threatModelId);

        // TODO: test validations
    }
}
