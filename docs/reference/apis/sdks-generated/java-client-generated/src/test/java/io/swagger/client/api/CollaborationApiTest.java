/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CollaborationSession;
import io.swagger.client.model.Error;
import io.swagger.client.model.InlineResponse409;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CollaborationApi
 */
@Ignore
public class CollaborationApiTest {

    private final CollaborationApi api = new CollaborationApi();

    /**
     * Create diagram collaboration session
     *
     * Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDiagramCollaborationSessionTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        CollaborationSession response = api.createDiagramCollaborationSession(threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * End diagram collaboration session
     *
     * Terminates the active collaboration session for a diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void endDiagramCollaborationSessionTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        api.endDiagramCollaborationSession(threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * List active collaboration sessions
     *
     * Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCollaborationSessionsTest() throws Exception {
        List<CollaborationSession> response = api.getCollaborationSessions();

        // TODO: test validations
    }
    /**
     * Get diagram collaboration session
     *
     * Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDiagramCollaborationSessionTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        CollaborationSession response = api.getDiagramCollaborationSession(threatModelId, diagramId);

        // TODO: test validations
    }
}
