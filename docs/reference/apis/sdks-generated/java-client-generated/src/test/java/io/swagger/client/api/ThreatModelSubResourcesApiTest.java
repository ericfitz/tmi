/*
 * TMI (Threat Modeling Improved) API
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.Asset;
import io.swagger.client.model.AssetInput;
import java.math.BigDecimal;
import io.swagger.client.model.CreateDiagramRequest;
import io.swagger.client.model.Diagram;
import io.swagger.client.model.DiagramListItem;
import io.swagger.client.model.Document;
import io.swagger.client.model.DocumentInput;
import io.swagger.client.model.Error;
import io.swagger.client.model.Metadata;
import io.swagger.client.model.MetadataKeyBody;
import io.swagger.client.model.MetadataKeyBody1;
import io.swagger.client.model.MetadataKeyBody2;
import io.swagger.client.model.MetadataKeyBody3;
import io.swagger.client.model.MetadataKeyBody4;
import io.swagger.client.model.MetadataKeyBody5;
import io.swagger.client.model.Note;
import io.swagger.client.model.NoteInput;
import io.swagger.client.model.NoteListItem;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.Repository;
import io.swagger.client.model.RepositoryInput;
import io.swagger.client.model.Threat;
import io.swagger.client.model.ThreatInput;
import io.swagger.client.model.ThreatsThreatIdBody;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ThreatModelSubResourcesApi
 */
@Ignore
public class ThreatModelSubResourcesApiTest {

    private final ThreatModelSubResourcesApi api = new ThreatModelSubResourcesApi();

    /**
     * Bulk create diagram metadata
     *
     * Creates multiple metadata entries in a single operation for the specified diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateDiagramMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        List<Metadata> response = api.bulkCreateDiagramMetadata(body, threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Bulk create document metadata
     *
     * Creates multiple metadata entries in a single operation for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateDocumentMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID documentId = null;
        List<Metadata> response = api.bulkCreateDocumentMetadata(body, threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Bulk create note metadata
     *
     * Creates multiple metadata key-value pairs for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateNoteMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID noteId = null;
        List<Metadata> response = api.bulkCreateNoteMetadata(body, threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Bulk create source metadata
     *
     * Creates multiple metadata entries in a single operation for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateRepositoryMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID repositoryId = null;
        List<Metadata> response = api.bulkCreateRepositoryMetadata(body, threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Bulk create threat metadata
     *
     * Creates multiple metadata entries in a single operation for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        List<Metadata> response = api.bulkCreateThreatMetadata(body, threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Bulk create asset metadata
     *
     * Creates multiple metadata key-value pairs for the specified asset
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelAssetMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID assetId = null;
        List<Metadata> response = api.bulkCreateThreatModelAssetMetadata(body, threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Bulk create assets
     *
     * Creates multiple assets within the specified threat model (maximum 50 per request)
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelAssetsTest() throws Exception {
        List<Asset> body = null;
        UUID threatModelId = null;
        List<Asset> response = api.bulkCreateThreatModelAssets(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk create documents
     *
     * Creates multiple documents in a single operation for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelDocumentsTest() throws Exception {
        List<Document> body = null;
        UUID threatModelId = null;
        List<Document> response = api.bulkCreateThreatModelDocuments(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk create threat model metadata
     *
     * Creates multiple metadata entries in a single operation for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        List<Metadata> response = api.bulkCreateThreatModelMetadata(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk create sources
     *
     * Creates multiple source references in a single operation for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelRepositoriesTest() throws Exception {
        List<Repository> body = null;
        UUID threatModelId = null;
        List<Repository> response = api.bulkCreateThreatModelRepositories(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk create threats
     *
     * Creates multiple threats in a single operation for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkCreateThreatModelThreatsTest() throws Exception {
        List<Threat> body = null;
        UUID threatModelId = null;
        List<Threat> response = api.bulkCreateThreatModelThreats(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk update note metadata
     *
     * Updates multiple metadata entries for the specified note in a single operation
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpdateNoteMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID noteId = null;
        List<Metadata> response = api.bulkUpdateNoteMetadata(body, threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Bulk update threats
     *
     * Updates multiple threats in a single operation for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpdateThreatModelThreatsTest() throws Exception {
        List<Threat> body = null;
        UUID threatModelId = null;
        List<Threat> response = api.bulkUpdateThreatModelThreats(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk upsert diagram metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertDiagramMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        List<Metadata> response = api.bulkUpsertDiagramMetadata(body, threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Bulk upsert document metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertDocumentMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID documentId = null;
        List<Metadata> response = api.bulkUpsertDocumentMetadata(body, threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Bulk upsert repository metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified repository
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertRepositoryMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID repositoryId = null;
        List<Metadata> response = api.bulkUpsertRepositoryMetadata(body, threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Bulk upsert threat metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        List<Metadata> response = api.bulkUpsertThreatMetadata(body, threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Bulk upsert asset metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified asset
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatModelAssetMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        UUID assetId = null;
        List<Metadata> response = api.bulkUpsertThreatModelAssetMetadata(body, threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Bulk upsert assets
     *
     * Create or update multiple assets in a single request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatModelAssetsTest() throws Exception {
        List<Asset> body = null;
        UUID threatModelId = null;
        List<Asset> response = api.bulkUpsertThreatModelAssets(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk upsert documents
     *
     * Create or update multiple documents in a single request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatModelDocumentsTest() throws Exception {
        List<Document> body = null;
        UUID threatModelId = null;
        List<Document> response = api.bulkUpsertThreatModelDocuments(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk upsert threat model metadata
     *
     * Creates or updates multiple metadata key-value pairs for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatModelMetadataTest() throws Exception {
        List<Metadata> body = null;
        UUID threatModelId = null;
        List<Metadata> response = api.bulkUpsertThreatModelMetadata(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Bulk upsert repositories
     *
     * Create or update multiple repositories in a single request
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void bulkUpsertThreatModelRepositoriesTest() throws Exception {
        List<Repository> body = null;
        UUID threatModelId = null;
        List<Repository> response = api.bulkUpsertThreatModelRepositories(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create diagram metadata
     *
     * Creates a new metadata entry for the specified diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDiagramMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        Metadata response = api.createDiagramMetadata(body, threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Create document metadata
     *
     * Creates new metadata entry for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createDocumentMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID documentId = null;
        Metadata response = api.createDocumentMetadata(body, threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Create note metadata
     *
     * Creates new metadata entry for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createNoteMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID noteId = null;
        Metadata response = api.createNoteMetadata(body, threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Create source metadata
     *
     * Creates new metadata entry for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createRepositoryMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID repositoryId = null;
        Metadata response = api.createRepositoryMetadata(body, threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Create threat metadata
     *
     * Creates new metadata entry for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        Metadata response = api.createThreatMetadata(body, threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Create a new asset
     *
     * Creates a new asset within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelAssetTest() throws Exception {
        AssetInput body = null;
        UUID threatModelId = null;
        Asset response = api.createThreatModelAsset(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Add metadata to an asset
     *
     * Adds a new metadata key-value pair to the specified asset
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelAssetMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID assetId = null;
        Metadata response = api.createThreatModelAssetMetadata(body, threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Create a new diagram
     *
     * Creates a new diagram within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelDiagramTest() throws Exception {
        CreateDiagramRequest body = null;
        UUID threatModelId = null;
        Diagram response = api.createThreatModelDiagram(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create a new document
     *
     * Creates a new document within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelDocumentTest() throws Exception {
        DocumentInput body = null;
        UUID threatModelId = null;
        Document response = api.createThreatModelDocument(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create threat model metadata
     *
     * Creates new metadata entry for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        Metadata response = api.createThreatModelMetadata(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create a new note
     *
     * Creates a new note within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelNoteTest() throws Exception {
        NoteInput body = null;
        UUID threatModelId = null;
        Note response = api.createThreatModelNote(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create a new source reference
     *
     * Creates a new source code reference within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelRepositoryTest() throws Exception {
        RepositoryInput body = null;
        UUID threatModelId = null;
        Repository response = api.createThreatModelRepository(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Create a new threat
     *
     * Creates a new threat within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createThreatModelThreatTest() throws Exception {
        ThreatInput body = null;
        UUID threatModelId = null;
        Threat response = api.createThreatModelThreat(body, threatModelId);

        // TODO: test validations
    }
    /**
     * Delete diagram metadata by key
     *
     * Removes a specific metadata entry for the diagram by key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDiagramMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        String key = null;
        api.deleteDiagramMetadataByKey(threatModelId, diagramId, key);

        // TODO: test validations
    }
    /**
     * Delete document metadata by key
     *
     * Deletes a specific metadata entry by key for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID documentId = null;
        String key = null;
        api.deleteDocumentMetadataByKey(threatModelId, documentId, key);

        // TODO: test validations
    }
    /**
     * Delete note metadata by key
     *
     * Deletes a specific metadata entry by key for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteNoteMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID noteId = null;
        String key = null;
        api.deleteNoteMetadataByKey(threatModelId, noteId, key);

        // TODO: test validations
    }
    /**
     * Delete source metadata by key
     *
     * Deletes a specific metadata entry by key for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID repositoryId = null;
        String key = null;
        api.deleteRepositoryMetadataByKey(threatModelId, repositoryId, key);

        // TODO: test validations
    }
    /**
     * Delete threat metadata by key
     *
     * Deletes a specific metadata entry by key for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID threatId = null;
        String key = null;
        api.deleteThreatMetadataByKey(threatModelId, threatId, key);

        // TODO: test validations
    }
    /**
     * Delete an asset
     *
     * Deletes an asset from the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelAssetTest() throws Exception {
        UUID threatModelId = null;
        UUID assetId = null;
        api.deleteThreatModelAsset(threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Delete asset metadata
     *
     * Deletes a metadata key-value pair from the specified asset
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelAssetMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID assetId = null;
        String key = null;
        api.deleteThreatModelAssetMetadata(threatModelId, assetId, key);

        // TODO: test validations
    }
    /**
     * Delete a diagram
     *
     * Permanently removes a diagram from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelDiagramTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        api.deleteThreatModelDiagram(threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Delete a document
     *
     * Deletes a specific document from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelDocumentTest() throws Exception {
        UUID threatModelId = null;
        UUID documentId = null;
        api.deleteThreatModelDocument(threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Delete threat model metadata by key
     *
     * Deletes a specific metadata entry by key for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        String key = null;
        api.deleteThreatModelMetadataByKey(threatModelId, key);

        // TODO: test validations
    }
    /**
     * Delete a note
     *
     * Deletes a specific note from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelNoteTest() throws Exception {
        UUID threatModelId = null;
        UUID noteId = null;
        api.deleteThreatModelNote(threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Delete a source reference
     *
     * Deletes a specific source code reference from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelRepositoryTest() throws Exception {
        UUID threatModelId = null;
        UUID repositoryId = null;
        api.deleteThreatModelRepository(threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Delete a threat
     *
     * Deletes a specific threat from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteThreatModelThreatTest() throws Exception {
        UUID threatModelId = null;
        UUID threatId = null;
        api.deleteThreatModelThreat(threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Get diagram metadata
     *
     * Retrieves all metadata entries for the specified diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDiagramMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        List<Metadata> response = api.getDiagramMetadata(threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Get diagram metadata by key
     *
     * Retrieves a specific metadata entry for the diagram by key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDiagramMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        String key = null;
        Metadata response = api.getDiagramMetadataByKey(threatModelId, diagramId, key);

        // TODO: test validations
    }
    /**
     * Get document metadata
     *
     * Returns all metadata key-value pairs for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDocumentMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID documentId = null;
        List<Metadata> response = api.getDocumentMetadata(threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Get document metadata by key
     *
     * Returns a specific metadata entry by key for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getDocumentMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID documentId = null;
        String key = null;
        Metadata response = api.getDocumentMetadataByKey(threatModelId, documentId, key);

        // TODO: test validations
    }
    /**
     * Get note metadata
     *
     * Returns all metadata key-value pairs for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNoteMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID noteId = null;
        List<Metadata> response = api.getNoteMetadata(threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Get note metadata by key
     *
     * Returns a specific metadata entry by key for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getNoteMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID noteId = null;
        String key = null;
        Metadata response = api.getNoteMetadataByKey(threatModelId, noteId, key);

        // TODO: test validations
    }
    /**
     * Get source metadata
     *
     * Returns all metadata key-value pairs for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRepositoryMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID repositoryId = null;
        List<Metadata> response = api.getRepositoryMetadata(threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Get source metadata by key
     *
     * Returns a specific metadata entry by key for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRepositoryMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID repositoryId = null;
        String key = null;
        Metadata response = api.getRepositoryMetadataByKey(threatModelId, repositoryId, key);

        // TODO: test validations
    }
    /**
     * Get threat metadata
     *
     * Returns all metadata key-value pairs for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID threatId = null;
        List<Metadata> response = api.getThreatMetadata(threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Get threat metadata by key
     *
     * Returns a specific metadata entry by key for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID threatId = null;
        String key = null;
        Metadata response = api.getThreatMetadataByKey(threatModelId, threatId, key);

        // TODO: test validations
    }
    /**
     * Get a specific asset
     *
     * Returns a single asset by its ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelAssetTest() throws Exception {
        UUID threatModelId = null;
        UUID assetId = null;
        Asset response = api.getThreatModelAsset(threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Get all metadata for an asset
     *
     * Returns all metadata key-value pairs for the specified asset
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelAssetMetadataTest() throws Exception {
        UUID threatModelId = null;
        UUID assetId = null;
        List<Metadata> response = api.getThreatModelAssetMetadata(threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Get specific metadata for an asset
     *
     * Returns a single metadata value by its key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelAssetMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        UUID assetId = null;
        String key = null;
        Metadata response = api.getThreatModelAssetMetadataByKey(threatModelId, assetId, key);

        // TODO: test validations
    }
    /**
     * List assets in a threat model
     *
     * Returns a paginated list of assets within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelAssetsTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        List<Asset> response = api.getThreatModelAssets(threatModelId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get a specific diagram
     *
     * Retrieves a specific diagram from the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelDiagramTest() throws Exception {
        UUID threatModelId = null;
        UUID diagramId = null;
        Diagram response = api.getThreatModelDiagram(threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * List threat model diagrams
     *
     * Returns all diagrams associated with a specific threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelDiagramsTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        List<DiagramListItem> response = api.getThreatModelDiagrams(threatModelId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get a specific document
     *
     * Returns details of a specific document within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelDocumentTest() throws Exception {
        UUID threatModelId = null;
        UUID documentId = null;
        Document response = api.getThreatModelDocument(threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * List documents in a threat model
     *
     * Returns a paginated list of documents within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelDocumentsTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        List<Document> response = api.getThreatModelDocuments(threatModelId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get threat model metadata
     *
     * Returns all metadata key-value pairs for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelMetadataTest() throws Exception {
        UUID threatModelId = null;
        List<Metadata> response = api.getThreatModelMetadata(threatModelId);

        // TODO: test validations
    }
    /**
     * Get threat model metadata by key
     *
     * Returns a specific metadata entry by key for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelMetadataByKeyTest() throws Exception {
        UUID threatModelId = null;
        String key = null;
        Metadata response = api.getThreatModelMetadataByKey(threatModelId, key);

        // TODO: test validations
    }
    /**
     * Get a specific note
     *
     * Returns details of a specific note within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelNoteTest() throws Exception {
        UUID threatModelId = null;
        UUID noteId = null;
        Note response = api.getThreatModelNote(threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * List notes in a threat model
     *
     * Returns a paginated list of notes within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelNotesTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        List<NoteListItem> response = api.getThreatModelNotes(threatModelId, limit, offset);

        // TODO: test validations
    }
    /**
     * List sources in a threat model
     *
     * Returns a paginated list of source code references within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelRepositoriesTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        List<Repository> response = api.getThreatModelRepositories(threatModelId, limit, offset);

        // TODO: test validations
    }
    /**
     * Get a specific source reference
     *
     * Returns details of a specific source code reference within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelRepositoryTest() throws Exception {
        UUID threatModelId = null;
        UUID repositoryId = null;
        Repository response = api.getThreatModelRepository(threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Get a specific threat
     *
     * Returns details of a specific threat within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelThreatTest() throws Exception {
        UUID threatModelId = null;
        UUID threatId = null;
        Threat response = api.getThreatModelThreat(threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * List threats in a threat model
     *
     * Returns a paginated list of threats within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getThreatModelThreatsTest() throws Exception {
        UUID threatModelId = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String name = null;
        String description = null;
        String threatType = null;
        String severity = null;
        String priority = null;
        String status = null;
        UUID diagramId = null;
        UUID cellId = null;
        BigDecimal scoreGt = null;
        BigDecimal scoreLt = null;
        BigDecimal scoreEq = null;
        BigDecimal scoreGe = null;
        BigDecimal scoreLe = null;
        OffsetDateTime createdAfter = null;
        OffsetDateTime createdBefore = null;
        OffsetDateTime modifiedAfter = null;
        OffsetDateTime modifiedBefore = null;
        List<Threat> response = api.getThreatModelThreats(threatModelId, limit, offset, sort, name, description, threatType, severity, priority, status, diagramId, cellId, scoreGt, scoreLt, scoreEq, scoreGe, scoreLe, createdAfter, createdBefore, modifiedAfter, modifiedBefore);

        // TODO: test validations
    }
    /**
     * Partially update a diagram
     *
     * Apply JSON Patch operations to update specific parts of a diagram
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchThreatModelDiagramTest() throws Exception {
        List<ThreatsThreatIdBody> body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        Diagram response = api.patchThreatModelDiagram(body, threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Partially update a threat
     *
     * Applies JSON patch operations to a specific threat within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void patchThreatModelThreatTest() throws Exception {
        List<ThreatsThreatIdBody> body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        Threat response = api.patchThreatModelThreat(body, threatModelId, threatId);

        // TODO: test validations
    }
    /**
     * Update diagram metadata by key
     *
     * Updates or creates a metadata entry for the diagram with the specified key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDiagramMetadataByKeyTest() throws Exception {
        MetadataKeyBody4 body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        String key = null;
        Metadata response = api.updateDiagramMetadataByKey(body, threatModelId, diagramId, key);

        // TODO: test validations
    }
    /**
     * Update document metadata by key
     *
     * Updates a specific metadata entry by key for the specified document
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateDocumentMetadataByKeyTest() throws Exception {
        MetadataKeyBody1 body = null;
        UUID threatModelId = null;
        UUID documentId = null;
        String key = null;
        Metadata response = api.updateDocumentMetadataByKey(body, threatModelId, documentId, key);

        // TODO: test validations
    }
    /**
     * Update note metadata by key
     *
     * Updates a specific metadata entry by key for the specified note
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateNoteMetadataByKeyTest() throws Exception {
        MetadataKeyBody5 body = null;
        UUID threatModelId = null;
        UUID noteId = null;
        String key = null;
        Metadata response = api.updateNoteMetadataByKey(body, threatModelId, noteId, key);

        // TODO: test validations
    }
    /**
     * Update source metadata by key
     *
     * Updates a specific metadata entry by key for the specified source reference
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryMetadataByKeyTest() throws Exception {
        MetadataKeyBody2 body = null;
        UUID threatModelId = null;
        UUID repositoryId = null;
        String key = null;
        Metadata response = api.updateRepositoryMetadataByKey(body, threatModelId, repositoryId, key);

        // TODO: test validations
    }
    /**
     * Update threat metadata by key
     *
     * Updates a specific metadata entry by key for the specified threat
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatMetadataByKeyTest() throws Exception {
        MetadataKeyBody body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        String key = null;
        Metadata response = api.updateThreatMetadataByKey(body, threatModelId, threatId, key);

        // TODO: test validations
    }
    /**
     * Update an asset
     *
     * Updates an existing asset within the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelAssetTest() throws Exception {
        AssetInput body = null;
        UUID threatModelId = null;
        UUID assetId = null;
        Asset response = api.updateThreatModelAsset(body, threatModelId, assetId);

        // TODO: test validations
    }
    /**
     * Update asset metadata
     *
     * Updates an existing metadata value by its key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelAssetMetadataTest() throws Exception {
        Metadata body = null;
        UUID threatModelId = null;
        UUID assetId = null;
        String key = null;
        Metadata response = api.updateThreatModelAssetMetadata(body, threatModelId, assetId, key);

        // TODO: test validations
    }
    /**
     * Update a diagram
     *
     * Completely replaces a diagram with new data
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelDiagramTest() throws Exception {
        Diagram body = null;
        UUID threatModelId = null;
        UUID diagramId = null;
        Diagram response = api.updateThreatModelDiagram(body, threatModelId, diagramId);

        // TODO: test validations
    }
    /**
     * Update a document
     *
     * Updates a specific document within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelDocumentTest() throws Exception {
        DocumentInput body = null;
        UUID threatModelId = null;
        UUID documentId = null;
        Document response = api.updateThreatModelDocument(body, threatModelId, documentId);

        // TODO: test validations
    }
    /**
     * Update threat model metadata by key
     *
     * Updates a specific metadata entry by key for the specified threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelMetadataByKeyTest() throws Exception {
        MetadataKeyBody3 body = null;
        UUID threatModelId = null;
        String key = null;
        Metadata response = api.updateThreatModelMetadataByKey(body, threatModelId, key);

        // TODO: test validations
    }
    /**
     * Update a note
     *
     * Updates a specific note within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelNoteTest() throws Exception {
        NoteInput body = null;
        UUID threatModelId = null;
        UUID noteId = null;
        Note response = api.updateThreatModelNote(body, threatModelId, noteId);

        // TODO: test validations
    }
    /**
     * Update a source reference
     *
     * Updates a specific source code reference within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelRepositoryTest() throws Exception {
        RepositoryInput body = null;
        UUID threatModelId = null;
        UUID repositoryId = null;
        Repository response = api.updateThreatModelRepository(body, threatModelId, repositoryId);

        // TODO: test validations
    }
    /**
     * Update a threat
     *
     * Updates a specific threat within the threat model
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateThreatModelThreatTest() throws Exception {
        ThreatInput body = null;
        UUID threatModelId = null;
        UUID threatId = null;
        Threat response = api.updateThreatModelThreat(body, threatModelId, threatId);

        // TODO: test validations
    }
}
