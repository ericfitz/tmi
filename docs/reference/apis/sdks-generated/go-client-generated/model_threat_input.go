/*
 * TMI (Threat Modeling Improved) API
 *
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tmiclient

// Input schema for creating/updating Threat
type ThreatInput struct {
	// Name of the threat
	Name string `json:"name"`
	// Description of the threat and risk to the organization
	Description string `json:"description,omitempty"`
	// Recommended or planned mitigation(s) for the threat
	Mitigation string `json:"mitigation,omitempty"`
	// Unique identifier of the associated diagram (if applicable) (UUID)
	DiagramId string `json:"diagram_id,omitempty"`
	// Unique identifier of the associated cell (if applicable) (UUID)
	CellId string `json:"cell_id,omitempty"`
	// Severity level of the threat
	Severity string `json:"severity"`
	// Numeric score representing the risk or impact of the threat
	Score float64 `json:"score,omitempty"`
	// Priority level for addressing the threat
	Priority string `json:"priority"`
	// Whether the threat has been mitigated
	Mitigated bool `json:"mitigated"`
	// Current status of the threat
	Status string `json:"status"`
	// Type or category of the threat
	ThreatType string `json:"threat_type"`
	// Key-value pairs for additional threat metadata
	Metadata []Metadata `json:"metadata,omitempty"`
	// URL to an issue in an issue tracking system for this threat
	IssueUri string `json:"issue_uri,omitempty"`
	// Unique identifier of the associated asset (if applicable) (UUID)
	AssetId string `json:"asset_id,omitempty"`
}
