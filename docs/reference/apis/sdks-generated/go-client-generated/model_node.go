/*
 * TMI (Threat Modeling Improved) API
 *
 * A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement 
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package tmiclient

type Node struct {
	// Node type determining its visual representation and behavior
	Shape string `json:"shape"`
	Position *NodePosition `json:"position"`
	Size *NodeSize `json:"size"`
	// Rotation angle in degrees
	Angle float64 `json:"angle,omitempty"`
	// Visual styling attributes for the node
	Attrs *Object `json:"attrs,omitempty"`
	// Port configuration for connections
	Ports *Object `json:"ports,omitempty"`
	// ID of the parent cell for nested/grouped nodes (UUID)
	Parent string `json:"parent,omitempty"`
	// Unique identifier of the cell (UUID)
	Id string `json:"id"`
	// Z-order layer for rendering (higher values render on top)
	ZIndex float64 `json:"zIndex,omitempty"`
	// Whether the cell is visible in the diagram
	Visible bool `json:"visible,omitempty"`
	Data *CellData `json:"data,omitempty"`
	// SVG/HTML markup definition for custom shape rendering in X6
	Markup []MarkupElement `json:"markup,omitempty"`
	// Interactive tools attached to the cell for user interaction
	Tools []CellTool `json:"tools,omitempty"`
}
