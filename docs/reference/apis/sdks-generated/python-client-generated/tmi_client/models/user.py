# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'email': 'str',
        'name': 'str',
        'picture': 'str',
        'idp': 'str',
        'groups': 'list[str]',
        'last_login': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'email': 'email',
        'name': 'name',
        'picture': 'picture',
        'idp': 'idp',
        'groups': 'groups',
        'last_login': 'last_login'
    }

    def __init__(self, user_id=None, email=None, name=None, picture=None, idp=None, groups=None, last_login=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._email = None
        self._name = None
        self._picture = None
        self._idp = None
        self._groups = None
        self._last_login = None
        self.discriminator = None
        self.user_id = user_id
        self.email = email
        self.name = name
        if picture is not None:
            self.picture = picture
        if idp is not None:
            self.idp = idp
        if groups is not None:
            self.groups = groups
        if last_login is not None:
            self.last_login = last_login

    @property
    def user_id(self):
        """Gets the user_id of this User.  # noqa: E501

        OAuth provider's unique identifier for the user (from primary provider)  # noqa: E501

        :return: The user_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        OAuth provider's unique identifier for the user (from primary provider)  # noqa: E501

        :param user_id: The user_id of this User.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        User's email address  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User's email address  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        User's display name  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        User's display name  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this User.  # noqa: E501

        URL to user's profile picture  # noqa: E501

        :return: The picture of this User.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this User.

        URL to user's profile picture  # noqa: E501

        :param picture: The picture of this User.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def idp(self):
        """Gets the idp of this User.  # noqa: E501

        Identity provider used for current session  # noqa: E501

        :return: The idp of this User.  # noqa: E501
        :rtype: str
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this User.

        Identity provider used for current session  # noqa: E501

        :param idp: The idp of this User.  # noqa: E501
        :type: str
        """

        self._idp = idp

    @property
    def groups(self):
        """Gets the groups of this User.  # noqa: E501

        Groups the user belongs to (from identity provider)  # noqa: E501

        :return: The groups of this User.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this User.

        Groups the user belongs to (from identity provider)  # noqa: E501

        :param groups: The groups of this User.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501

        Timestamp of user's last login  # noqa: E501

        :return: The last_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.

        Timestamp of user's last login  # noqa: E501

        :param last_login: The last_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
