# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from tmi_client.models.cell import Cell  # noqa: F401,E501

class Node(Cell):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shape': 'str',
        'position': 'NodePosition',
        'size': 'NodeSize',
        'angle': 'float',
        'attrs': 'object',
        'ports': 'object',
        'parent': 'str'
    }
    if hasattr(Cell, "swagger_types"):
        swagger_types.update(Cell.swagger_types)

    attribute_map = {
        'shape': 'shape',
        'position': 'position',
        'size': 'size',
        'angle': 'angle',
        'attrs': 'attrs',
        'ports': 'ports',
        'parent': 'parent'
    }
    if hasattr(Cell, "attribute_map"):
        attribute_map.update(Cell.attribute_map)

    def __init__(self, shape=None, position=None, size=None, angle=0, attrs=None, ports=None, parent=None, *args, **kwargs):  # noqa: E501
        """Node - a model defined in Swagger"""  # noqa: E501
        self._shape = None
        self._position = None
        self._size = None
        self._angle = None
        self._attrs = None
        self._ports = None
        self._parent = None
        self.discriminator = None
        if shape is not None:
            self.shape = shape
        self.position = position
        self.size = size
        if angle is not None:
            self.angle = angle
        if attrs is not None:
            self.attrs = attrs
        if ports is not None:
            self.ports = ports
        if parent is not None:
            self.parent = parent
        Cell.__init__(self, *args, **kwargs)

    @property
    def shape(self):
        """Gets the shape of this Node.  # noqa: E501

        Node type determining its visual representation and behavior  # noqa: E501

        :return: The shape of this Node.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this Node.

        Node type determining its visual representation and behavior  # noqa: E501

        :param shape: The shape of this Node.  # noqa: E501
        :type: str
        """
        allowed_values = ["actor", "process", "store", "security-boundary", "text-box"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"  # noqa: E501
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def position(self):
        """Gets the position of this Node.  # noqa: E501


        :return: The position of this Node.  # noqa: E501
        :rtype: NodePosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Node.


        :param position: The position of this Node.  # noqa: E501
        :type: NodePosition
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def size(self):
        """Gets the size of this Node.  # noqa: E501


        :return: The size of this Node.  # noqa: E501
        :rtype: NodeSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Node.


        :param size: The size of this Node.  # noqa: E501
        :type: NodeSize
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def angle(self):
        """Gets the angle of this Node.  # noqa: E501

        Rotation angle in degrees  # noqa: E501

        :return: The angle of this Node.  # noqa: E501
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this Node.

        Rotation angle in degrees  # noqa: E501

        :param angle: The angle of this Node.  # noqa: E501
        :type: float
        """

        self._angle = angle

    @property
    def attrs(self):
        """Gets the attrs of this Node.  # noqa: E501

        Visual styling attributes for the node  # noqa: E501

        :return: The attrs of this Node.  # noqa: E501
        :rtype: object
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this Node.

        Visual styling attributes for the node  # noqa: E501

        :param attrs: The attrs of this Node.  # noqa: E501
        :type: object
        """

        self._attrs = attrs

    @property
    def ports(self):
        """Gets the ports of this Node.  # noqa: E501

        Port configuration for connections  # noqa: E501

        :return: The ports of this Node.  # noqa: E501
        :rtype: object
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this Node.

        Port configuration for connections  # noqa: E501

        :param ports: The ports of this Node.  # noqa: E501
        :type: object
        """

        self._ports = ports

    @property
    def parent(self):
        """Gets the parent of this Node.  # noqa: E501

        ID of the parent cell for nested/grouped nodes (UUID)  # noqa: E501

        :return: The parent of this Node.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Node.

        ID of the parent cell for nested/grouped nodes (UUID)  # noqa: E501

        :param parent: The parent of this Node.  # noqa: E501
        :type: str
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Node, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Node):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
