# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issuer': 'str',
        'authorization_endpoint': 'str',
        'token_endpoint': 'str',
        'userinfo_endpoint': 'str',
        'jwks_uri': 'str',
        'response_types_supported': 'list[str]',
        'subject_types_supported': 'list[str]',
        'id_token_signing_alg_values_supported': 'list[str]',
        'scopes_supported': 'list[str]',
        'claims_supported': 'list[str]',
        'introspection_endpoint': 'str'
    }

    attribute_map = {
        'issuer': 'issuer',
        'authorization_endpoint': 'authorization_endpoint',
        'token_endpoint': 'token_endpoint',
        'userinfo_endpoint': 'userinfo_endpoint',
        'jwks_uri': 'jwks_uri',
        'response_types_supported': 'response_types_supported',
        'subject_types_supported': 'subject_types_supported',
        'id_token_signing_alg_values_supported': 'id_token_signing_alg_values_supported',
        'scopes_supported': 'scopes_supported',
        'claims_supported': 'claims_supported',
        'introspection_endpoint': 'introspection_endpoint'
    }

    def __init__(self, issuer=None, authorization_endpoint=None, token_endpoint=None, userinfo_endpoint=None, jwks_uri=None, response_types_supported=None, subject_types_supported=None, id_token_signing_alg_values_supported=None, scopes_supported=None, claims_supported=None, introspection_endpoint=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._issuer = None
        self._authorization_endpoint = None
        self._token_endpoint = None
        self._userinfo_endpoint = None
        self._jwks_uri = None
        self._response_types_supported = None
        self._subject_types_supported = None
        self._id_token_signing_alg_values_supported = None
        self._scopes_supported = None
        self._claims_supported = None
        self._introspection_endpoint = None
        self.discriminator = None
        self.issuer = issuer
        self.authorization_endpoint = authorization_endpoint
        self.token_endpoint = token_endpoint
        if userinfo_endpoint is not None:
            self.userinfo_endpoint = userinfo_endpoint
        self.jwks_uri = jwks_uri
        self.response_types_supported = response_types_supported
        self.subject_types_supported = subject_types_supported
        self.id_token_signing_alg_values_supported = id_token_signing_alg_values_supported
        if scopes_supported is not None:
            self.scopes_supported = scopes_supported
        if claims_supported is not None:
            self.claims_supported = claims_supported
        if introspection_endpoint is not None:
            self.introspection_endpoint = introspection_endpoint

    @property
    def issuer(self):
        """Gets the issuer of this InlineResponse200.  # noqa: E501


        :return: The issuer of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this InlineResponse200.


        :param issuer: The issuer of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")  # noqa: E501

        self._issuer = issuer

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this InlineResponse200.  # noqa: E501


        :return: The authorization_endpoint of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this InlineResponse200.


        :param authorization_endpoint: The authorization_endpoint of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if authorization_endpoint is None:
            raise ValueError("Invalid value for `authorization_endpoint`, must not be `None`")  # noqa: E501

        self._authorization_endpoint = authorization_endpoint

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this InlineResponse200.  # noqa: E501


        :return: The token_endpoint of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this InlineResponse200.


        :param token_endpoint: The token_endpoint of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if token_endpoint is None:
            raise ValueError("Invalid value for `token_endpoint`, must not be `None`")  # noqa: E501

        self._token_endpoint = token_endpoint

    @property
    def userinfo_endpoint(self):
        """Gets the userinfo_endpoint of this InlineResponse200.  # noqa: E501


        :return: The userinfo_endpoint of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._userinfo_endpoint

    @userinfo_endpoint.setter
    def userinfo_endpoint(self, userinfo_endpoint):
        """Sets the userinfo_endpoint of this InlineResponse200.


        :param userinfo_endpoint: The userinfo_endpoint of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._userinfo_endpoint = userinfo_endpoint

    @property
    def jwks_uri(self):
        """Gets the jwks_uri of this InlineResponse200.  # noqa: E501


        :return: The jwks_uri of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._jwks_uri

    @jwks_uri.setter
    def jwks_uri(self, jwks_uri):
        """Sets the jwks_uri of this InlineResponse200.


        :param jwks_uri: The jwks_uri of this InlineResponse200.  # noqa: E501
        :type: str
        """
        if jwks_uri is None:
            raise ValueError("Invalid value for `jwks_uri`, must not be `None`")  # noqa: E501

        self._jwks_uri = jwks_uri

    @property
    def response_types_supported(self):
        """Gets the response_types_supported of this InlineResponse200.  # noqa: E501


        :return: The response_types_supported of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._response_types_supported

    @response_types_supported.setter
    def response_types_supported(self, response_types_supported):
        """Sets the response_types_supported of this InlineResponse200.


        :param response_types_supported: The response_types_supported of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        if response_types_supported is None:
            raise ValueError("Invalid value for `response_types_supported`, must not be `None`")  # noqa: E501

        self._response_types_supported = response_types_supported

    @property
    def subject_types_supported(self):
        """Gets the subject_types_supported of this InlineResponse200.  # noqa: E501


        :return: The subject_types_supported of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_types_supported

    @subject_types_supported.setter
    def subject_types_supported(self, subject_types_supported):
        """Sets the subject_types_supported of this InlineResponse200.


        :param subject_types_supported: The subject_types_supported of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        if subject_types_supported is None:
            raise ValueError("Invalid value for `subject_types_supported`, must not be `None`")  # noqa: E501

        self._subject_types_supported = subject_types_supported

    @property
    def id_token_signing_alg_values_supported(self):
        """Gets the id_token_signing_alg_values_supported of this InlineResponse200.  # noqa: E501


        :return: The id_token_signing_alg_values_supported of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._id_token_signing_alg_values_supported

    @id_token_signing_alg_values_supported.setter
    def id_token_signing_alg_values_supported(self, id_token_signing_alg_values_supported):
        """Sets the id_token_signing_alg_values_supported of this InlineResponse200.


        :param id_token_signing_alg_values_supported: The id_token_signing_alg_values_supported of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """
        if id_token_signing_alg_values_supported is None:
            raise ValueError("Invalid value for `id_token_signing_alg_values_supported`, must not be `None`")  # noqa: E501

        self._id_token_signing_alg_values_supported = id_token_signing_alg_values_supported

    @property
    def scopes_supported(self):
        """Gets the scopes_supported of this InlineResponse200.  # noqa: E501


        :return: The scopes_supported of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        """Sets the scopes_supported of this InlineResponse200.


        :param scopes_supported: The scopes_supported of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """

        self._scopes_supported = scopes_supported

    @property
    def claims_supported(self):
        """Gets the claims_supported of this InlineResponse200.  # noqa: E501


        :return: The claims_supported of this InlineResponse200.  # noqa: E501
        :rtype: list[str]
        """
        return self._claims_supported

    @claims_supported.setter
    def claims_supported(self, claims_supported):
        """Sets the claims_supported of this InlineResponse200.


        :param claims_supported: The claims_supported of this InlineResponse200.  # noqa: E501
        :type: list[str]
        """

        self._claims_supported = claims_supported

    @property
    def introspection_endpoint(self):
        """Gets the introspection_endpoint of this InlineResponse200.  # noqa: E501


        :return: The introspection_endpoint of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._introspection_endpoint

    @introspection_endpoint.setter
    def introspection_endpoint(self, introspection_endpoint):
        """Sets the introspection_endpoint of this InlineResponse200.


        :param introspection_endpoint: The introspection_endpoint of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._introspection_endpoint = introspection_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
