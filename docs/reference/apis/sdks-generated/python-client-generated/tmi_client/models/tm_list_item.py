# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TMListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'owner': 'str',
        'created_by': 'str',
        'threat_model_framework': 'str',
        'document_count': 'int',
        'repo_count': 'int',
        'diagram_count': 'int',
        'threat_count': 'int',
        'issue_uri': 'str',
        'asset_count': 'int',
        'note_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'owner': 'owner',
        'created_by': 'created_by',
        'threat_model_framework': 'threat_model_framework',
        'document_count': 'document_count',
        'repo_count': 'repo_count',
        'diagram_count': 'diagram_count',
        'threat_count': 'threat_count',
        'issue_uri': 'issue_uri',
        'asset_count': 'asset_count',
        'note_count': 'note_count'
    }

    def __init__(self, id=None, name=None, description=None, created_at=None, modified_at=None, owner=None, created_by=None, threat_model_framework=None, document_count=None, repo_count=None, diagram_count=None, threat_count=None, issue_uri=None, asset_count=None, note_count=None):  # noqa: E501
        """TMListItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._created_at = None
        self._modified_at = None
        self._owner = None
        self._created_by = None
        self._threat_model_framework = None
        self._document_count = None
        self._repo_count = None
        self._diagram_count = None
        self._threat_count = None
        self._issue_uri = None
        self._asset_count = None
        self._note_count = None
        self.discriminator = None
        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.created_at = created_at
        self.modified_at = modified_at
        self.owner = owner
        self.created_by = created_by
        self.threat_model_framework = threat_model_framework
        self.document_count = document_count
        self.repo_count = repo_count
        self.diagram_count = diagram_count
        self.threat_count = threat_count
        if issue_uri is not None:
            self.issue_uri = issue_uri
        self.asset_count = asset_count
        self.note_count = note_count

    @property
    def id(self):
        """Gets the id of this TMListItem.  # noqa: E501

        Unique identifier of the threat model (UUID)  # noqa: E501

        :return: The id of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TMListItem.

        Unique identifier of the threat model (UUID)  # noqa: E501

        :param id: The id of this TMListItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this TMListItem.  # noqa: E501

        Name of the threat model  # noqa: E501

        :return: The name of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TMListItem.

        Name of the threat model  # noqa: E501

        :param name: The name of this TMListItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TMListItem.  # noqa: E501

        Description of the threat model  # noqa: E501

        :return: The description of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TMListItem.

        Description of the threat model  # noqa: E501

        :param description: The description of this TMListItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this TMListItem.  # noqa: E501

        Creation timestamp (RFC3339)  # noqa: E501

        :return: The created_at of this TMListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TMListItem.

        Creation timestamp (RFC3339)  # noqa: E501

        :param created_at: The created_at of this TMListItem.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this TMListItem.  # noqa: E501

        Last modification timestamp (RFC3339)  # noqa: E501

        :return: The modified_at of this TMListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this TMListItem.

        Last modification timestamp (RFC3339)  # noqa: E501

        :param modified_at: The modified_at of this TMListItem.  # noqa: E501
        :type: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def owner(self):
        """Gets the owner of this TMListItem.  # noqa: E501

        Email address of the current owner  # noqa: E501

        :return: The owner of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this TMListItem.

        Email address of the current owner  # noqa: E501

        :param owner: The owner of this TMListItem.  # noqa: E501
        :type: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def created_by(self):
        """Gets the created_by of this TMListItem.  # noqa: E501

        Email address, name or identifier of the creator  # noqa: E501

        :return: The created_by of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TMListItem.

        Email address, name or identifier of the creator  # noqa: E501

        :param created_by: The created_by of this TMListItem.  # noqa: E501
        :type: str
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def threat_model_framework(self):
        """Gets the threat_model_framework of this TMListItem.  # noqa: E501

        The framework used for this threat model  # noqa: E501

        :return: The threat_model_framework of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._threat_model_framework

    @threat_model_framework.setter
    def threat_model_framework(self, threat_model_framework):
        """Sets the threat_model_framework of this TMListItem.

        The framework used for this threat model  # noqa: E501

        :param threat_model_framework: The threat_model_framework of this TMListItem.  # noqa: E501
        :type: str
        """
        if threat_model_framework is None:
            raise ValueError("Invalid value for `threat_model_framework`, must not be `None`")  # noqa: E501

        self._threat_model_framework = threat_model_framework

    @property
    def document_count(self):
        """Gets the document_count of this TMListItem.  # noqa: E501

        Number of documents associated with this threat model  # noqa: E501

        :return: The document_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this TMListItem.

        Number of documents associated with this threat model  # noqa: E501

        :param document_count: The document_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if document_count is None:
            raise ValueError("Invalid value for `document_count`, must not be `None`")  # noqa: E501

        self._document_count = document_count

    @property
    def repo_count(self):
        """Gets the repo_count of this TMListItem.  # noqa: E501

        Number of source code repository entries associated with this threat model  # noqa: E501

        :return: The repo_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._repo_count

    @repo_count.setter
    def repo_count(self, repo_count):
        """Sets the repo_count of this TMListItem.

        Number of source code repository entries associated with this threat model  # noqa: E501

        :param repo_count: The repo_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if repo_count is None:
            raise ValueError("Invalid value for `repo_count`, must not be `None`")  # noqa: E501

        self._repo_count = repo_count

    @property
    def diagram_count(self):
        """Gets the diagram_count of this TMListItem.  # noqa: E501

        Number of diagrams associated with this threat model  # noqa: E501

        :return: The diagram_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._diagram_count

    @diagram_count.setter
    def diagram_count(self, diagram_count):
        """Sets the diagram_count of this TMListItem.

        Number of diagrams associated with this threat model  # noqa: E501

        :param diagram_count: The diagram_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if diagram_count is None:
            raise ValueError("Invalid value for `diagram_count`, must not be `None`")  # noqa: E501

        self._diagram_count = diagram_count

    @property
    def threat_count(self):
        """Gets the threat_count of this TMListItem.  # noqa: E501

        Number of threats defined in this threat model  # noqa: E501

        :return: The threat_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._threat_count

    @threat_count.setter
    def threat_count(self, threat_count):
        """Sets the threat_count of this TMListItem.

        Number of threats defined in this threat model  # noqa: E501

        :param threat_count: The threat_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if threat_count is None:
            raise ValueError("Invalid value for `threat_count`, must not be `None`")  # noqa: E501

        self._threat_count = threat_count

    @property
    def issue_uri(self):
        """Gets the issue_uri of this TMListItem.  # noqa: E501

        URL to an issue in an issue tracking system  # noqa: E501

        :return: The issue_uri of this TMListItem.  # noqa: E501
        :rtype: str
        """
        return self._issue_uri

    @issue_uri.setter
    def issue_uri(self, issue_uri):
        """Sets the issue_uri of this TMListItem.

        URL to an issue in an issue tracking system  # noqa: E501

        :param issue_uri: The issue_uri of this TMListItem.  # noqa: E501
        :type: str
        """

        self._issue_uri = issue_uri

    @property
    def asset_count(self):
        """Gets the asset_count of this TMListItem.  # noqa: E501

        Number of assets associated with this threat model  # noqa: E501

        :return: The asset_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._asset_count

    @asset_count.setter
    def asset_count(self, asset_count):
        """Sets the asset_count of this TMListItem.

        Number of assets associated with this threat model  # noqa: E501

        :param asset_count: The asset_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if asset_count is None:
            raise ValueError("Invalid value for `asset_count`, must not be `None`")  # noqa: E501

        self._asset_count = asset_count

    @property
    def note_count(self):
        """Gets the note_count of this TMListItem.  # noqa: E501

        Number of notes associated with this threat model  # noqa: E501

        :return: The note_count of this TMListItem.  # noqa: E501
        :rtype: int
        """
        return self._note_count

    @note_count.setter
    def note_count(self, note_count):
        """Sets the note_count of this TMListItem.

        Number of notes associated with this threat model  # noqa: E501

        :param note_count: The note_count of this TMListItem.  # noqa: E501
        :type: int
        """
        if note_count is None:
            raise ValueError("Invalid value for `note_count`, must not be `None`")  # noqa: E501

        self._note_count = note_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TMListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TMListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
