# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseDiagram(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'type': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'metadata': 'list[Metadata]',
        'update_vector': 'int',
        'image': 'BaseDiagramImage',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'metadata': 'metadata',
        'update_vector': 'update_vector',
        'image': 'image',
        'description': 'description'
    }

    discriminator_value_class_map = {
            'DFD-1.0.0'.lower(): '#/components/schemas/DfdDiagram',
    }

    def __init__(self, id=None, name=None, type=None, created_at=None, modified_at=None, metadata=None, update_vector=None, image=None, description=None):  # noqa: E501
        """BaseDiagram - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._created_at = None
        self._modified_at = None
        self._metadata = None
        self._update_vector = None
        self._image = None
        self._description = None
        self.discriminator = 'type'
        self.id = id
        self.name = name
        self.type = type
        self.created_at = created_at
        self.modified_at = modified_at
        if metadata is not None:
            self.metadata = metadata
        if update_vector is not None:
            self.update_vector = update_vector
        if image is not None:
            self.image = image
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this BaseDiagram.  # noqa: E501

        Unique identifier for the diagram (UUID)  # noqa: E501

        :return: The id of this BaseDiagram.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BaseDiagram.

        Unique identifier for the diagram (UUID)  # noqa: E501

        :param id: The id of this BaseDiagram.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this BaseDiagram.  # noqa: E501

        Name of the diagram  # noqa: E501

        :return: The name of this BaseDiagram.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BaseDiagram.

        Name of the diagram  # noqa: E501

        :param name: The name of this BaseDiagram.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this BaseDiagram.  # noqa: E501

        Type of diagram with version  # noqa: E501

        :return: The type of this BaseDiagram.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BaseDiagram.

        Type of diagram with version  # noqa: E501

        :param type: The type of this BaseDiagram.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["DFD-1.0.0"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def created_at(self):
        """Gets the created_at of this BaseDiagram.  # noqa: E501

        Creation timestamp (ISO3339)  # noqa: E501

        :return: The created_at of this BaseDiagram.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BaseDiagram.

        Creation timestamp (ISO3339)  # noqa: E501

        :param created_at: The created_at of this BaseDiagram.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this BaseDiagram.  # noqa: E501

        Last modification timestamp (ISO3339)  # noqa: E501

        :return: The modified_at of this BaseDiagram.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this BaseDiagram.

        Last modification timestamp (ISO3339)  # noqa: E501

        :param modified_at: The modified_at of this BaseDiagram.  # noqa: E501
        :type: datetime
        """
        if modified_at is None:
            raise ValueError("Invalid value for `modified_at`, must not be `None`")  # noqa: E501

        self._modified_at = modified_at

    @property
    def metadata(self):
        """Gets the metadata of this BaseDiagram.  # noqa: E501

        Key-value pairs for additional diagram metadata  # noqa: E501

        :return: The metadata of this BaseDiagram.  # noqa: E501
        :rtype: list[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this BaseDiagram.

        Key-value pairs for additional diagram metadata  # noqa: E501

        :param metadata: The metadata of this BaseDiagram.  # noqa: E501
        :type: list[Metadata]
        """

        self._metadata = metadata

    @property
    def update_vector(self):
        """Gets the update_vector of this BaseDiagram.  # noqa: E501

        Server-managed monotonic version counter, incremented on each diagram update  # noqa: E501

        :return: The update_vector of this BaseDiagram.  # noqa: E501
        :rtype: int
        """
        return self._update_vector

    @update_vector.setter
    def update_vector(self, update_vector):
        """Sets the update_vector of this BaseDiagram.

        Server-managed monotonic version counter, incremented on each diagram update  # noqa: E501

        :param update_vector: The update_vector of this BaseDiagram.  # noqa: E501
        :type: int
        """

        self._update_vector = update_vector

    @property
    def image(self):
        """Gets the image of this BaseDiagram.  # noqa: E501


        :return: The image of this BaseDiagram.  # noqa: E501
        :rtype: BaseDiagramImage
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this BaseDiagram.


        :param image: The image of this BaseDiagram.  # noqa: E501
        :type: BaseDiagramImage
        """

        self._image = image

    @property
    def description(self):
        """Gets the description of this BaseDiagram.  # noqa: E501

        Optional description of the diagram  # noqa: E501

        :return: The description of this BaseDiagram.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BaseDiagram.

        Optional description of the diagram  # noqa: E501

        :param description: The description of this BaseDiagram.  # noqa: E501
        :type: str
        """

        self._description = description

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseDiagram, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseDiagram):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
