# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EdgeLabelAttrsText(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'font_size': 'float',
        'fill': 'str',
        'font_family': 'str'
    }

    attribute_map = {
        'text': 'text',
        'font_size': 'fontSize',
        'fill': 'fill',
        'font_family': 'fontFamily'
    }

    def __init__(self, text=None, font_size=None, fill=None, font_family=None):  # noqa: E501
        """EdgeLabelAttrsText - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._font_size = None
        self._fill = None
        self._font_family = None
        self.discriminator = None
        if text is not None:
            self.text = text
        if font_size is not None:
            self.font_size = font_size
        if fill is not None:
            self.fill = fill
        if font_family is not None:
            self.font_family = font_family

    @property
    def text(self):
        """Gets the text of this EdgeLabelAttrsText.  # noqa: E501

        Label text content  # noqa: E501

        :return: The text of this EdgeLabelAttrsText.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this EdgeLabelAttrsText.

        Label text content  # noqa: E501

        :param text: The text of this EdgeLabelAttrsText.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def font_size(self):
        """Gets the font_size of this EdgeLabelAttrsText.  # noqa: E501

        Font size in pixels  # noqa: E501

        :return: The font_size of this EdgeLabelAttrsText.  # noqa: E501
        :rtype: float
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this EdgeLabelAttrsText.

        Font size in pixels  # noqa: E501

        :param font_size: The font_size of this EdgeLabelAttrsText.  # noqa: E501
        :type: float
        """

        self._font_size = font_size

    @property
    def fill(self):
        """Gets the fill of this EdgeLabelAttrsText.  # noqa: E501

        Text color  # noqa: E501

        :return: The fill of this EdgeLabelAttrsText.  # noqa: E501
        :rtype: str
        """
        return self._fill

    @fill.setter
    def fill(self, fill):
        """Sets the fill of this EdgeLabelAttrsText.

        Text color  # noqa: E501

        :param fill: The fill of this EdgeLabelAttrsText.  # noqa: E501
        :type: str
        """

        self._fill = fill

    @property
    def font_family(self):
        """Gets the font_family of this EdgeLabelAttrsText.  # noqa: E501

        Font family  # noqa: E501

        :return: The font_family of this EdgeLabelAttrsText.  # noqa: E501
        :rtype: str
        """
        return self._font_family

    @font_family.setter
    def font_family(self, font_family):
        """Sets the font_family of this EdgeLabelAttrsText.

        Font family  # noqa: E501

        :param font_family: The font_family of this EdgeLabelAttrsText.  # noqa: E501
        :type: str
        """

        self._font_family = font_family

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgeLabelAttrsText, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgeLabelAttrsText):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
