# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Cell(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'shape': 'str',
        'z_index': 'float',
        'visible': 'bool',
        'data': 'CellData',
        'markup': 'list[MarkupElement]',
        'tools': 'list[CellTool]'
    }

    attribute_map = {
        'id': 'id',
        'shape': 'shape',
        'z_index': 'zIndex',
        'visible': 'visible',
        'data': 'data',
        'markup': 'markup',
        'tools': 'tools'
    }

    discriminator_value_class_map = {
          'Node': 'Node',
'Edge': 'Edge'    }

    def __init__(self, id=None, shape=None, z_index=1, visible=True, data=None, markup=None, tools=None):  # noqa: E501
        """Cell - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shape = None
        self._z_index = None
        self._visible = None
        self._data = None
        self._markup = None
        self._tools = None
        self.discriminator = 'shape'
        self.id = id
        self.shape = shape
        if z_index is not None:
            self.z_index = z_index
        if visible is not None:
            self.visible = visible
        if data is not None:
            self.data = data
        if markup is not None:
            self.markup = markup
        if tools is not None:
            self.tools = tools

    @property
    def id(self):
        """Gets the id of this Cell.  # noqa: E501

        Unique identifier of the cell (UUID)  # noqa: E501

        :return: The id of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cell.

        Unique identifier of the cell (UUID)  # noqa: E501

        :param id: The id of this Cell.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def shape(self):
        """Gets the shape of this Cell.  # noqa: E501

        Shape type identifier that determines cell structure and behavior  # noqa: E501

        :return: The shape of this Cell.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this Cell.

        Shape type identifier that determines cell structure and behavior  # noqa: E501

        :param shape: The shape of this Cell.  # noqa: E501
        :type: str
        """
        if shape is None:
            raise ValueError("Invalid value for `shape`, must not be `None`")  # noqa: E501

        self._shape = shape

    @property
    def z_index(self):
        """Gets the z_index of this Cell.  # noqa: E501

        Z-order layer for rendering (higher values render on top)  # noqa: E501

        :return: The z_index of this Cell.  # noqa: E501
        :rtype: float
        """
        return self._z_index

    @z_index.setter
    def z_index(self, z_index):
        """Sets the z_index of this Cell.

        Z-order layer for rendering (higher values render on top)  # noqa: E501

        :param z_index: The z_index of this Cell.  # noqa: E501
        :type: float
        """

        self._z_index = z_index

    @property
    def visible(self):
        """Gets the visible of this Cell.  # noqa: E501

        Whether the cell is visible in the diagram  # noqa: E501

        :return: The visible of this Cell.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Cell.

        Whether the cell is visible in the diagram  # noqa: E501

        :param visible: The visible of this Cell.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def data(self):
        """Gets the data of this Cell.  # noqa: E501


        :return: The data of this Cell.  # noqa: E501
        :rtype: CellData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Cell.


        :param data: The data of this Cell.  # noqa: E501
        :type: CellData
        """

        self._data = data

    @property
    def markup(self):
        """Gets the markup of this Cell.  # noqa: E501

        SVG/HTML markup definition for custom shape rendering in X6  # noqa: E501

        :return: The markup of this Cell.  # noqa: E501
        :rtype: list[MarkupElement]
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this Cell.

        SVG/HTML markup definition for custom shape rendering in X6  # noqa: E501

        :param markup: The markup of this Cell.  # noqa: E501
        :type: list[MarkupElement]
        """

        self._markup = markup

    @property
    def tools(self):
        """Gets the tools of this Cell.  # noqa: E501

        Interactive tools attached to the cell for user interaction  # noqa: E501

        :return: The tools of this Cell.  # noqa: E501
        :rtype: list[CellTool]
        """
        return self._tools

    @tools.setter
    def tools(self, tools):
        """Sets the tools of this Cell.

        Interactive tools attached to the cell for user interaction  # noqa: E501

        :param tools: The tools of this Cell.  # noqa: E501
        :type: list[CellTool]
        """

        self._tools = tools

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Cell, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cell):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
