# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Authorization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'subject_type': 'str',
        'idp': 'str',
        'role': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'subject_type': 'subject_type',
        'idp': 'idp',
        'role': 'role'
    }

    def __init__(self, subject=None, subject_type=None, idp=None, role=None):  # noqa: E501
        """Authorization - a model defined in Swagger"""  # noqa: E501
        self._subject = None
        self._subject_type = None
        self._idp = None
        self._role = None
        self.discriminator = None
        self.subject = subject
        self.subject_type = subject_type
        if idp is not None:
            self.idp = idp
        self.role = role

    @property
    def subject(self):
        """Gets the subject of this Authorization.  # noqa: E501

        Email address or user id for users, group name for groups  # noqa: E501

        :return: The subject of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Authorization.

        Email address or user id for users, group name for groups  # noqa: E501

        :param subject: The subject of this Authorization.  # noqa: E501
        :type: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def subject_type(self):
        """Gets the subject_type of this Authorization.  # noqa: E501

        Type of authorization subject: user (individual) or group  # noqa: E501

        :return: The subject_type of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this Authorization.

        Type of authorization subject: user (individual) or group  # noqa: E501

        :param subject_type: The subject_type of this Authorization.  # noqa: E501
        :type: str
        """
        if subject_type is None:
            raise ValueError("Invalid value for `subject_type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "group"]  # noqa: E501
        if subject_type not in allowed_values:
            raise ValueError(
                "Invalid value for `subject_type` ({0}), must be one of {1}"  # noqa: E501
                .format(subject_type, allowed_values)
            )

        self._subject_type = subject_type

    @property
    def idp(self):
        """Gets the idp of this Authorization.  # noqa: E501

        Identity provider (required for groups, optional for users)  # noqa: E501

        :return: The idp of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._idp

    @idp.setter
    def idp(self, idp):
        """Sets the idp of this Authorization.

        Identity provider (required for groups, optional for users)  # noqa: E501

        :param idp: The idp of this Authorization.  # noqa: E501
        :type: str
        """

        self._idp = idp

    @property
    def role(self):
        """Gets the role of this Authorization.  # noqa: E501

        Role: reader (view), writer (edit), owner (full control)  # noqa: E501

        :return: The role of this Authorization.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Authorization.

        Role: reader (view), writer (edit), owner (full control)  # noqa: E501

        :param role: The role of this Authorization.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["reader", "writer", "owner"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Authorization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Authorization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
