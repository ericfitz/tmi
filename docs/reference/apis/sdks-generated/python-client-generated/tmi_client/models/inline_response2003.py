# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'sub': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'name': 'str',
        'exp': 'int',
        'iat': 'int',
        'iss': 'str'
    }

    attribute_map = {
        'active': 'active',
        'sub': 'sub',
        'email': 'email',
        'email_verified': 'email_verified',
        'name': 'name',
        'exp': 'exp',
        'iat': 'iat',
        'iss': 'iss'
    }

    def __init__(self, active=None, sub=None, email=None, email_verified=None, name=None, exp=None, iat=None, iss=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._sub = None
        self._email = None
        self._email_verified = None
        self._name = None
        self._exp = None
        self._iat = None
        self._iss = None
        self.discriminator = None
        self.active = active
        if sub is not None:
            self.sub = sub
        if email is not None:
            self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if name is not None:
            self.name = name
        if exp is not None:
            self.exp = exp
        if iat is not None:
            self.iat = iat
        if iss is not None:
            self.iss = iss

    @property
    def active(self):
        """Gets the active of this InlineResponse2003.  # noqa: E501

        Whether the token is active/valid  # noqa: E501

        :return: The active of this InlineResponse2003.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse2003.

        Whether the token is active/valid  # noqa: E501

        :param active: The active of this InlineResponse2003.  # noqa: E501
        :type: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def sub(self):
        """Gets the sub of this InlineResponse2003.  # noqa: E501

        Subject (user identifier)  # noqa: E501

        :return: The sub of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this InlineResponse2003.

        Subject (user identifier)  # noqa: E501

        :param sub: The sub of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._sub = sub

    @property
    def email(self):
        """Gets the email of this InlineResponse2003.  # noqa: E501

        User email address  # noqa: E501

        :return: The email of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this InlineResponse2003.

        User email address  # noqa: E501

        :param email: The email of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this InlineResponse2003.  # noqa: E501

        Whether the email is verified  # noqa: E501

        :return: The email_verified of this InlineResponse2003.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this InlineResponse2003.

        Whether the email is verified  # noqa: E501

        :param email_verified: The email_verified of this InlineResponse2003.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def name(self):
        """Gets the name of this InlineResponse2003.  # noqa: E501

        User's full name  # noqa: E501

        :return: The name of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2003.

        User's full name  # noqa: E501

        :param name: The name of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def exp(self):
        """Gets the exp of this InlineResponse2003.  # noqa: E501

        Token expiration time (Unix timestamp)  # noqa: E501

        :return: The exp of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this InlineResponse2003.

        Token expiration time (Unix timestamp)  # noqa: E501

        :param exp: The exp of this InlineResponse2003.  # noqa: E501
        :type: int
        """

        self._exp = exp

    @property
    def iat(self):
        """Gets the iat of this InlineResponse2003.  # noqa: E501

        Token issued at time (Unix timestamp)  # noqa: E501

        :return: The iat of this InlineResponse2003.  # noqa: E501
        :rtype: int
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """Sets the iat of this InlineResponse2003.

        Token issued at time (Unix timestamp)  # noqa: E501

        :param iat: The iat of this InlineResponse2003.  # noqa: E501
        :type: int
        """

        self._iat = iat

    @property
    def iss(self):
        """Gets the iss of this InlineResponse2003.  # noqa: E501

        Token issuer  # noqa: E501

        :return: The iss of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._iss

    @iss.setter
    def iss(self, iss):
        """Sets the iss of this InlineResponse2003.

        Token issuer  # noqa: E501

        :param iss: The iss of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._iss = iss

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
