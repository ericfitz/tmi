# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThreatBase(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'mitigation': 'str',
        'diagram_id': 'str',
        'cell_id': 'str',
        'severity': 'str',
        'score': 'float',
        'priority': 'str',
        'mitigated': 'bool',
        'status': 'str',
        'threat_type': 'str',
        'metadata': 'list[Metadata]',
        'issue_uri': 'str',
        'asset_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'mitigation': 'mitigation',
        'diagram_id': 'diagram_id',
        'cell_id': 'cell_id',
        'severity': 'severity',
        'score': 'score',
        'priority': 'priority',
        'mitigated': 'mitigated',
        'status': 'status',
        'threat_type': 'threat_type',
        'metadata': 'metadata',
        'issue_uri': 'issue_uri',
        'asset_id': 'asset_id'
    }

    def __init__(self, name=None, description=None, mitigation=None, diagram_id=None, cell_id=None, severity=None, score=None, priority=None, mitigated=None, status=None, threat_type=None, metadata=None, issue_uri=None, asset_id=None):  # noqa: E501
        """ThreatBase - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._mitigation = None
        self._diagram_id = None
        self._cell_id = None
        self._severity = None
        self._score = None
        self._priority = None
        self._mitigated = None
        self._status = None
        self._threat_type = None
        self._metadata = None
        self._issue_uri = None
        self._asset_id = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if mitigation is not None:
            self.mitigation = mitigation
        if diagram_id is not None:
            self.diagram_id = diagram_id
        if cell_id is not None:
            self.cell_id = cell_id
        self.severity = severity
        if score is not None:
            self.score = score
        self.priority = priority
        self.mitigated = mitigated
        self.status = status
        self.threat_type = threat_type
        if metadata is not None:
            self.metadata = metadata
        if issue_uri is not None:
            self.issue_uri = issue_uri
        if asset_id is not None:
            self.asset_id = asset_id

    @property
    def name(self):
        """Gets the name of this ThreatBase.  # noqa: E501

        Name of the threat  # noqa: E501

        :return: The name of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThreatBase.

        Name of the threat  # noqa: E501

        :param name: The name of this ThreatBase.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ThreatBase.  # noqa: E501

        Description of the threat and risk to the organization  # noqa: E501

        :return: The description of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThreatBase.

        Description of the threat and risk to the organization  # noqa: E501

        :param description: The description of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def mitigation(self):
        """Gets the mitigation of this ThreatBase.  # noqa: E501

        Recommended or planned mitigation(s) for the threat  # noqa: E501

        :return: The mitigation of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._mitigation

    @mitigation.setter
    def mitigation(self, mitigation):
        """Sets the mitigation of this ThreatBase.

        Recommended or planned mitigation(s) for the threat  # noqa: E501

        :param mitigation: The mitigation of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._mitigation = mitigation

    @property
    def diagram_id(self):
        """Gets the diagram_id of this ThreatBase.  # noqa: E501

        Unique identifier of the associated diagram (if applicable) (UUID)  # noqa: E501

        :return: The diagram_id of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._diagram_id

    @diagram_id.setter
    def diagram_id(self, diagram_id):
        """Sets the diagram_id of this ThreatBase.

        Unique identifier of the associated diagram (if applicable) (UUID)  # noqa: E501

        :param diagram_id: The diagram_id of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._diagram_id = diagram_id

    @property
    def cell_id(self):
        """Gets the cell_id of this ThreatBase.  # noqa: E501

        Unique identifier of the associated cell (if applicable) (UUID)  # noqa: E501

        :return: The cell_id of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id):
        """Sets the cell_id of this ThreatBase.

        Unique identifier of the associated cell (if applicable) (UUID)  # noqa: E501

        :param cell_id: The cell_id of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._cell_id = cell_id

    @property
    def severity(self):
        """Gets the severity of this ThreatBase.  # noqa: E501

        Severity level of the threat  # noqa: E501

        :return: The severity of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this ThreatBase.

        Severity level of the threat  # noqa: E501

        :param severity: The severity of this ThreatBase.  # noqa: E501
        :type: str
        """
        if severity is None:
            raise ValueError("Invalid value for `severity`, must not be `None`")  # noqa: E501
        allowed_values = ["Unknown", "None", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def score(self):
        """Gets the score of this ThreatBase.  # noqa: E501

        Numeric score representing the risk or impact of the threat  # noqa: E501

        :return: The score of this ThreatBase.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ThreatBase.

        Numeric score representing the risk or impact of the threat  # noqa: E501

        :param score: The score of this ThreatBase.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def priority(self):
        """Gets the priority of this ThreatBase.  # noqa: E501

        Priority level for addressing the threat  # noqa: E501

        :return: The priority of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ThreatBase.

        Priority level for addressing the threat  # noqa: E501

        :param priority: The priority of this ThreatBase.  # noqa: E501
        :type: str
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def mitigated(self):
        """Gets the mitigated of this ThreatBase.  # noqa: E501

        Whether the threat has been mitigated  # noqa: E501

        :return: The mitigated of this ThreatBase.  # noqa: E501
        :rtype: bool
        """
        return self._mitigated

    @mitigated.setter
    def mitigated(self, mitigated):
        """Sets the mitigated of this ThreatBase.

        Whether the threat has been mitigated  # noqa: E501

        :param mitigated: The mitigated of this ThreatBase.  # noqa: E501
        :type: bool
        """
        if mitigated is None:
            raise ValueError("Invalid value for `mitigated`, must not be `None`")  # noqa: E501

        self._mitigated = mitigated

    @property
    def status(self):
        """Gets the status of this ThreatBase.  # noqa: E501

        Current status of the threat  # noqa: E501

        :return: The status of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ThreatBase.

        Current status of the threat  # noqa: E501

        :param status: The status of this ThreatBase.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def threat_type(self):
        """Gets the threat_type of this ThreatBase.  # noqa: E501

        Type or category of the threat  # noqa: E501

        :return: The threat_type of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._threat_type

    @threat_type.setter
    def threat_type(self, threat_type):
        """Sets the threat_type of this ThreatBase.

        Type or category of the threat  # noqa: E501

        :param threat_type: The threat_type of this ThreatBase.  # noqa: E501
        :type: str
        """
        if threat_type is None:
            raise ValueError("Invalid value for `threat_type`, must not be `None`")  # noqa: E501

        self._threat_type = threat_type

    @property
    def metadata(self):
        """Gets the metadata of this ThreatBase.  # noqa: E501

        Key-value pairs for additional threat metadata  # noqa: E501

        :return: The metadata of this ThreatBase.  # noqa: E501
        :rtype: list[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ThreatBase.

        Key-value pairs for additional threat metadata  # noqa: E501

        :param metadata: The metadata of this ThreatBase.  # noqa: E501
        :type: list[Metadata]
        """

        self._metadata = metadata

    @property
    def issue_uri(self):
        """Gets the issue_uri of this ThreatBase.  # noqa: E501

        URL to an issue in an issue tracking system for this threat  # noqa: E501

        :return: The issue_uri of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._issue_uri

    @issue_uri.setter
    def issue_uri(self, issue_uri):
        """Sets the issue_uri of this ThreatBase.

        URL to an issue in an issue tracking system for this threat  # noqa: E501

        :param issue_uri: The issue_uri of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._issue_uri = issue_uri

    @property
    def asset_id(self):
        """Gets the asset_id of this ThreatBase.  # noqa: E501

        Unique identifier of the associated asset (if applicable) (UUID)  # noqa: E501

        :return: The asset_id of this ThreatBase.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ThreatBase.

        Unique identifier of the associated asset (if applicable) (UUID)  # noqa: E501

        :param asset_id: The asset_id of this ThreatBase.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThreatBase, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
