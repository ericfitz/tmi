# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from tmi_client.models.threat_model_base import ThreatModelBase  # noqa: F401,E501

class ThreatModel(ThreatModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'datetime',
        'modified_at': 'datetime',
        'created_by': 'str',
        'documents': 'list[Document]',
        'repositories': 'list[Repository]',
        'diagrams': 'list[Diagram]',
        'threats': 'list[Threat]',
        'notes': 'list[Note]',
        'assets': 'list[ExtendedAsset]',
        'status_updated': 'datetime'
    }
    if hasattr(ThreatModelBase, "swagger_types"):
        swagger_types.update(ThreatModelBase.swagger_types)

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'created_by': 'created_by',
        'documents': 'documents',
        'repositories': 'repositories',
        'diagrams': 'diagrams',
        'threats': 'threats',
        'notes': 'notes',
        'assets': 'assets',
        'status_updated': 'status_updated'
    }
    if hasattr(ThreatModelBase, "attribute_map"):
        attribute_map.update(ThreatModelBase.attribute_map)

    def __init__(self, id=None, created_at=None, modified_at=None, created_by=None, documents=None, repositories=None, diagrams=None, threats=None, notes=None, assets=None, status_updated=None, *args, **kwargs):  # noqa: E501
        """ThreatModel - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._modified_at = None
        self._created_by = None
        self._documents = None
        self._repositories = None
        self._diagrams = None
        self._threats = None
        self._notes = None
        self._assets = None
        self._status_updated = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if modified_at is not None:
            self.modified_at = modified_at
        if created_by is not None:
            self.created_by = created_by
        if documents is not None:
            self.documents = documents
        if repositories is not None:
            self.repositories = repositories
        if diagrams is not None:
            self.diagrams = diagrams
        if threats is not None:
            self.threats = threats
        if notes is not None:
            self.notes = notes
        if assets is not None:
            self.assets = assets
        if status_updated is not None:
            self.status_updated = status_updated
        ThreatModelBase.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this ThreatModel.  # noqa: E501

        Unique identifier for the threat model (UUID)  # noqa: E501

        :return: The id of this ThreatModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThreatModel.

        Unique identifier for the threat model (UUID)  # noqa: E501

        :param id: The id of this ThreatModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ThreatModel.  # noqa: E501

        Creation timestamp (RFC3339)  # noqa: E501

        :return: The created_at of this ThreatModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ThreatModel.

        Creation timestamp (RFC3339)  # noqa: E501

        :param created_at: The created_at of this ThreatModel.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """Gets the modified_at of this ThreatModel.  # noqa: E501

        Last modification timestamp (RFC3339)  # noqa: E501

        :return: The modified_at of this ThreatModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ThreatModel.

        Last modification timestamp (RFC3339)  # noqa: E501

        :param modified_at: The modified_at of this ThreatModel.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def created_by(self):
        """Gets the created_by of this ThreatModel.  # noqa: E501

        User name, email or identifier of the creator of the threat model  # noqa: E501

        :return: The created_by of this ThreatModel.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ThreatModel.

        User name, email or identifier of the creator of the threat model  # noqa: E501

        :param created_by: The created_by of this ThreatModel.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def documents(self):
        """Gets the documents of this ThreatModel.  # noqa: E501

        List of documents related to the threat model  # noqa: E501

        :return: The documents of this ThreatModel.  # noqa: E501
        :rtype: list[Document]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ThreatModel.

        List of documents related to the threat model  # noqa: E501

        :param documents: The documents of this ThreatModel.  # noqa: E501
        :type: list[Document]
        """

        self._documents = documents

    @property
    def repositories(self):
        """Gets the repositories of this ThreatModel.  # noqa: E501

        List of source code repositories related to the threat model  # noqa: E501

        :return: The repositories of this ThreatModel.  # noqa: E501
        :rtype: list[Repository]
        """
        return self._repositories

    @repositories.setter
    def repositories(self, repositories):
        """Sets the repositories of this ThreatModel.

        List of source code repositories related to the threat model  # noqa: E501

        :param repositories: The repositories of this ThreatModel.  # noqa: E501
        :type: list[Repository]
        """

        self._repositories = repositories

    @property
    def diagrams(self):
        """Gets the diagrams of this ThreatModel.  # noqa: E501

        List of diagram objects associated with this threat model  # noqa: E501

        :return: The diagrams of this ThreatModel.  # noqa: E501
        :rtype: list[Diagram]
        """
        return self._diagrams

    @diagrams.setter
    def diagrams(self, diagrams):
        """Sets the diagrams of this ThreatModel.

        List of diagram objects associated with this threat model  # noqa: E501

        :param diagrams: The diagrams of this ThreatModel.  # noqa: E501
        :type: list[Diagram]
        """

        self._diagrams = diagrams

    @property
    def threats(self):
        """Gets the threats of this ThreatModel.  # noqa: E501

        List of threats within the threat model  # noqa: E501

        :return: The threats of this ThreatModel.  # noqa: E501
        :rtype: list[Threat]
        """
        return self._threats

    @threats.setter
    def threats(self, threats):
        """Sets the threats of this ThreatModel.

        List of threats within the threat model  # noqa: E501

        :param threats: The threats of this ThreatModel.  # noqa: E501
        :type: list[Threat]
        """

        self._threats = threats

    @property
    def notes(self):
        """Gets the notes of this ThreatModel.  # noqa: E501

        List of notes associated with the threat model  # noqa: E501

        :return: The notes of this ThreatModel.  # noqa: E501
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ThreatModel.

        List of notes associated with the threat model  # noqa: E501

        :param notes: The notes of this ThreatModel.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def assets(self):
        """Gets the assets of this ThreatModel.  # noqa: E501

        List of assets associated with the threat model  # noqa: E501

        :return: The assets of this ThreatModel.  # noqa: E501
        :rtype: list[ExtendedAsset]
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this ThreatModel.

        List of assets associated with the threat model  # noqa: E501

        :param assets: The assets of this ThreatModel.  # noqa: E501
        :type: list[ExtendedAsset]
        """

        self._assets = assets

    @property
    def status_updated(self):
        """Gets the status_updated of this ThreatModel.  # noqa: E501

        Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.  # noqa: E501

        :return: The status_updated of this ThreatModel.  # noqa: E501
        :rtype: datetime
        """
        return self._status_updated

    @status_updated.setter
    def status_updated(self, status_updated):
        """Sets the status_updated of this ThreatModel.

        Timestamp when the status field was last modified (RFC3339). Automatically updated by the server when status changes.  # noqa: E501

        :param status_updated: The status_updated of this ThreatModel.  # noqa: E501
        :type: datetime
        """

        self._status_updated = status_updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThreatModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
