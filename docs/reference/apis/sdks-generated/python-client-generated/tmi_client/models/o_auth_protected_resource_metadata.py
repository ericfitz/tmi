# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OAuthProtectedResourceMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'str',
        'scopes_supported': 'list[str]',
        'authorization_servers': 'list[str]',
        'jwks_url': 'str',
        'bearer_methods_supported': 'list[str]',
        'resource_name': 'str',
        'resource_documentation': 'str',
        'tls_client_certificate_bound_access_tokens': 'bool'
    }

    attribute_map = {
        'resource': 'resource',
        'scopes_supported': 'scopes_supported',
        'authorization_servers': 'authorization_servers',
        'jwks_url': 'jwks_url',
        'bearer_methods_supported': 'bearer_methods_supported',
        'resource_name': 'resource_name',
        'resource_documentation': 'resource_documentation',
        'tls_client_certificate_bound_access_tokens': 'tls_client_certificate_bound_access_tokens'
    }

    def __init__(self, resource=None, scopes_supported=None, authorization_servers=None, jwks_url=None, bearer_methods_supported=None, resource_name=None, resource_documentation=None, tls_client_certificate_bound_access_tokens=None):  # noqa: E501
        """OAuthProtectedResourceMetadata - a model defined in Swagger"""  # noqa: E501
        self._resource = None
        self._scopes_supported = None
        self._authorization_servers = None
        self._jwks_url = None
        self._bearer_methods_supported = None
        self._resource_name = None
        self._resource_documentation = None
        self._tls_client_certificate_bound_access_tokens = None
        self.discriminator = None
        self.resource = resource
        if scopes_supported is not None:
            self.scopes_supported = scopes_supported
        if authorization_servers is not None:
            self.authorization_servers = authorization_servers
        if jwks_url is not None:
            self.jwks_url = jwks_url
        if bearer_methods_supported is not None:
            self.bearer_methods_supported = bearer_methods_supported
        if resource_name is not None:
            self.resource_name = resource_name
        if resource_documentation is not None:
            self.resource_documentation = resource_documentation
        if tls_client_certificate_bound_access_tokens is not None:
            self.tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens

    @property
    def resource(self):
        """Gets the resource of this OAuthProtectedResourceMetadata.  # noqa: E501

        The protected resource's resource identifier URL  # noqa: E501

        :return: The resource of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this OAuthProtectedResourceMetadata.

        The protected resource's resource identifier URL  # noqa: E501

        :param resource: The resource of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501

        self._resource = resource

    @property
    def scopes_supported(self):
        """Gets the scopes_supported of this OAuthProtectedResourceMetadata.  # noqa: E501

        JSON array of OAuth scope values supported by this protected resource  # noqa: E501

        :return: The scopes_supported of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_supported

    @scopes_supported.setter
    def scopes_supported(self, scopes_supported):
        """Sets the scopes_supported of this OAuthProtectedResourceMetadata.

        JSON array of OAuth scope values supported by this protected resource  # noqa: E501

        :param scopes_supported: The scopes_supported of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: list[str]
        """

        self._scopes_supported = scopes_supported

    @property
    def authorization_servers(self):
        """Gets the authorization_servers of this OAuthProtectedResourceMetadata.  # noqa: E501

        List of authorization server issuer identifiers that can issue tokens for this resource  # noqa: E501

        :return: The authorization_servers of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorization_servers

    @authorization_servers.setter
    def authorization_servers(self, authorization_servers):
        """Sets the authorization_servers of this OAuthProtectedResourceMetadata.

        List of authorization server issuer identifiers that can issue tokens for this resource  # noqa: E501

        :param authorization_servers: The authorization_servers of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: list[str]
        """

        self._authorization_servers = authorization_servers

    @property
    def jwks_url(self):
        """Gets the jwks_url of this OAuthProtectedResourceMetadata.  # noqa: E501

        URL of the protected resource's JSON Web Key Set  # noqa: E501

        :return: The jwks_url of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._jwks_url

    @jwks_url.setter
    def jwks_url(self, jwks_url):
        """Sets the jwks_url of this OAuthProtectedResourceMetadata.

        URL of the protected resource's JSON Web Key Set  # noqa: E501

        :param jwks_url: The jwks_url of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: str
        """

        self._jwks_url = jwks_url

    @property
    def bearer_methods_supported(self):
        """Gets the bearer_methods_supported of this OAuthProtectedResourceMetadata.  # noqa: E501

        Supported token presentation methods for bearer tokens  # noqa: E501

        :return: The bearer_methods_supported of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._bearer_methods_supported

    @bearer_methods_supported.setter
    def bearer_methods_supported(self, bearer_methods_supported):
        """Sets the bearer_methods_supported of this OAuthProtectedResourceMetadata.

        Supported token presentation methods for bearer tokens  # noqa: E501

        :param bearer_methods_supported: The bearer_methods_supported of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: list[str]
        """

        self._bearer_methods_supported = bearer_methods_supported

    @property
    def resource_name(self):
        """Gets the resource_name of this OAuthProtectedResourceMetadata.  # noqa: E501

        Human-readable name of the protected resource  # noqa: E501

        :return: The resource_name of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this OAuthProtectedResourceMetadata.

        Human-readable name of the protected resource  # noqa: E501

        :param resource_name: The resource_name of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def resource_documentation(self):
        """Gets the resource_documentation of this OAuthProtectedResourceMetadata.  # noqa: E501

        URL with information for developers on how to use this protected resource  # noqa: E501

        :return: The resource_documentation of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resource_documentation

    @resource_documentation.setter
    def resource_documentation(self, resource_documentation):
        """Sets the resource_documentation of this OAuthProtectedResourceMetadata.

        URL with information for developers on how to use this protected resource  # noqa: E501

        :param resource_documentation: The resource_documentation of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: str
        """

        self._resource_documentation = resource_documentation

    @property
    def tls_client_certificate_bound_access_tokens(self):
        """Gets the tls_client_certificate_bound_access_tokens of this OAuthProtectedResourceMetadata.  # noqa: E501

        Whether the protected resource supports TLS client certificate bound access tokens  # noqa: E501

        :return: The tls_client_certificate_bound_access_tokens of this OAuthProtectedResourceMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._tls_client_certificate_bound_access_tokens

    @tls_client_certificate_bound_access_tokens.setter
    def tls_client_certificate_bound_access_tokens(self, tls_client_certificate_bound_access_tokens):
        """Sets the tls_client_certificate_bound_access_tokens of this OAuthProtectedResourceMetadata.

        Whether the protected resource supports TLS client certificate bound access tokens  # noqa: E501

        :param tls_client_certificate_bound_access_tokens: The tls_client_certificate_bound_access_tokens of this OAuthProtectedResourceMetadata.  # noqa: E501
        :type: bool
        """

        self._tls_client_certificate_bound_access_tokens = tls_client_certificate_bound_access_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OAuthProtectedResourceMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuthProtectedResourceMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
