# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollaborationSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'session_id': 'str',
        'host': 'str',
        'presenter': 'str',
        'threat_model_id': 'str',
        'threat_model_name': 'str',
        'diagram_id': 'str',
        'diagram_name': 'str',
        'participants': 'list[Participant]',
        'websocket_url': 'str'
    }

    attribute_map = {
        'session_id': 'session_id',
        'host': 'host',
        'presenter': 'presenter',
        'threat_model_id': 'threat_model_id',
        'threat_model_name': 'threat_model_name',
        'diagram_id': 'diagram_id',
        'diagram_name': 'diagram_name',
        'participants': 'participants',
        'websocket_url': 'websocket_url'
    }

    def __init__(self, session_id=None, host=None, presenter=None, threat_model_id=None, threat_model_name=None, diagram_id=None, diagram_name=None, participants=None, websocket_url=None):  # noqa: E501
        """CollaborationSession - a model defined in Swagger"""  # noqa: E501
        self._session_id = None
        self._host = None
        self._presenter = None
        self._threat_model_id = None
        self._threat_model_name = None
        self._diagram_id = None
        self._diagram_name = None
        self._participants = None
        self._websocket_url = None
        self.discriminator = None
        self.session_id = session_id
        self.host = host
        if presenter is not None:
            self.presenter = presenter
        self.threat_model_id = threat_model_id
        self.threat_model_name = threat_model_name
        self.diagram_id = diagram_id
        self.diagram_name = diagram_name
        self.participants = participants
        self.websocket_url = websocket_url

    @property
    def session_id(self):
        """Gets the session_id of this CollaborationSession.  # noqa: E501

        Unique identifier for the session (UUID)  # noqa: E501

        :return: The session_id of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this CollaborationSession.

        Unique identifier for the session (UUID)  # noqa: E501

        :param session_id: The session_id of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if session_id is None:
            raise ValueError("Invalid value for `session_id`, must not be `None`")  # noqa: E501

        self._session_id = session_id

    @property
    def host(self):
        """Gets the host of this CollaborationSession.  # noqa: E501

        Email address of the session host  # noqa: E501

        :return: The host of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CollaborationSession.

        Email address of the session host  # noqa: E501

        :param host: The host of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")  # noqa: E501

        self._host = host

    @property
    def presenter(self):
        """Gets the presenter of this CollaborationSession.  # noqa: E501

        Email address of the current presenter  # noqa: E501

        :return: The presenter of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._presenter

    @presenter.setter
    def presenter(self, presenter):
        """Sets the presenter of this CollaborationSession.

        Email address of the current presenter  # noqa: E501

        :param presenter: The presenter of this CollaborationSession.  # noqa: E501
        :type: str
        """

        self._presenter = presenter

    @property
    def threat_model_id(self):
        """Gets the threat_model_id of this CollaborationSession.  # noqa: E501

        Unique identifier of the associated threat model (UUID)  # noqa: E501

        :return: The threat_model_id of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._threat_model_id

    @threat_model_id.setter
    def threat_model_id(self, threat_model_id):
        """Sets the threat_model_id of this CollaborationSession.

        Unique identifier of the associated threat model (UUID)  # noqa: E501

        :param threat_model_id: The threat_model_id of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if threat_model_id is None:
            raise ValueError("Invalid value for `threat_model_id`, must not be `None`")  # noqa: E501

        self._threat_model_id = threat_model_id

    @property
    def threat_model_name(self):
        """Gets the threat_model_name of this CollaborationSession.  # noqa: E501

        Name of the associated threat model  # noqa: E501

        :return: The threat_model_name of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._threat_model_name

    @threat_model_name.setter
    def threat_model_name(self, threat_model_name):
        """Sets the threat_model_name of this CollaborationSession.

        Name of the associated threat model  # noqa: E501

        :param threat_model_name: The threat_model_name of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if threat_model_name is None:
            raise ValueError("Invalid value for `threat_model_name`, must not be `None`")  # noqa: E501

        self._threat_model_name = threat_model_name

    @property
    def diagram_id(self):
        """Gets the diagram_id of this CollaborationSession.  # noqa: E501

        Unique identifier of the associated diagram (UUID)  # noqa: E501

        :return: The diagram_id of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._diagram_id

    @diagram_id.setter
    def diagram_id(self, diagram_id):
        """Sets the diagram_id of this CollaborationSession.

        Unique identifier of the associated diagram (UUID)  # noqa: E501

        :param diagram_id: The diagram_id of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if diagram_id is None:
            raise ValueError("Invalid value for `diagram_id`, must not be `None`")  # noqa: E501

        self._diagram_id = diagram_id

    @property
    def diagram_name(self):
        """Gets the diagram_name of this CollaborationSession.  # noqa: E501

        Name of the associated diagram  # noqa: E501

        :return: The diagram_name of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._diagram_name

    @diagram_name.setter
    def diagram_name(self, diagram_name):
        """Sets the diagram_name of this CollaborationSession.

        Name of the associated diagram  # noqa: E501

        :param diagram_name: The diagram_name of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if diagram_name is None:
            raise ValueError("Invalid value for `diagram_name`, must not be `None`")  # noqa: E501

        self._diagram_name = diagram_name

    @property
    def participants(self):
        """Gets the participants of this CollaborationSession.  # noqa: E501

        List of active participants  # noqa: E501

        :return: The participants of this CollaborationSession.  # noqa: E501
        :rtype: list[Participant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this CollaborationSession.

        List of active participants  # noqa: E501

        :param participants: The participants of this CollaborationSession.  # noqa: E501
        :type: list[Participant]
        """
        if participants is None:
            raise ValueError("Invalid value for `participants`, must not be `None`")  # noqa: E501

        self._participants = participants

    @property
    def websocket_url(self):
        """Gets the websocket_url of this CollaborationSession.  # noqa: E501

        WebSocket URL for real-time updates  # noqa: E501

        :return: The websocket_url of this CollaborationSession.  # noqa: E501
        :rtype: str
        """
        return self._websocket_url

    @websocket_url.setter
    def websocket_url(self, websocket_url):
        """Sets the websocket_url of this CollaborationSession.

        WebSocket URL for real-time updates  # noqa: E501

        :param websocket_url: The websocket_url of this CollaborationSession.  # noqa: E501
        :type: str
        """
        if websocket_url is None:
            raise ValueError("Invalid value for `websocket_url`, must not be `None`")  # noqa: E501

        self._websocket_url = websocket_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollaborationSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollaborationSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
