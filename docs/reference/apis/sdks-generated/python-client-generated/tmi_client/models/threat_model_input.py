# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ThreatModelInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'threat_model_framework': 'str',
        'authorization': 'list[Authorization]',
        'metadata': 'list[Metadata]',
        'issue_uri': 'str'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'threat_model_framework': 'threat_model_framework',
        'authorization': 'authorization',
        'metadata': 'metadata',
        'issue_uri': 'issue_uri'
    }

    def __init__(self, name=None, description=None, threat_model_framework=None, authorization=None, metadata=None, issue_uri=None):  # noqa: E501
        """ThreatModelInput - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._threat_model_framework = None
        self._authorization = None
        self._metadata = None
        self._issue_uri = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if threat_model_framework is not None:
            self.threat_model_framework = threat_model_framework
        if authorization is not None:
            self.authorization = authorization
        if metadata is not None:
            self.metadata = metadata
        if issue_uri is not None:
            self.issue_uri = issue_uri

    @property
    def name(self):
        """Gets the name of this ThreatModelInput.  # noqa: E501

        Name of the threat model  # noqa: E501

        :return: The name of this ThreatModelInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThreatModelInput.

        Name of the threat model  # noqa: E501

        :param name: The name of this ThreatModelInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ThreatModelInput.  # noqa: E501

        Description of the threat model and its purpose  # noqa: E501

        :return: The description of this ThreatModelInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThreatModelInput.

        Description of the threat model and its purpose  # noqa: E501

        :param description: The description of this ThreatModelInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def threat_model_framework(self):
        """Gets the threat_model_framework of this ThreatModelInput.  # noqa: E501

        The framework used for this threat model  # noqa: E501

        :return: The threat_model_framework of this ThreatModelInput.  # noqa: E501
        :rtype: str
        """
        return self._threat_model_framework

    @threat_model_framework.setter
    def threat_model_framework(self, threat_model_framework):
        """Sets the threat_model_framework of this ThreatModelInput.

        The framework used for this threat model  # noqa: E501

        :param threat_model_framework: The threat_model_framework of this ThreatModelInput.  # noqa: E501
        :type: str
        """

        self._threat_model_framework = threat_model_framework

    @property
    def authorization(self):
        """Gets the authorization of this ThreatModelInput.  # noqa: E501

        List of users and their roles for this threat model  # noqa: E501

        :return: The authorization of this ThreatModelInput.  # noqa: E501
        :rtype: list[Authorization]
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this ThreatModelInput.

        List of users and their roles for this threat model  # noqa: E501

        :param authorization: The authorization of this ThreatModelInput.  # noqa: E501
        :type: list[Authorization]
        """

        self._authorization = authorization

    @property
    def metadata(self):
        """Gets the metadata of this ThreatModelInput.  # noqa: E501

        Key-value pairs for additional threat model metadata  # noqa: E501

        :return: The metadata of this ThreatModelInput.  # noqa: E501
        :rtype: list[Metadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ThreatModelInput.

        Key-value pairs for additional threat model metadata  # noqa: E501

        :param metadata: The metadata of this ThreatModelInput.  # noqa: E501
        :type: list[Metadata]
        """

        self._metadata = metadata

    @property
    def issue_uri(self):
        """Gets the issue_uri of this ThreatModelInput.  # noqa: E501

        URL to an issue in an issue tracking system for this threat model  # noqa: E501

        :return: The issue_uri of this ThreatModelInput.  # noqa: E501
        :rtype: str
        """
        return self._issue_uri

    @issue_uri.setter
    def issue_uri(self, issue_uri):
        """Sets the issue_uri of this ThreatModelInput.

        URL to an issue in an issue tracking system for this threat model  # noqa: E501

        :param issue_uri: The issue_uri of this ThreatModelInput.  # noqa: E501
        :type: str
        """

        self._issue_uri = issue_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ThreatModelInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatModelInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
