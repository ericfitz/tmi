# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from tmi_client.models.cell import Cell  # noqa: F401,E501

class Edge(Cell):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'shape': 'str',
        'source': 'object',
        'target': 'object',
        'attrs': 'object',
        'labels': 'list[EdgeLabel]',
        'vertices': 'list[Point]',
        'router': 'object',
        'connector': 'object',
        'default_label': 'object'
    }
    if hasattr(Cell, "swagger_types"):
        swagger_types.update(Cell.swagger_types)

    attribute_map = {
        'shape': 'shape',
        'source': 'source',
        'target': 'target',
        'attrs': 'attrs',
        'labels': 'labels',
        'vertices': 'vertices',
        'router': 'router',
        'connector': 'connector',
        'default_label': 'defaultLabel'
    }
    if hasattr(Cell, "attribute_map"):
        attribute_map.update(Cell.attribute_map)

    def __init__(self, shape=None, source=None, target=None, attrs=None, labels=None, vertices=None, router=None, connector=None, default_label=None, *args, **kwargs):  # noqa: E501
        """Edge - a model defined in Swagger"""  # noqa: E501
        self._shape = None
        self._source = None
        self._target = None
        self._attrs = None
        self._labels = None
        self._vertices = None
        self._router = None
        self._connector = None
        self._default_label = None
        self.discriminator = None
        if shape is not None:
            self.shape = shape
        self.source = source
        self.target = target
        if attrs is not None:
            self.attrs = attrs
        if labels is not None:
            self.labels = labels
        if vertices is not None:
            self.vertices = vertices
        if router is not None:
            self.router = router
        if connector is not None:
            self.connector = connector
        if default_label is not None:
            self.default_label = default_label
        Cell.__init__(self, *args, **kwargs)

    @property
    def shape(self):
        """Gets the shape of this Edge.  # noqa: E501

        Edge type identifier  # noqa: E501

        :return: The shape of this Edge.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this Edge.

        Edge type identifier  # noqa: E501

        :param shape: The shape of this Edge.  # noqa: E501
        :type: str
        """
        allowed_values = ["edge"]  # noqa: E501
        if shape not in allowed_values:
            raise ValueError(
                "Invalid value for `shape` ({0}), must be one of {1}"  # noqa: E501
                .format(shape, allowed_values)
            )

        self._shape = shape

    @property
    def source(self):
        """Gets the source of this Edge.  # noqa: E501

        Source connection point  # noqa: E501

        :return: The source of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Edge.

        Source connection point  # noqa: E501

        :param source: The source of this Edge.  # noqa: E501
        :type: object
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def target(self):
        """Gets the target of this Edge.  # noqa: E501

        Target connection point  # noqa: E501

        :return: The target of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Edge.

        Target connection point  # noqa: E501

        :param target: The target of this Edge.  # noqa: E501
        :type: object
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")  # noqa: E501

        self._target = target

    @property
    def attrs(self):
        """Gets the attrs of this Edge.  # noqa: E501

        Visual styling attributes for the edge  # noqa: E501

        :return: The attrs of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this Edge.

        Visual styling attributes for the edge  # noqa: E501

        :param attrs: The attrs of this Edge.  # noqa: E501
        :type: object
        """

        self._attrs = attrs

    @property
    def labels(self):
        """Gets the labels of this Edge.  # noqa: E501

        Text labels positioned along the edge  # noqa: E501

        :return: The labels of this Edge.  # noqa: E501
        :rtype: list[EdgeLabel]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Edge.

        Text labels positioned along the edge  # noqa: E501

        :param labels: The labels of this Edge.  # noqa: E501
        :type: list[EdgeLabel]
        """

        self._labels = labels

    @property
    def vertices(self):
        """Gets the vertices of this Edge.  # noqa: E501

        Intermediate waypoints for edge routing  # noqa: E501

        :return: The vertices of this Edge.  # noqa: E501
        :rtype: list[Point]
        """
        return self._vertices

    @vertices.setter
    def vertices(self, vertices):
        """Sets the vertices of this Edge.

        Intermediate waypoints for edge routing  # noqa: E501

        :param vertices: The vertices of this Edge.  # noqa: E501
        :type: list[Point]
        """

        self._vertices = vertices

    @property
    def router(self):
        """Gets the router of this Edge.  # noqa: E501

        Edge routing algorithm configuration for path calculation  # noqa: E501

        :return: The router of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._router

    @router.setter
    def router(self, router):
        """Sets the router of this Edge.

        Edge routing algorithm configuration for path calculation  # noqa: E501

        :param router: The router of this Edge.  # noqa: E501
        :type: object
        """

        self._router = router

    @property
    def connector(self):
        """Gets the connector of this Edge.  # noqa: E501

        Edge connector style configuration for visual appearance  # noqa: E501

        :return: The connector of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._connector

    @connector.setter
    def connector(self, connector):
        """Sets the connector of this Edge.

        Edge connector style configuration for visual appearance  # noqa: E501

        :param connector: The connector of this Edge.  # noqa: E501
        :type: object
        """

        self._connector = connector

    @property
    def default_label(self):
        """Gets the default_label of this Edge.  # noqa: E501

        Default label configuration applied to edges without explicit labels  # noqa: E501

        :return: The default_label of this Edge.  # noqa: E501
        :rtype: object
        """
        return self._default_label

    @default_label.setter
    def default_label(self, default_label):
        """Sets the default_label of this Edge.

        Default label configuration applied to edges without explicit labels  # noqa: E501

        :param default_label: The default_label of this Edge.  # noqa: E501
        :type: object
        """

        self._default_label = default_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Edge, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Edge):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
