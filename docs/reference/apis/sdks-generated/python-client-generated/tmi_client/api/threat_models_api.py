# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tmi_client.api_client import ApiClient


class ThreatModelsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_threat_model(self, body, **kwargs):  # noqa: E501
        """Create a threat model  # noqa: E501

        Creates a new threat model with the authenticated user as owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threat_model(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatModelInput body: (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_threat_model_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_threat_model_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_threat_model_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a threat model  # noqa: E501

        Creates a new threat model with the authenticated user as owner  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_threat_model_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatModelInput body: (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_threat_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_threat_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreatModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_threat_model(self, threat_model_id, **kwargs):  # noqa: E501
        """Delete a threat model  # noqa: E501

        Deletes a threat model; restricted to owner role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threat_model(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to delete (UUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
            return data

    def delete_threat_model_with_http_info(self, threat_model_id, **kwargs):  # noqa: E501
        """Delete a threat model  # noqa: E501

        Deletes a threat model; restricted to owner role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_threat_model_with_http_info(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to delete (UUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_threat_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `delete_threat_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_threat_model(self, threat_model_id, **kwargs):  # noqa: E501
        """Retrieve a threat model  # noqa: E501

        Retrieves the full details of a specific threat model if the user has access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threat_model(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to retrieve (UUID) (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
            return data

    def get_threat_model_with_http_info(self, threat_model_id, **kwargs):  # noqa: E501
        """Retrieve a threat model  # noqa: E501

        Retrieves the full details of a specific threat model if the user has access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_threat_model_with_http_info(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to retrieve (UUID) (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_threat_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `get_threat_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreatModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_threat_models(self, **kwargs):  # noqa: E501
        """List threat models  # noqa: E501

        Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_threat_models(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of threat models to return
        :param int offset: Pagination offset
        :param str owner: Filter by owner name or email
        :param str name: Filter by threat model name (partial match)
        :param str description: Filter by threat model description (partial match)
        :param str issue_uri: Filter by issue URI (partial match)
        :param datetime created_after: Filter threat models created after this date (RFC3339 format)
        :param datetime created_before: Filter threat models created before this date (RFC3339 format)
        :param datetime modified_after: Filter threat models modified after this date (RFC3339 format)
        :param datetime modified_before: Filter threat models modified before this date (RFC3339 format)
        :param str status: Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values.
        :param datetime status_updated_after: Filter threat models where status was updated after this timestamp (RFC3339)
        :param datetime status_updated_before: Filter threat models where status was updated before this timestamp (RFC3339)
        :return: list[TMListItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_threat_models_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_threat_models_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_threat_models_with_http_info(self, **kwargs):  # noqa: E501
        """List threat models  # noqa: E501

        Returns a list of threat models accessible to the authenticated user with enhanced metadata and entity counts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_threat_models_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of threat models to return
        :param int offset: Pagination offset
        :param str owner: Filter by owner name or email
        :param str name: Filter by threat model name (partial match)
        :param str description: Filter by threat model description (partial match)
        :param str issue_uri: Filter by issue URI (partial match)
        :param datetime created_after: Filter threat models created after this date (RFC3339 format)
        :param datetime created_before: Filter threat models created before this date (RFC3339 format)
        :param datetime modified_after: Filter threat models modified after this date (RFC3339 format)
        :param datetime modified_before: Filter threat models modified before this date (RFC3339 format)
        :param str status: Filter by status value (exact match). To filter by multiple statuses, use multiple status parameters or comma-separated values.
        :param datetime status_updated_after: Filter threat models where status was updated after this timestamp (RFC3339)
        :param datetime status_updated_before: Filter threat models where status was updated before this timestamp (RFC3339)
        :return: list[TMListItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'owner', 'name', 'description', 'issue_uri', 'created_after', 'created_before', 'modified_after', 'modified_before', 'status', 'status_updated_after', 'status_updated_before']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_threat_models" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'issue_uri' in params:
            query_params.append(('issue_uri', params['issue_uri']))  # noqa: E501
        if 'created_after' in params:
            query_params.append(('created_after', params['created_after']))  # noqa: E501
        if 'created_before' in params:
            query_params.append(('created_before', params['created_before']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modified_after', params['modified_after']))  # noqa: E501
        if 'modified_before' in params:
            query_params.append(('modified_before', params['modified_before']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'status_updated_after' in params:
            query_params.append(('status_updated_after', params['status_updated_after']))  # noqa: E501
        if 'status_updated_before' in params:
            query_params.append(('status_updated_before', params['status_updated_before']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TMListItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_threat_model(self, threat_model_id, **kwargs):  # noqa: E501
        """Partially update a threat model  # noqa: E501

        Applies JSON Patch operations to a threat model; restricted to writer/owner roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_threat_model(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to update (UUID) (required)
        :param list[ThreatModelsThreatModelIdBody] body:
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.patch_threat_model_with_http_info(threat_model_id, **kwargs)  # noqa: E501
            return data

    def patch_threat_model_with_http_info(self, threat_model_id, **kwargs):  # noqa: E501
        """Partially update a threat model  # noqa: E501

        Applies JSON Patch operations to a threat model; restricted to writer/owner roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_threat_model_with_http_info(threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model to update (UUID) (required)
        :param list[ThreatModelsThreatModelIdBody] body:
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_threat_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `patch_threat_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreatModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_threat_model(self, body, threat_model_id, **kwargs):  # noqa: E501
        """Update a threat model  # noqa: E501

        Fully updates a threat model; restricted to writer/owner roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threat_model(body, threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatModelInput body: (required)
        :param str threat_model_id: Unique identifier of the threat model to update (UUID) (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_threat_model_with_http_info(body, threat_model_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_threat_model_with_http_info(body, threat_model_id, **kwargs)  # noqa: E501
            return data

    def update_threat_model_with_http_info(self, body, threat_model_id, **kwargs):  # noqa: E501
        """Update a threat model  # noqa: E501

        Fully updates a threat model; restricted to writer/owner roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_threat_model_with_http_info(body, threat_model_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ThreatModelInput body: (required)
        :param str threat_model_id: Unique identifier of the threat model to update (UUID) (required)
        :return: ThreatModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'threat_model_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_threat_model" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_threat_model`")  # noqa: E501
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `update_threat_model`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThreatModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
