# coding: utf-8

"""
    TMI (Threat Modeling Improved) API

    A RESTful API for collaborative threat modeling with full X6 graph library compatibility. This API provides schemas that align with AntV X6 cell object models for seamless integration with modern diagramming libraries. Supports OAuth 2.0 authentication with client callback integration for seamless single-page application authentication flows.  ## API Design v1.0.0  ### Authorization Model TMI uses hierarchical authorization: access control is defined at the ThreatModel level via the authorization field (readers, writers, owners). All child resources (Assets, Diagrams, Documents, Notes, Repositories, Threats) inherit permissions from their parent ThreatModel. This simplifies permission management and ensures consistent access control.  ### Bulk Operations Notes and Diagrams do not support bulk operations due to their unique creation workflows and lack of valid bulk use cases. All other resources (Threats, Assets, Documents, Repositories) support full bulk operations: POST (create), PUT (upsert), PATCH (partial update), DELETE (batch delete).  All resources support bulk metadata operations regardless of resource-level bulk support.  ### List Response Strategy - ThreatModels return summary information (TMListItem) because they contain many child objects that can be large. - Diagrams return summary information (DiagramListItem) because diagram data (cells, images) can be large. - Notes return summary information (NoteListItem) because the content field can be large. - Threats, Assets, Documents, Repositories return full schemas as they are relatively small and static.  ### PATCH Support All resources support PATCH for partial updates using JSON Patch (RFC 6902). This is particularly useful for: - Assets: Array field updates (affected_assets, trust_boundaries) ensuring no duplicates - Notes: Updating name/description without changing content field - All resources: Efficient updates without full object replacement   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tmi_client.api_client import ApiClient


class CollaborationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_diagram_collaboration_session(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """Create diagram collaboration session  # noqa: E501

        Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_diagram_collaboration_session(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: CollaborationSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
            return data

    def create_diagram_collaboration_session_with_http_info(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """Create diagram collaboration session  # noqa: E501

        Creates a new collaboration session for real-time diagram editing. Only one collaboration session can exist per diagram at a time. If a session already exists, returns 409 with a link to join the existing session.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: CollaborationSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id', 'diagram_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_diagram_collaboration_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `create_diagram_collaboration_session`")  # noqa: E501
        # verify the required parameter 'diagram_id' is set
        if ('diagram_id' not in params or
                params['diagram_id'] is None):
            raise ValueError("Missing the required parameter `diagram_id` when calling `create_diagram_collaboration_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501
        if 'diagram_id' in params:
            path_params['diagram_id'] = params['diagram_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollaborationSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def end_diagram_collaboration_session(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """End diagram collaboration session  # noqa: E501

        Terminates the active collaboration session for a diagram  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_diagram_collaboration_session(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.end_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
        else:
            (data) = self.end_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
            return data

    def end_diagram_collaboration_session_with_http_info(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """End diagram collaboration session  # noqa: E501

        Terminates the active collaboration session for a diagram  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.end_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id', 'diagram_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method end_diagram_collaboration_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `end_diagram_collaboration_session`")  # noqa: E501
        # verify the required parameter 'diagram_id' is set
        if ('diagram_id' not in params or
                params['diagram_id'] is None):
            raise ValueError("Missing the required parameter `diagram_id` when calling `end_diagram_collaboration_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501
        if 'diagram_id' in params:
            path_params['diagram_id'] = params['diagram_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_collaboration_sessions(self, **kwargs):  # noqa: E501
        """List active collaboration sessions  # noqa: E501

        Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collaboration_sessions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CollaborationSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_collaboration_sessions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_collaboration_sessions_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_collaboration_sessions_with_http_info(self, **kwargs):  # noqa: E501
        """List active collaboration sessions  # noqa: E501

        Returns all currently active collaboration sessions for diagrams. Clients can use this endpoint to discover existing sessions before connecting via WebSocket.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_collaboration_sessions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[CollaborationSession]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collaboration_sessions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/collaboration/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CollaborationSession]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_diagram_collaboration_session(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """Get diagram collaboration session  # noqa: E501

        Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_diagram_collaboration_session(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: CollaborationSession
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, **kwargs)  # noqa: E501
            return data

    def get_diagram_collaboration_session_with_http_info(self, threat_model_id, diagram_id, **kwargs):  # noqa: E501
        """Get diagram collaboration session  # noqa: E501

        Retrieves the current collaboration session details for a diagram. The session payload indicates who has been authorized to the session, not who is currently active in the WebSocket session. The 200 status indicates successful retrieval - clients must NOT evaluate the payload to determine session status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_diagram_collaboration_session_with_http_info(threat_model_id, diagram_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str threat_model_id: Unique identifier of the threat model (UUID) (required)
        :param str diagram_id: Unique identifier of the diagram (UUID) (required)
        :return: CollaborationSession
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['threat_model_id', 'diagram_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_diagram_collaboration_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'threat_model_id' is set
        if ('threat_model_id' not in params or
                params['threat_model_id'] is None):
            raise ValueError("Missing the required parameter `threat_model_id` when calling `get_diagram_collaboration_session`")  # noqa: E501
        # verify the required parameter 'diagram_id' is set
        if ('diagram_id' not in params or
                params['diagram_id'] is None):
            raise ValueError("Missing the required parameter `diagram_id` when calling `get_diagram_collaboration_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'threat_model_id' in params:
            path_params['threat_model_id'] = params['threat_model_id']  # noqa: E501
        if 'diagram_id' in params:
            path_params['diagram_id'] = params['diagram_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/threat_models/{threat_model_id}/diagrams/{diagram_id}/collaborate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollaborationSession',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
