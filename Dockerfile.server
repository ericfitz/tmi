# Multi-stage distroless TMI application build
# Stage 1: Build environment
FROM golang:1.25.1 AS builder

# Metadata for tracking
LABEL security.scan-date="AUTO_GENERATED"
LABEL security.patch-level="high-critical"
LABEL maintainer="TMI Security Team"

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies with security verification
RUN go mod download && \
    go mod verify

# Copy source code
COPY . .

# Build the application with security flags (CGO disabled for static binary)
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags "-s -w -X github.com/ericfitz/tmi/api.VersionMajor=0 -X github.com/ericfitz/tmi/api.VersionMinor=9 -X github.com/ericfitz/tmi/api.VersionPatch=0 -X github.com/ericfitz/tmi/api.GitCommit=$(git rev-parse --short HEAD 2>/dev/null || echo 'development') -X github.com/ericfitz/tmi/api.BuildDate=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
    -trimpath \
    -buildmode=exe \
    -o server \
    ./cmd/server

# Stage 2: Distroless runtime
FROM gcr.io/distroless/static-debian12:latest

# Metadata for tracking security patches
LABEL security.distroless="true"
LABEL security.scan-date="AUTO_GENERATED"
LABEL security.patch-level="minimal-attack-surface"
LABEL maintainer="TMI Security Team"
LABEL org.opencontainers.image.title="TMI Server Distroless"
LABEL org.opencontainers.image.description="TMI Server on distroless base"
LABEL org.opencontainers.image.name="tmi/tmi-server"

# Copy binary from builder
COPY --from=builder /app/server /server

# Copy any required static files (migrations, etc.)
COPY --from=builder /app/auth/migrations /auth/migrations

# Set working directory
WORKDIR /

# Expose port 8080
EXPOSE 8080

# Set secure environment variables
ENV ENV=development
ENV LOG_LEVEL=info
ENV SERVER_PORT=8080
ENV SERVER_INTERFACE=0.0.0.0
ENV GOLANG_PROTOBUF_REGISTRATION_CONFLICT=warn

# Note: Distroless doesn't support HEALTHCHECK with curl
# Health checks should be done externally via Kubernetes/Docker probes

# Run as non-root user (distroless runs as nonroot by default)
USER nonroot:nonroot

# Run the application
ENTRYPOINT ["/server"]