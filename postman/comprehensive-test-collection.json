{
  "info": {
    "_postman_id": "tmi-comprehensive-api-tests",
    "name": "TMI API - Comprehensive Test Suite",
    "description": "Complete test coverage for TMI threat modeling API including all status codes, multi-user scenarios, data validation, and edge cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Load TMITestDataFactory from external file",
          "if (!pm.globals.get('TMITestDataFactory')) {",
          "    const factoryCode = `",
          "/**",
          " * TMI API Test Data Factory",
          " * Generates valid and invalid test data for comprehensive API testing",
          " */",
          "class TMITestDataFactory {",
          "    constructor() {",
          "        this.timestamp = new Date().toISOString();",
          "        this.testRunId = Date.now();",
          "    }",
          "    ",
          "    generateUUID() {",
          "        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
          "            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
          "            return v.toString(16);",
          "        });",
          "    }",
          "    ",
          "    validThreatModel(options = {}) {",
          "        return {",
          "            name: options.name || 'Test Threat Model ' + this.testRunId,",
          "            description: options.description || 'A comprehensive threat model for testing purposes',",
          "            threat_model_framework: options.framework || 'STRIDE',",
          "            issue_url: options.issueUrl || 'https://github.com/example/project/issues/123',",
          "            ...options.additional",
          "        };",
          "    }",
          "}",
          "`;",
          "    pm.globals.set('TMITestDataFactory', factoryCode);",
          "    console.log('\u2705 TMITestDataFactory loaded into globals');",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "0. Setup & Authentication",
      "item": [
        {
          "name": "Setup Multi-User Test Environment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Load test data factory inline",
                  "class TMITestDataFactory {",
                  "    constructor() {",
                  "        this.timestamp = new Date().toISOString();",
                  "        this.testRunId = Date.now();",
                  "    }",
                  "    ",
                  "    generateUUID() {",
                  "        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "            return v.toString(16);",
                  "        });",
                  "    }",
                  "    ",
                  "    validThreatModel(options = {}) {",
                  "        options = options || {};",
                  "        return {",
                  "            name: options.name || 'Test Threat Model ' + this.testRunId,",
                  "            description: options.description || 'A comprehensive threat model for testing purposes',",
                  "            threat_model_framework: options.framework || 'STRIDE',",
                  "            issue_url: options.issueUrl || 'https://github.com/example/project/issues/123'",
                  "        };",
                  "    }",
                  "}",
                  "const factory = new TMITestDataFactory();",
                  "pm.globals.set('testDataFactory', JSON.stringify(factory));",
                  "console.log('\u2705 Test data factory loaded and instantiated');",
                  "",
                  "// Setup authentication tokens from environment variables",
                  "console.log('\ud83d\udd11 Setting up pre-authenticated user tokens...');",
                  "",
                  "// Get tokens from environment variables (passed by run-tests.sh)",
                  "pm.collectionVariables.set('token_alice', pm.environment.get('token_alice'));",
                  "pm.collectionVariables.set('token_bob', pm.environment.get('token_bob'));",
                  "pm.collectionVariables.set('token_charlie', pm.environment.get('token_charlie'));",
                  "pm.collectionVariables.set('token_diana', pm.environment.get('token_diana'));",
                  "",
                  "// Set default active user to alice",
                  "pm.collectionVariables.set('token_alice', pm.environment.get('token_alice'));",
                  "pm.collectionVariables.set('currentUser', 'alice');",
                  "",
                  "console.log('\u2705 Authentication tokens configured for all users');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Test environment setup completed', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All user tokens are available', function () {",
                  "    const alice_token = pm.collectionVariables.get('token_alice');",
                  "    const bob_token = pm.collectionVariables.get('token_bob');",
                  "    const charlie_token = pm.collectionVariables.get('token_charlie');",
                  "    const diana_token = pm.collectionVariables.get('token_diana');",
                  "    ",
                  "    pm.expect(alice_token).to.be.a('string');",
                  "    pm.expect(bob_token).to.be.a('string');",
                  "    pm.expect(charlie_token).to.be.a('string');",
                  "    pm.expect(diana_token).to.be.a('string');",
                  "    ",
                  "    pm.expect(alice_token.length).to.be.above(10);",
                  "    pm.expect(bob_token.length).to.be.above(10);",
                  "    pm.expect(charlie_token.length).to.be.above(10);",
                  "    pm.expect(diana_token.length).to.be.above(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Setup test environment and validate pre-authenticated tokens"
          }
        },
        {
          "name": "Authenticate Alice (Owner)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Alice's token",
                  "const aliceToken = pm.collectionVariables.get('token_alice');",
                  "pm.collectionVariables.set('token_alice', aliceToken);",
                  "pm.collectionVariables.set('currentUser', 'alice');",
                  "console.log('\ud83d\udd04 Switched to Alice (Owner)');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Alice authentication successful', function () {",
                  "    const token = pm.collectionVariables.get('token_' + pm.collectionVariables.get('currentUser') || 'token_alice');",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.length).to.be.above(10);",
                  "});",
                  "",
                  "pm.test('Current user is Alice', function () {",
                  "    const currentUser = pm.collectionVariables.get('currentUser');",
                  "    pm.expect(currentUser).to.equal('alice');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "Authenticate Alice as primary test user"
          }
        },
        {
          "name": "Authenticate Bob (Writer)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Bob's token",
                  "const bobToken = pm.collectionVariables.get('token_bob');",
                  "pm.collectionVariables.set('token_bob', bobToken);",
                  "pm.collectionVariables.set('currentUser', 'bob');",
                  "console.log('\ud83d\udd04 Switched to Bob (Writer)');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Bob authentication successful', function () {",
                  "    const token = pm.collectionVariables.get('token_bob');",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.length).to.be.above(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_bob}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "Authenticate Bob as writer test user"
          }
        },
        {
          "name": "Authenticate Charlie (Reader)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Charlie's token",
                  "const charlieToken = pm.collectionVariables.get('token_charlie');",
                  "pm.collectionVariables.set('token_charlie', charlieToken);",
                  "pm.collectionVariables.set('currentUser', 'charlie');",
                  "console.log('\ud83d\udd04 Switched to Charlie (Reader)');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Charlie authentication successful', function () {",
                  "    const token = pm.collectionVariables.get('token_charlie');",
                  "    pm.expect(token).to.be.a('string');",
                  "    pm.expect(token.length).to.be.above(10);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_charlie}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "Authenticate Charlie as reader test user"
          }
        }
      ],
      "description": "Setup multi-user authentication environment with pre-authenticated tokens"
    },
    {
      "name": "1. Discovery & Public Endpoints",
      "item": [
        {
          "name": "API Root - Success (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has required fields', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.all.keys('status', 'service', 'api', 'operator');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Test API root endpoint returns 200 with service information"
          }
        },
        {
          "name": "OpenID Configuration - Success (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has OpenID fields', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('issuer');",
                  "    pm.expect(responseData).to.have.property('authorization_endpoint');",
                  "    pm.expect(responseData).to.have.property('token_endpoint');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/.well-known/openid-configuration",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ".well-known",
                "openid-configuration"
              ]
            },
            "description": "Test OpenID Connect discovery endpoint"
          }
        },
        {
          "name": "JWKS - Success (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has keys array', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('keys');",
                  "    pm.expect(responseData.keys).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/.well-known/jwks.json",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                ".well-known",
                "jwks.json"
              ]
            },
            "description": "Test JSON Web Key Set endpoint"
          }
        },
        {
          "name": "OAuth Providers - Success (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has providers array', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('providers');",
                  "    pm.expect(responseData.providers).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/oauth2/providers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "oauth2",
                "providers"
              ]
            },
            "description": "Test OAuth providers listing endpoint"
          }
        }
      ],
      "description": "Test all public discovery endpoints for proper responses"
    },
    {
      "name": "2. Threat Model CRUD Tests",
      "item": [
        {
          "name": "Create Threat Model - Success (201)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure Alice is the active user",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}",
                  "",
                  "// Generate valid threat model data",
                  "// Load TMITestDataFactory inline",
                  "class TMITestDataFactory {",
                  "    constructor() {",
                  "        this.timestamp = new Date().toISOString();",
                  "        this.testRunId = Date.now();",
                  "    }",
                  "    ",
                  "    generateUUID() {",
                  "        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
                  "            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
                  "            return v.toString(16);",
                  "        });",
                  "    }",
                  "    ",
                  "    validThreatModel(options = {}) {",
                  "        options = options || {};",
                  "        return {",
                  "            name: options.name || 'Test Threat Model ' + this.testRunId,",
                  "            description: options.description || 'A comprehensive threat model for testing purposes',",
                  "            threat_model_framework: options.framework || 'STRIDE',",
                  "            issue_url: options.issueUrl || 'https://github.com/example/project/issues/123'",
                  "        };",
                  "    }",
                  "}",
                  "",
                  "const factory = new TMITestDataFactory();",
                  "const threatModel = factory.validThreatModel({",
                  "    name: `Alice Test Threat Model ${Date.now()}`,",
                  "    description: 'Created by Alice for permission testing'",
                  "});",
                  "",
                  "pm.collectionVariables.set('threatModelData', JSON.stringify(threatModel));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has Location header', function () {",
                  "    pm.expect(pm.response.headers.has('Location')).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has threat model with ID', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('id');",
                  "    pm.expect(responseData.id).to.match(/^[0-9a-f-]{36}$/);",
                  "    ",
                  "    // Store for subsequent tests",
                  "    pm.collectionVariables.set('aliceThreatModelId', responseData.id);",
                  "    ",
                  "    // Store for permission testing",
                  "    if (typeof tmiAuth !== 'undefined') {",
                  "        tmiAuth.storeResourceForPermissionTest('threat_model', responseData.id, 'alice');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Created threat model has correct data', function () {",
                  "    const responseData = pm.response.json();",
                  "    const originalData = JSON.parse(pm.collectionVariables.get('threatModelData'));",
                  "    ",
                  "    pm.expect(responseData.name).to.equal(originalData.name);",
                  "    pm.expect(responseData.description).to.equal(originalData.description);",
                  "    pm.expect(responseData.threat_model_framework).to.equal(originalData.threat_model_framework);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{threatModelData}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "Create a threat model with valid data as Alice"
          }
        },
        {
          "name": "Create Threat Model - Invalid Data (400)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate invalid threat model data (missing required name)",
                  "const invalidData = {",
                  "    description: 'Missing required name field',",
                  "    threat_model_framework: 'STRIDE'",
                  "};",
                  "",
                  "pm.collectionVariables.set('invalidThreatModelData', JSON.stringify(invalidData));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response has proper format', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('error');",
                  "    pm.expect(responseData).to.have.property('error_description');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{invalidThreatModelData}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "Test threat model creation with invalid data"
          }
        },
        {
          "name": "Get Threat Model - Success (200)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure Alice is active user",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has threat model data', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.have.property('id');",
                  "    pm.expect(responseData).to.have.property('name');",
                  "    pm.expect(responseData).to.have.property('created_at');",
                  "    pm.expect(responseData).to.have.property('modified_at');",
                  "});",
                  "",
                  "pm.test('Threat model ID matches', function () {",
                  "    const responseData = pm.response.json();",
                  "    const expectedId = pm.collectionVariables.get('aliceThreatModelId');",
                  "    pm.expect(responseData.id).to.equal(expectedId);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Get threat model that Alice owns"
          }
        },
        {
          "name": "Get Threat Model - Forbidden (403)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Diana (no access user)",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.authenticateUser('diana').then(() => {",
                  "        tmiAuth.setActiveUser('diana');",
                  "    });",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates insufficient permissions', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('access_denied');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_diana}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Try to get Alice's threat model as Diana (no access)"
          }
        },
        {
          "name": "Get Threat Model - Not Found (404)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch back to Alice",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates resource not found', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('not_found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/threat_models/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "00000000-0000-0000-0000-000000000000"
              ]
            },
            "description": "Try to get non-existent threat model"
          }
        },
        {
          "name": "List Threat Models - Success (200)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure Alice is the active user",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of threat models', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.be.an('array');",
                  "    ",
                  "    // Should have at least Alice's threat model",
                  "    pm.expect(responseData.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test('Threat models have required fields', function () {",
                  "    const responseData = pm.response.json();",
                  "    if (responseData.length > 0) {",
                  "        const tm = responseData[0];",
                  "        pm.expect(tm).to.have.property('id');",
                  "        pm.expect(tm).to.have.property('name');",
                  "        pm.expect(tm).to.have.property('created_at');",
                  "        pm.expect(tm).to.have.property('modified_at');",
                  "        pm.expect(tm).to.have.property('owner');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ]
            },
            "description": "List all threat models accessible by Alice"
          }
        },
        {
          "name": "List Threat Models - With Pagination (200)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response respects limit parameter', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData).to.be.an('array');",
                  "    pm.expect(responseData.length).to.be.at.most(5);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models?limit=5&offset=0",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            },
            "description": "Test threat models listing with pagination"
          }
        },
        {
          "name": "Update Threat Model - Success (200)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure Alice is the active user",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}",
                  "",
                  "// Generate updated threat model data",
                  "class TMITestDataFactory {",
                  "    constructor() {",
                  "        this.timestamp = new Date().toISOString();",
                  "        this.testRunId = Date.now();",
                  "    }",
                  "    ",
                  "    validThreatModel(options = {}) {",
                  "        options = options || {};",
                  "        return {",
                  "            name: options.name || 'Test Threat Model ' + this.testRunId,",
                  "            description: options.description || 'A comprehensive threat model for testing purposes',",
                  "            threat_model_framework: options.framework || 'STRIDE',",
                  "            issue_url: options.issueUrl || 'https://github.com/example/project/issues/123'",
                  "        };",
                  "    }",
                  "}",
                  "",
                  "const factory = new TMITestDataFactory();",
                  "const updatedThreatModel = factory.validThreatModel({",
                  "    name: `Updated Threat Model ${Date.now()}`,",
                  "    description: 'This threat model has been updated via PUT request',",
                  "    framework: 'PASTA'",
                  "});",
                  "",
                  "pm.collectionVariables.set('updatedThreatModelData', JSON.stringify(updatedThreatModel));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Updated threat model has correct data', function () {",
                  "    const responseData = pm.response.json();",
                  "    const originalData = JSON.parse(pm.collectionVariables.get('updatedThreatModelData'));",
                  "    ",
                  "    pm.expect(responseData.name).to.equal(originalData.name);",
                  "    pm.expect(responseData.description).to.equal(originalData.description);",
                  "    pm.expect(responseData.threat_model_framework).to.equal(originalData.threat_model_framework);",
                  "});",
                  "",
                  "pm.test('Modified timestamp is updated', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.modified_at).to.exist;",
                  "    pm.expect(new Date(responseData.modified_at)).to.be.at.most(new Date());",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{updatedThreatModelData}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Update Alice's threat model with PUT request"
          }
        },
        {
          "name": "Update Threat Model - Forbidden (403)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Diana (unauthorized user)",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('diana');",
                  "}",
                  "",
                  "// Use same update data",
                  "const updatedData = JSON.parse(pm.collectionVariables.get('updatedThreatModelData') || '{}');",
                  "if (Object.keys(updatedData).length === 0) {",
                  "    // Fallback data if not set",
                  "    const fallbackData = {",
                  "        name: 'Unauthorized Update Attempt',",
                  "        description: 'This should be rejected',",
                  "        threat_model_framework: 'STRIDE'",
                  "    };",
                  "    pm.collectionVariables.set('updatedThreatModelData', JSON.stringify(fallbackData));",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates insufficient permissions', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('forbidden');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_diana}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{updatedThreatModelData}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Try to update Alice's threat model as unauthorized user Diana"
          }
        },
        {
          "name": "Update Threat Model - Not Found (404)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch back to Alice",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates resource not found', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('not_found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{updatedThreatModelData}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "00000000-0000-0000-0000-000000000000"
              ]
            },
            "description": "Try to update non-existent threat model"
          }
        },
        {
          "name": "Patch Threat Model - Success (200)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Ensure Alice is the active user",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}",
                  "",
                  "// Generate JSON patch operations",
                  "const patchOps = [",
                  "    {",
                  "        op: 'replace',",
                  "        path: '/description',",
                  "        value: `Patched description at ${new Date().toISOString()}`",
                  "    },",
                  "    {",
                  "        op: 'replace',",
                  "        path: '/threat_model_framework',",
                  "        value: 'LINDDUN'",
                  "    }",
                  "];",
                  "",
                  "pm.collectionVariables.set('patchOps', JSON.stringify(patchOps));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Patch operations applied correctly', function () {",
                  "    const responseData = pm.response.json();",
                  "    const patchOps = JSON.parse(pm.collectionVariables.get('patchOps'));",
                  "    ",
                  "    pm.expect(responseData.description).to.include('Patched description at');",
                  "    pm.expect(responseData.threat_model_framework).to.equal('LINDDUN');",
                  "});",
                  "",
                  "pm.test('Other fields preserved', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.id).to.exist;",
                  "    pm.expect(responseData.name).to.exist;",
                  "    pm.expect(responseData.owner).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{patchOps}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Patch Alice's threat model with JSON patch operations"
          }
        },
        {
          "name": "Patch Threat Model - Forbidden (403)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Diana (unauthorized user)",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('diana');",
                  "}",
                  "",
                  "// Simple patch operation",
                  "const patchOps = [",
                  "    {",
                  "        op: 'replace',",
                  "        path: '/description',",
                  "        value: 'Unauthorized patch attempt'",
                  "    }",
                  "];",
                  "",
                  "pm.collectionVariables.set('forbiddenPatchOps', JSON.stringify(patchOps));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates insufficient permissions', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('forbidden');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_diana}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{forbiddenPatchOps}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Try to patch Alice's threat model as unauthorized user Diana"
          }
        },
        {
          "name": "Patch Threat Model - Invalid Operations (400)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch back to Alice",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}",
                  "",
                  "// Invalid patch operations",
                  "const invalidPatchOps = [",
                  "    {",
                  "        op: 'invalid_operation',",
                  "        path: '/description',",
                  "        value: 'This should fail'",
                  "    }",
                  "];",
                  "",
                  "pm.collectionVariables.set('invalidPatchOps', JSON.stringify(invalidPatchOps));"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error indicates invalid patch operations', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.exist;",
                  "    pm.expect(responseData.error_description).to.exist;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{invalidPatchOps}}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Test patch with invalid operations"
          }
        },
        {
          "name": "Delete Threat Model - Forbidden (403)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch to Diana (unauthorized user)",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('diana');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 403', function () {",
                  "    pm.response.to.have.status(403);",
                  "});",
                  "",
                  "pm.test('Error indicates insufficient permissions', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('forbidden');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_diana}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Try to delete Alice's threat model as unauthorized user Diana"
          }
        },
        {
          "name": "Delete Threat Model - Not Found (404)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Switch back to Alice",
                  "if (typeof tmiAuth !== 'undefined') {",
                  "    tmiAuth.setActiveUser('alice');",
                  "}"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates resource not found', function () {",
                  "    const responseData = pm.response.json();",
                  "    pm.expect(responseData.error).to.include('not_found');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/00000000-0000-0000-0000-000000000000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "00000000-0000-0000-0000-000000000000"
              ]
            },
            "description": "Try to delete non-existent threat model"
          }
        },
        {
          "name": "Delete Threat Model - Success (204)",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token_alice}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{aliceThreatModelId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "threat_models",
                "{{aliceThreatModelId}}"
              ]
            },
            "description": "Delete Alice's threat model successfully"
          }
        }
      ],
      "description": "Comprehensive CRUD testing for threat models with all status codes"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token_alice}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "token_alice",
      "value": "",
      "type": "string"
    },
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8080"
    },
    {
      "key": "loginHint",
      "value": "alice",
      "type": "string"
    },
    {
      "key": "oauthStubUrl",
      "value": "http://127.0.0.1:8079",
      "type": "string"
    },
    {
      "key": "currentUser",
      "value": "alice",
      "type": "string"
    },
    {
      "key": "token_alice",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_bob",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_charlie",
      "value": "",
      "type": "string"
    },
    {
      "key": "token_diana",
      "value": "",
      "type": "string"
    },
    {
      "key": "aliceThreatModelId",
      "value": "",
      "type": "string"
    },
    {
      "key": "threatModelData",
      "value": "",
      "type": "string"
    }
  ]
}