{
  "info": {
    "name": "TMI OAuth Complete Flow Tests",
    "description": "Complete OAuth 2.0 flow testing with comprehensive status code coverage",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8080"
    },
    {
      "key": "oauthStubUrl", 
      "value": "http://127.0.0.1:8079"
    },
    {
      "key": "testUser",
      "value": "oauth-test-{{$randomInt}}"
    },
    {
      "key": "authCode",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "refreshToken",
      "value": ""
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Load test data factory",
          "if (typeof TMITestDataFactory === 'undefined') {",
          "    eval(pm.globals.get('TMITestDataFactory'));",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "OAuth Providers",
      "item": [
        {
          "name": "Get OAuth Providers - Success",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/providers",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "providers"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has providers array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('providers');",
                  "    pm.expect(jsonData.providers).to.be.an('array');",
                  "    pm.expect(jsonData.providers.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test('Test provider exists', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const testProvider = jsonData.providers.find(p => p.id === 'test');",
                  "    pm.expect(testProvider).to.exist;",
                  "    pm.expect(testProvider.name).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OAuth Authorization",
      "item": [
        {
          "name": "OAuth Authorize - Valid Redirect", 
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/authorize?idp=test&login_hint={{testUser}}&client_callback={{oauthStubUrl}}&scope=openid",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "authorize"],
              "query": [
                {"key": "idp", "value": "test"},
                {"key": "login_hint", "value": "{{testUser}}"},
                {"key": "client_callback", "value": "{{oauthStubUrl}}"},
                {"key": "scope", "value": "openid"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 302 (redirect)', function () {",
                  "    pm.response.to.have.status(302);",
                  "});",
                  "",
                  "pm.test('Has Location header for redirect', function () {",
                  "    pm.expect(pm.response.headers.get('Location')).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "// Wait for OAuth stub to receive callback",
                  "setTimeout(() => {}, 2000);"
                ]
              }
            }
          ]
        },
        {
          "name": "OAuth Authorize - Missing IDP (400)",
          "request": {
            "method": "GET", 
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/authorize?login_hint={{testUser}}&client_callback={{oauthStubUrl}}",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "authorize"],
              "query": [
                {"key": "login_hint", "value": "{{testUser}}"},
                {"key": "client_callback", "value": "{{oauthStubUrl}}"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message mentions missing idp', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('idp');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "OAuth Authorize - Invalid IDP (400)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/authorize?idp=nonexistent&login_hint={{testUser}}&client_callback={{oauthStubUrl}}",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "authorize"],
              "query": [
                {"key": "idp", "value": "nonexistent"},
                {"key": "login_hint", "value": "{{testUser}}"},
                {"key": "client_callback", "value": "{{oauthStubUrl}}"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message mentions invalid provider', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('provider');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OAuth Token Operations",
      "item": [
        {
          "name": "Get Token from Stub",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{oauthStubUrl}}/creds?userid={{testUser}}",
              "host": ["{{oauthStubUrl}}"],
              "path": ["creds"],
              "query": [
                {"key": "userid", "value": "{{testUser}}"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has access token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.access_token).to.exist;",
                  "    pm.collectionVariables.set('accessToken', jsonData.access_token);",
                  "});",
                  "",
                  "pm.test('Response has refresh token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.refresh_token).to.exist;", 
                  "    pm.collectionVariables.set('refreshToken', jsonData.refresh_token);",
                  "});",
                  "",
                  "pm.test('Token type is Bearer', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token_type).to.equal('Bearer');",
                  "});",
                  "",
                  "pm.test('Flow type is implicit', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.flow_type).to.equal('implicit');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Token Introspection - Valid Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{accessToken}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/oauth2/introspect",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "introspect"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is active', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.active).to.be.true;",
                  "});",
                  "",
                  "pm.test('Response has token details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.sub).to.exist;",
                  "    pm.expect(jsonData.exp).to.exist;",
                  "    pm.expect(jsonData.iss).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Token Introspection - Invalid Token (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token", 
                  "value": "invalid.token.here"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/oauth2/introspect",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "introspect"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Token is not active', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.active).to.be.false;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Token Introspection - Missing Token (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": []
            },
            "url": {
              "raw": "{{baseUrl}}/oauth2/introspect",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "introspect"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions missing token', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('token');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OAuth User Info",
      "item": [
        {
          "name": "Get User Info - Valid Token",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/oauth2/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has user info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.sub).to.exist;",
                  "    pm.expect(jsonData.email).to.exist;",
                  "    pm.expect(jsonData.name).to.exist;",
                  "});",
                  "",
                  "pm.test('User email matches test user', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const testUser = pm.collectionVariables.get('testUser');",
                  "    pm.expect(jsonData.email).to.include(testUser);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Info - No Token (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Info - Invalid Token (401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer invalid.token.here"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/oauth2/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions invalid token', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OAuth Token Revocation",
      "item": [
        {
          "name": "Revoke Token - Valid Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{accessToken}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/oauth2/revoke",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "revoke"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Revoke Token - No Token (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "token",
                  "value": "{{accessToken}}"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/oauth2/revoke",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "revoke"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Use Revoked Token - Should Fail (401)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/oauth2/userinfo",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "userinfo"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401 (revoked token)', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Token is no longer valid', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}