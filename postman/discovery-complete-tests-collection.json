{
  "info": {
    "name": "TMI Discovery Complete Tests",
    "description": "Complete discovery endpoint testing with comprehensive status code coverage",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8080"
    }
  ],
  "item": [
    {
      "name": "Well-Known Endpoints",
      "item": [
        {
          "name": "OpenID Configuration - Success (200)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/.well-known/openid-configuration",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "openid-configuration"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has OpenID configuration', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.issuer).to.exist;",
                  "    pm.expect(jsonData.authorization_endpoint).to.exist;",
                  "    pm.expect(jsonData.token_endpoint).to.exist;",
                  "    pm.expect(jsonData.userinfo_endpoint).to.exist;",
                  "    pm.expect(jsonData.jwks_uri).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "OAuth Authorization Server - Success (200)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/.well-known/oauth-authorization-server",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "oauth-authorization-server"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has OAuth server metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.issuer).to.exist;",
                  "    pm.expect(jsonData.authorization_endpoint).to.exist;",
                  "    pm.expect(jsonData.token_endpoint).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "JWKS - Success (200)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/.well-known/jwks.json",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "jwks.json"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has JWKS', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.keys).to.exist;",
                  "    pm.expect(jsonData.keys).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "OAuth Protected Resource - Success (200)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/.well-known/oauth-protected-resource",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "oauth-protected-resource"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has resource server metadata', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.resource).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "API Root - Success (200)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Invalid Well-Known Path (404)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/.well-known/nonexistent",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "nonexistent"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error indicates not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Malformed Discovery Request (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"invalid\": \"request\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/.well-known/openid-configuration",
              "host": ["{{baseUrl}}"],
              "path": [".well-known", "openid-configuration"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400 or 405', function () {",
                  "    pm.expect([400, 405]).to.include(pm.response.code);",
                  "});",
                  "",
                  "pm.test('Error indicates method not allowed or bad request', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.match(/(method.*not.*allowed|bad.*request)/);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}