{
  "info": {
    "name": "TMI Documents CRUD Tests",
    "description": "Complete Documents CRUD testing with comprehensive status code coverage",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://127.0.0.1:8080"
    },
    {
      "key": "oauthStubUrl", 
      "value": "http://127.0.0.1:8079"
    },
    {
      "key": "testUser",
      "value": "docs-test-{{$randomInt}}"
    },
    {
      "key": "threatModelId",
      "value": ""
    },
    {
      "key": "documentId",
      "value": ""
    },
    {
      "key": "accessToken",
      "value": ""
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Load test data factory and multi-user auth",
          "if (typeof TMITestDataFactory === 'undefined') {",
          "    eval(pm.globals.get('TMITestDataFactory'));",
          "}",
          "if (typeof TMIMultiUserAuth === 'undefined') {",
          "    eval(pm.globals.get('TMIMultiUserAuth'));",
          "}"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Setup",
      "item": [
        {
          "name": "Authenticate Test User",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/oauth2/authorize?idp=test&login_hint={{testUser}}&client_callback={{oauthStubUrl}}&scope=openid",
              "host": ["{{baseUrl}}"],
              "path": ["oauth2", "authorize"],
              "query": [
                {"key": "idp", "value": "test"},
                {"key": "login_hint", "value": "{{testUser}}"},
                {"key": "client_callback", "value": "{{oauthStubUrl}}"},
                {"key": "scope", "value": "openid"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Wait for OAuth flow",
                  "setTimeout(() => {}, 2000);"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Access Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{oauthStubUrl}}/creds?userid={{testUser}}",
              "host": ["{{oauthStubUrl}}"],
              "path": ["creds"],
              "query": [
                {"key": "userid", "value": "{{testUser}}"}
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('accessToken', jsonData.access_token);"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Test Threat Model",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Document Test Threat Model {{$randomInt}}\",\n  \"description\": \"Threat model for document testing\",\n  \"threat_model_framework\": \"STRIDE\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Threat model created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('threatModelId', jsonData.id);"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Document CRUD Operations",
      "item": [
        {
          "name": "Create Document - Success (201)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Document {{$randomInt}}\",\n  \"url\": \"https://example.com/documents/test-{{$randomInt}}.pdf\",\n  \"description\": \"A test document for comprehensive API testing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has document data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.exist;",
                  "    pm.expect(jsonData.name).to.exist;",
                  "    pm.expect(jsonData.url).to.exist;",
                  "    pm.collectionVariables.set('documentId', jsonData.id);",
                  "});",
                  "",
                  "pm.test('Document has valid UUID', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
                  "    pm.expect(jsonData.id).to.match(uuidRegex);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document - Missing Name (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"url\": \"https://example.com/test.pdf\",\n  \"description\": \"Missing name field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message mentions name field', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('name');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document - Missing URL (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Document\",\n  \"description\": \"Missing url field\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message mentions url field', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('url');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document - Invalid URL (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Document\",\n  \"url\": \"not-a-valid-url\",\n  \"description\": \"Invalid URL format\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error message mentions URL validation', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('url');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document - No Auth (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Document\",\n  \"url\": \"https://example.com/test.pdf\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create Document - Invalid Threat Model (404)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test Document\",\n  \"url\": \"https://example.com/test.pdf\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/00000000-0000-0000-0000-000000000000/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "00000000-0000-0000-0000-000000000000", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error mentions not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Document Retrieval",
      "item": [
        {
          "name": "List Documents - Success (200)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is array of documents', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property('id');",
                  "        pm.expect(jsonData[0]).to.have.property('name');",
                  "        pm.expect(jsonData[0]).to.have.property('url');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Contains created document', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const documentId = pm.collectionVariables.get('documentId');",
                  "    const found = jsonData.find(doc => doc.id === documentId);",
                  "    pm.expect(found).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Specific Document - Success (200)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct document', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const documentId = pm.collectionVariables.get('documentId');",
                  "    pm.expect(jsonData.id).to.equal(documentId);",
                  "    pm.expect(jsonData.name).to.exist;",
                  "    pm.expect(jsonData.url).to.exist;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Document - Not Found (404)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error mentions not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Document - No Auth (401)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Document Updates",
      "item": [
        {
          "name": "Update Document - Success (200)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Document {{$randomInt}}\",\n  \"url\": \"https://example.com/documents/updated-{{$randomInt}}.pdf\",\n  \"description\": \"Updated description for comprehensive testing\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Document was updated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.name).to.include('Updated');",
                  "    pm.expect(jsonData.url).to.include('updated');",
                  "});",
                  "",
                  "pm.test('Document ID unchanged', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const documentId = pm.collectionVariables.get('documentId');",
                  "    pm.expect(jsonData.id).to.equal(documentId);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Document - Invalid Data (400)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"url\": \"not-a-valid-url\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions validation failure', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.match(/(name|url|validation|invalid)/);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Document - Not Found (404)",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Document\",\n  \"url\": \"https://example.com/updated.pdf\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error mentions not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Document Deletion",
      "item": [
        {
          "name": "Delete Document - Success (204)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Response body is empty', function () {",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Document - Not Found (404)",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/00000000-0000-0000-0000-000000000000",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error mentions not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Delete Document - No Auth (401)",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Document Deleted (404)",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/{{documentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "{{documentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Deleted document returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error confirms document not found', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('not found');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Bulk Document Operations",
      "item": [
        {
          "name": "Bulk Create Documents - Success (201)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"name\": \"Bulk Document 1 {{$randomInt}}\",\n    \"url\": \"https://example.com/bulk1-{{$randomInt}}.pdf\",\n    \"description\": \"First bulk document\"\n  },\n  {\n    \"name\": \"Bulk Document 2 {{$randomInt}}\",\n    \"url\": \"https://example.com/bulk2-{{$randomInt}}.pdf\",\n    \"description\": \"Second bulk document\"\n  },\n  {\n    \"name\": \"Bulk Document 3 {{$randomInt}}\",\n    \"url\": \"https://example.com/bulk3-{{$randomInt}}.pdf\",\n    \"description\": \"Third bulk document\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "bulk"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has created documents', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.equal(3);",
                  "    ",
                  "    jsonData.forEach(doc => {",
                  "        pm.expect(doc.id).to.exist;",
                  "        pm.expect(doc.name).to.exist;",
                  "        pm.expect(doc.url).to.exist;",
                  "    });",
                  "});",
                  "",
                  "pm.test('All documents have valid UUIDs', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
                  "    ",
                  "    jsonData.forEach(doc => {",
                  "        pm.expect(doc.id).to.match(uuidRegex);",
                  "    });",
                  "});",
                  "",
                  "pm.test('Response time is reasonable for bulk operation', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Bulk Create - Invalid Data (400)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"name\": \"Valid Document\",\n    \"url\": \"https://example.com/valid.pdf\"\n  },\n  {\n    \"name\": \"\",\n    \"url\": \"invalid-url\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "bulk"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions validation failure', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.match(/(validation|invalid|name|url)/);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Bulk Create - No Auth (401)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"name\": \"Test Document\",\n    \"url\": \"https://example.com/test.pdf\"\n  }\n]"
            },
            "url": {
              "raw": "{{baseUrl}}/threat_models/{{threatModelId}}/documents/bulk",
              "host": ["{{baseUrl}}"],
              "path": ["threat_models", "{{threatModelId}}", "documents", "bulk"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Status code is 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error mentions authentication', function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText.toLowerCase()).to.include('unauthorized');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}