-- Create threat_models table with all final fields
CREATE TABLE IF NOT EXISTS threat_models (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    owner_email VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_by VARCHAR(256) NOT NULL,
    threat_model_framework VARCHAR(50) NOT NULL DEFAULT 'STRIDE' 
        CHECK (threat_model_framework IN ('CIA', 'STRIDE', 'LINDDUN', 'DIE', 'PLOT4ai')),
    issue_uri VARCHAR(1024),
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (owner_email) REFERENCES users(email) ON DELETE RESTRICT
);

-- Create diagrams table with all final fields
CREATE TABLE IF NOT EXISTS diagrams (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) CHECK (type IN ('DFD-1.0.0')),
    content TEXT,
    cells JSONB,
    svg_image TEXT,
    image_update_vector BIGINT,
    update_vector BIGINT NOT NULL DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (threat_model_id) REFERENCES threat_models(id) ON DELETE CASCADE
);

-- Create threats table with all final fields (UUID generated by application using UUIDv7)
CREATE TABLE IF NOT EXISTS threats (
    id UUID PRIMARY KEY,
    threat_model_id UUID NOT NULL,
    diagram_id UUID,
    cell_id UUID,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    severity VARCHAR(50) CHECK (severity IN ('Unknown', 'None', 'Low', 'Medium', 'High', 'Critical')),
    likelihood VARCHAR(50),
    risk_level VARCHAR(50),
    score DECIMAL(3,1) CHECK (score >= 0.0 AND score <= 10.0),
    priority VARCHAR(16) NOT NULL DEFAULT 'Medium',
    mitigated BOOLEAN NOT NULL DEFAULT FALSE,
    status VARCHAR(256) NOT NULL DEFAULT 'Active',
    threat_type VARCHAR(256) NOT NULL DEFAULT 'Unspecified',
    mitigation TEXT,
    issue_uri VARCHAR(1024),
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (threat_model_id) REFERENCES threat_models(id) ON DELETE CASCADE,
    FOREIGN KEY (diagram_id) REFERENCES diagrams(id) ON DELETE SET NULL
);

-- Create threat_model_access table for authorization (supports both users and groups)
CREATE TABLE IF NOT EXISTS threat_model_access (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL,
    subject VARCHAR(500) NOT NULL,  -- Email for users, group name for groups
    subject_type VARCHAR(20) NOT NULL CHECK (subject_type IN ('user', 'group')),
    idp VARCHAR(100),  -- Identity provider (required for groups, optional for users)
    role VARCHAR(50) NOT NULL CHECK (role IN ('owner', 'writer', 'reader')),
    granted_by VARCHAR(255),
    created_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (threat_model_id) REFERENCES threat_models(id) ON DELETE CASCADE,
    -- Note: We don't FK to users table for subject since it can be a group
    UNIQUE(threat_model_id, subject, subject_type, idp)
);

-- Create documents table
CREATE TABLE documents (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL REFERENCES threat_models(id) ON DELETE CASCADE,
    name VARCHAR(256) NOT NULL,
    uri VARCHAR(1024) NOT NULL,
    description VARCHAR(1024),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create notes table
CREATE TABLE notes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL REFERENCES threat_models(id) ON DELETE CASCADE,
    name VARCHAR(256) NOT NULL,
    content TEXT NOT NULL,
    description VARCHAR(1024),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create repositories table (formerly sources)
CREATE TABLE repositories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL REFERENCES threat_models(id) ON DELETE CASCADE,
    name VARCHAR(256),
    uri VARCHAR(1024) NOT NULL,
    description VARCHAR(1024),
    type VARCHAR(50) CHECK (type IN ('git', 'svn', 'mercurial', 'other')),
    parameters JSONB,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create assets table
CREATE TABLE assets (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    threat_model_id UUID NOT NULL REFERENCES threat_models(id) ON DELETE CASCADE,
    name VARCHAR(256) NOT NULL,
    description VARCHAR(1024),
    type VARCHAR(50) NOT NULL CHECK (type IN ('data', 'hardware', 'software', 'infrastructure', 'service', 'personnel')),
    criticality VARCHAR(128),
    classification TEXT[],
    sensitivity TEXT[],
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create metadata table with all enhancements (UUID generated by application using UUIDv7)
CREATE TABLE metadata (
    id UUID PRIMARY KEY,
    entity_type VARCHAR(50) NOT NULL CHECK (entity_type IN ('threat_model', 'threat', 'diagram', 'document', 'repository', 'cell', 'note', 'asset')),
    entity_id UUID NOT NULL,
    key VARCHAR(128) NOT NULL,
    value TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    modified_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Add foreign key constraints for collaboration_sessions (deferred from file 1)
ALTER TABLE collaboration_sessions ADD FOREIGN KEY (threat_model_id) REFERENCES threat_models(id) ON DELETE CASCADE;
ALTER TABLE collaboration_sessions ADD FOREIGN KEY (diagram_id) REFERENCES diagrams(id) ON DELETE CASCADE;

-- Create indexes for threat_models
CREATE INDEX IF NOT EXISTS idx_threat_models_owner_email ON threat_models(owner_email);
CREATE INDEX idx_threat_models_framework ON threat_models(threat_model_framework);
CREATE INDEX idx_threat_models_created_by ON threat_models(created_by);
CREATE INDEX IF NOT EXISTS idx_threat_models_owner_created_at ON threat_models(owner_email, created_at DESC);

-- Create indexes for diagrams
CREATE INDEX IF NOT EXISTS idx_diagrams_threat_model_id ON diagrams(threat_model_id);
CREATE INDEX IF NOT EXISTS idx_diagrams_type ON diagrams(type);
CREATE INDEX idx_diagrams_cells ON diagrams USING GIN (cells);
CREATE INDEX idx_diagrams_threat_model_id_type ON diagrams(threat_model_id, type);

-- Create indexes for threats
CREATE INDEX IF NOT EXISTS idx_threats_threat_model_id ON threats(threat_model_id);
CREATE INDEX IF NOT EXISTS idx_threats_severity ON threats(severity);
CREATE INDEX IF NOT EXISTS idx_threats_risk_level ON threats(risk_level);
CREATE INDEX idx_threats_diagram_id ON threats(diagram_id);
CREATE INDEX idx_threats_cell_id ON threats(cell_id);
CREATE INDEX idx_threats_priority ON threats(priority);
CREATE INDEX idx_threats_mitigated ON threats(mitigated);
CREATE INDEX idx_threats_status ON threats(status);
CREATE INDEX idx_threats_threat_type ON threats(threat_type);
CREATE INDEX idx_threats_score ON threats(score);
CREATE INDEX IF NOT EXISTS idx_threats_name ON threats(name);
CREATE INDEX IF NOT EXISTS idx_threats_modified_at ON threats(modified_at);
CREATE INDEX IF NOT EXISTS idx_threats_threat_model_created_at ON threats(threat_model_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_threats_threat_model_modified_at ON threats(threat_model_id, modified_at DESC);

-- Create indexes for threat_model_access
CREATE INDEX IF NOT EXISTS idx_threat_model_access_threat_model_id ON threat_model_access(threat_model_id);
CREATE INDEX IF NOT EXISTS idx_threat_model_access_subject ON threat_model_access(subject);
CREATE INDEX IF NOT EXISTS idx_threat_model_access_subject_type ON threat_model_access(subject_type);
CREATE INDEX IF NOT EXISTS idx_threat_model_access_idp ON threat_model_access(idp) WHERE idp IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_threat_model_access_role ON threat_model_access(role);
CREATE INDEX IF NOT EXISTS idx_threat_model_access_performance ON threat_model_access(threat_model_id, subject_type, subject);

-- Create indexes for documents
CREATE INDEX idx_documents_threat_model_id ON documents(threat_model_id);
CREATE INDEX idx_documents_name ON documents(name);
CREATE INDEX idx_documents_created_at ON documents(created_at);
CREATE INDEX IF NOT EXISTS idx_documents_modified_at ON documents(modified_at);
CREATE INDEX IF NOT EXISTS idx_documents_threat_model_created_at ON documents(threat_model_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_documents_threat_model_modified_at ON documents(threat_model_id, modified_at DESC);

-- Create indexes for notes
CREATE INDEX idx_notes_threat_model_id ON notes(threat_model_id);
CREATE INDEX idx_notes_name ON notes(name);
CREATE INDEX idx_notes_created_at ON notes(created_at);
CREATE INDEX IF NOT EXISTS idx_notes_modified_at ON notes(modified_at);
CREATE INDEX IF NOT EXISTS idx_notes_threat_model_created_at ON notes(threat_model_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_notes_threat_model_modified_at ON notes(threat_model_id, modified_at DESC);

-- Create indexes for repositories
CREATE INDEX idx_repositories_threat_model_id ON repositories(threat_model_id);
CREATE INDEX idx_repositories_name ON repositories(name);
CREATE INDEX idx_repositories_type ON repositories(type);
CREATE INDEX idx_repositories_created_at ON repositories(created_at);
CREATE INDEX IF NOT EXISTS idx_repositories_modified_at ON repositories(modified_at);
CREATE INDEX IF NOT EXISTS idx_repositories_threat_model_created_at ON repositories(threat_model_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_repositories_threat_model_modified_at ON repositories(threat_model_id, modified_at DESC);

-- Create indexes for assets
CREATE INDEX idx_assets_threat_model_id ON assets(threat_model_id);
CREATE INDEX idx_assets_name ON assets(name);
CREATE INDEX idx_assets_type ON assets(type);
CREATE INDEX idx_assets_created_at ON assets(created_at);
CREATE INDEX idx_assets_modified_at ON assets(modified_at);
CREATE INDEX idx_assets_threat_model_created_at ON assets(threat_model_id, created_at DESC);
CREATE INDEX idx_assets_threat_model_modified_at ON assets(threat_model_id, modified_at DESC);

-- Create indexes for metadata
CREATE INDEX idx_metadata_entity_type_id ON metadata(entity_type, entity_id);
CREATE INDEX idx_metadata_key ON metadata(key);
CREATE INDEX idx_metadata_entity_id ON metadata(entity_id);
CREATE UNIQUE INDEX idx_metadata_unique_key_per_entity ON metadata(entity_type, entity_id, key);
CREATE INDEX IF NOT EXISTS idx_metadata_key_value ON metadata(key, value);
CREATE INDEX IF NOT EXISTS idx_metadata_key_only ON metadata(key);
CREATE INDEX IF NOT EXISTS idx_metadata_entity_key_exists ON metadata(entity_type, entity_id, key) WHERE value IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_metadata_created_at ON metadata(created_at);
CREATE INDEX IF NOT EXISTS idx_metadata_modified_at ON metadata(modified_at);
CREATE INDEX IF NOT EXISTS idx_metadata_entity_type_created_at ON metadata(entity_type, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_metadata_entity_type_modified_at ON metadata(entity_type, modified_at DESC);

-- Partial indexes for specific entity types in metadata
CREATE INDEX IF NOT EXISTS idx_metadata_threats ON metadata(entity_id, key, value) WHERE entity_type = 'threat';
CREATE INDEX IF NOT EXISTS idx_metadata_documents ON metadata(entity_id, key, value) WHERE entity_type = 'document';
CREATE INDEX IF NOT EXISTS idx_metadata_notes ON metadata(entity_id, key, value) WHERE entity_type = 'note';
CREATE INDEX IF NOT EXISTS idx_metadata_repositories ON metadata(entity_id, key, value) WHERE entity_type = 'repository';
CREATE INDEX IF NOT EXISTS idx_metadata_diagrams ON metadata(entity_id, key, value) WHERE entity_type = 'diagram';
CREATE INDEX IF NOT EXISTS idx_metadata_threat_models ON metadata(entity_id, key, value) WHERE entity_type = 'threat_model';
CREATE INDEX IF NOT EXISTS idx_metadata_assets ON metadata(entity_id, key, value) WHERE entity_type = 'asset';

-- Performance indexes for authorization inheritance
CREATE INDEX IF NOT EXISTS idx_threats_owner_via_threat_model ON threats(threat_model_id)
    INCLUDE (id, name, created_at, modified_at);
CREATE INDEX IF NOT EXISTS idx_documents_owner_via_threat_model ON documents(threat_model_id)
    INCLUDE (id, name, uri, created_at, modified_at);
CREATE INDEX IF NOT EXISTS idx_notes_owner_via_threat_model ON notes(threat_model_id)
    INCLUDE (id, name, created_at, modified_at);
CREATE INDEX IF NOT EXISTS idx_repositories_owner_via_threat_model ON repositories(threat_model_id)
    INCLUDE (id, name, uri, type, created_at, modified_at);
CREATE INDEX IF NOT EXISTS idx_assets_owner_via_threat_model ON assets(threat_model_id)
    INCLUDE (id, name, type, created_at, modified_at);

-- Add constraints for documents
ALTER TABLE documents ADD CONSTRAINT documents_name_not_empty
    CHECK (LENGTH(TRIM(name)) > 0);
ALTER TABLE documents ADD CONSTRAINT documents_uri_not_empty
    CHECK (LENGTH(TRIM(uri)) > 0);

-- Add constraints for notes
ALTER TABLE notes ADD CONSTRAINT notes_name_not_empty
    CHECK (LENGTH(TRIM(name)) > 0);
ALTER TABLE notes ADD CONSTRAINT notes_content_not_empty
    CHECK (LENGTH(TRIM(content)) > 0);

-- Add constraints for repositories
ALTER TABLE repositories ADD CONSTRAINT repositories_uri_not_empty
    CHECK (LENGTH(TRIM(uri)) > 0);

-- Add constraints for assets
ALTER TABLE assets ADD CONSTRAINT assets_name_not_empty
    CHECK (LENGTH(TRIM(name)) > 0);
ALTER TABLE assets ADD CONSTRAINT assets_type_not_empty
    CHECK (LENGTH(TRIM(type)) > 0);

-- Add constraints for metadata
ALTER TABLE metadata ADD CONSTRAINT metadata_key_not_empty
    CHECK (LENGTH(TRIM(key)) > 0 AND LENGTH(key) <= 128);
ALTER TABLE metadata ADD CONSTRAINT metadata_value_not_empty
    CHECK (LENGTH(TRIM(value)) > 0 AND LENGTH(value) <= 65535);
ALTER TABLE metadata ADD CONSTRAINT metadata_key_format
    CHECK (key ~ '^[a-zA-Z0-9_-]+$');

-- Create authorization_groups table to track groups used in authorizations
CREATE TABLE IF NOT EXISTS authorization_groups (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    idp VARCHAR(100) NOT NULL,
    group_name VARCHAR(255) NOT NULL,
    display_name VARCHAR(255),
    first_used TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    last_used TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    usage_count INTEGER DEFAULT 1,
    UNIQUE(idp, group_name)
);

-- Create indexes for authorization_groups
CREATE INDEX idx_authorization_groups_idp ON authorization_groups(idp);
CREATE INDEX idx_authorization_groups_group_name ON authorization_groups(group_name);
CREATE INDEX idx_authorization_groups_last_used ON authorization_groups(last_used);