asyncapi: '3.0.0'

info:
  title: TMI WebSocket API
  version: '1.0.0'
  description: |
    AsyncAPI specification for the Collaborative Threat Modeling Interface (TMI) WebSocket messaging.
    This API enables real-time collaborative editing of threat model diagrams with role-based access control.
    
    ## Features
    - Real-time collaborative diagram editing
    - Role-based access control (reader/writer/owner permissions)
    - JWT token authentication
    - Session management with automatic cleanup
    - Diagram operation validation
    
    ## Connection Flow
    1. Authenticate with JWT token
    2. Validate access permissions for the diagram
    3. Join or create collaboration session
    4. Exchange real-time diagram operations
    5. Receive join/leave notifications from other participants

servers:
  development:
    host: localhost:8080
    protocol: ws
    description: Local development server
    security:
      - jwtAuth: []
    
  production:
    host: api.tmi.example.com
    protocol: wss
    description: Production server with TLS
    security:
      - jwtAuth: []

channels:
  '/threat_models/{threat_model_id}/diagrams/{diagram_id}/ws':
    address: '/threat_models/{threat_model_id}/diagrams/{diagram_id}/ws'
    description: |
      WebSocket endpoint for collaborative diagram editing. Each diagram has its own collaboration session.
      Users must have at least reader permissions on the parent threat model to connect.
    parameters:
      threat_model_id:
        description: Unique identifier of the threat model
        schema:
          type: string
          format: uuid
          example: '550e8400-e29b-41d4-a716-446655440000'
      diagram_id:
        description: Unique identifier of the diagram
        schema:
          type: string
          format: uuid
          example: '6ba7b810-9dad-11d1-80b4-00c04fd430c8'
    messages:
      clientMessage:
        $ref: '#/components/messages/ClientMessage'
      serverMessage:
        $ref: '#/components/messages/ServerMessage'
      joinEvent:
        $ref: '#/components/messages/JoinEvent'
      leaveEvent:
        $ref: '#/components/messages/LeaveEvent'
      updateEvent:
        $ref: '#/components/messages/UpdateEvent'

operations:
  sendDiagramOperation:
    action: send
    channel:
      $ref: '#/channels/~1threat_models~1{threat_model_id}~1diagrams~1{diagram_id}~1ws'
    summary: Send a diagram operation
    description: |
      Send a diagram operation (add, update, or remove) to be applied to the diagram
      and broadcasted to all connected participants.
    messages:
      - $ref: '#/components/messages/ClientMessage'
    
  receiveDiagramEvents:
    action: receive
    channel:
      $ref: '#/channels/~1threat_models~1{threat_model_id}~1diagrams~1{diagram_id}~1ws'
    summary: Receive diagram events
    description: |
      Receive real-time events including diagram operations from other users,
      join/leave notifications, and session updates.
    messages:
      - $ref: '#/components/messages/ServerMessage'
      - $ref: '#/components/messages/JoinEvent'
      - $ref: '#/components/messages/LeaveEvent'
      - $ref: '#/components/messages/UpdateEvent'

components:
  parameters:
    ThreatModelId:
      description: Unique identifier of the threat model
      schema:
        type: string
        format: uuid
        example: '550e8400-e29b-41d4-a716-446655440000'
    
    DiagramId:
      description: Unique identifier of the diagram
      schema:
        type: string
        format: uuid
        example: '6ba7b810-9dad-11d1-80b4-00c04fd430c8'

  messages:
    ClientMessage:
      name: ClientMessage
      title: Client Operation Message
      summary: Message sent by client to perform diagram operation
      description: |
        Message sent by clients to perform diagram operations. Contains the operation
        details that will be validated, applied to the stored diagram, and broadcasted
        to all connected participants.
      payload:
        $ref: '#/components/schemas/ClientMessagePayload'
      examples:
        - name: AddCellOperation
          summary: Example of adding a new cell to the diagram
          payload:
            operation:
              type: add
              component:
                id: '123e4567-e89b-12d3-a456-426614174000'
                shape: process
                x: 100
                y: 150
                width: 120
                height: 80
                label: User Authentication
                
        - name: UpdateCellOperation
          summary: Example of updating an existing cell
          payload:
            operation:
              type: update
              component_id: '123e4567-e89b-12d3-a456-426614174000'
              properties:
                label: Updated Authentication Process
                x: 110
                y: 160
                
        - name: RemoveCellOperation
          summary: Example of removing a cell from the diagram
          payload:
            operation:
              type: remove
              component_id: '123e4567-e89b-12d3-a456-426614174000'

    ServerMessage:
      name: ServerMessage
      title: Server Event Message
      summary: Base message sent by server for all events
      description: |
        Base message structure sent by the server. Contains event type, user information,
        timestamp, and optional operation data for diagram updates.
      payload:
        $ref: '#/components/schemas/ServerMessagePayload'

    JoinEvent:
      name: JoinEvent
      title: User Join Event
      summary: Notification when a user joins the collaboration session
      description: |
        Sent to all participants when a new user joins the collaboration session.
        Helps maintain awareness of active participants.
      payload:
        allOf:
          - $ref: '#/components/schemas/ServerMessagePayload'
          - type: object
            properties:
              event:
                const: join
      examples:
        - name: UserJoinedSession
          summary: Example of user joining collaboration session
          payload:
            event: join
            user_id: john.doe@example.com
            timestamp: '2024-01-15T10:30:00Z'

    LeaveEvent:
      name: LeaveEvent
      title: User Leave Event
      summary: Notification when a user leaves the collaboration session
      description: |
        Sent to all remaining participants when a user leaves the collaboration session.
        Helps maintain awareness of active participants.
      payload:
        allOf:
          - $ref: '#/components/schemas/ServerMessagePayload'
          - type: object
            properties:
              event:
                const: leave
      examples:
        - name: UserLeftSession
          summary: Example of user leaving collaboration session
          payload:
            event: leave
            user_id: jane.smith@example.com
            timestamp: '2024-01-15T11:45:00Z'

    UpdateEvent:
      name: UpdateEvent
      title: Diagram Update Event
      summary: Notification of diagram operation from another user
      description: |
        Sent to all participants when another user performs a diagram operation.
        Contains the complete operation details for real-time synchronization.
      payload:
        allOf:
          - $ref: '#/components/schemas/ServerMessagePayload'
          - type: object
            properties:
              event:
                const: update
              operation:
                $ref: '#/components/schemas/DiagramOperation'
            required:
              - operation
      examples:
        - name: CellAddedByOtherUser
          summary: Example of receiving a cell addition from another user
          payload:
            event: update
            user_id: alice.wilson@example.com
            timestamp: '2024-01-15T12:15:00Z'
            operation:
              type: add
              component:
                id: '987fcdeb-51a2-43d1-9f4e-123456789abc'
                shape: datastore
                x: 300
                y: 200
                width: 100
                height: 60
                label: User Database

  schemas:
    ClientMessagePayload:
      type: object
      description: Payload structure for messages sent by clients
      properties:
        operation:
          $ref: '#/components/schemas/DiagramOperation'
      required:
        - operation
      additionalProperties: false

    ServerMessagePayload:
      type: object
      description: Base payload structure for messages sent by server
      properties:
        event:
          type: string
          enum: [join, leave, update]
          description: Type of event (join, leave, or update)
        user_id:
          type: string
          description: Identifier of the user who triggered the event (email or username)
          example: john.doe@example.com
        timestamp:
          type: string
          format: date-time
          description: UTC timestamp when the event occurred
          example: '2024-01-15T10:30:00Z'
        operation:
          $ref: '#/components/schemas/DiagramOperation'
      required:
        - event
        - user_id
        - timestamp
      additionalProperties: false

    DiagramOperation:
      type: object
      description: |
        Defines a change operation to be applied to a diagram. Operations are validated
        before being applied to ensure data integrity and consistency.
      properties:
        type:
          type: string
          enum: [add, update, remove]
          description: Type of operation to perform
        component_id:
          type: string
          format: uuid
          description: |
            ID of the component to update or remove. Required for update and remove operations.
          example: '123e4567-e89b-12d3-a456-426614174000'
        component:
          $ref: '#/components/schemas/Cell'
        properties:
          type: object
          description: |
            Key-value pairs of properties to update. Used with update operations
            as an alternative to providing the full component. Property keys
            cannot exceed 255 characters.
          additionalProperties: true
          example:
            label: Updated Process Name
            x: 150
            y: 200
      required:
        - type
      additionalProperties: false
      allOf:
        - if:
            properties:
              type:
                const: add
          then:
            required:
              - component
            properties:
              component_id:
                not: {}
              properties:
                not: {}
        - if:
            properties:
              type:
                const: remove
          then:
            required:
              - component_id
            properties:
              component:
                not: {}
              properties:
                not: {}
        - if:
            properties:
              type:
                const: update
          then:
            required:
              - component_id
            anyOf:
              - required:
                  - component
              - required:
                  - properties

    Cell:
      type: object
      description: |
        Represents a diagram cell/component with X6-compatible structure.
        Cells are the fundamental building blocks of diagrams and can represent
        processes, data stores, external entities, or data flows.
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the cell
          example: '123e4567-e89b-12d3-a456-426614174000'
        shape:
          type: string
          description: |
            Shape type of the cell, determines visual representation and behavior.
            Common values include 'process', 'datastore', 'entity', 'dataflow'.
          example: process
        x:
          type: number
          description: X coordinate position of the cell on the diagram
          minimum: 0
          example: 100
        y:
          type: number
          description: Y coordinate position of the cell on the diagram
          minimum: 0
          example: 150
        width:
          type: number
          description: Width of the cell in pixels
          minimum: 1
          example: 120
        height:
          type: number
          description: Height of the cell in pixels
          minimum: 1
          example: 80
        label:
          type: string
          description: Display label/text for the cell
          maxLength: 255
          example: User Authentication Process
      required:
        - id
        - shape
        - x
        - y
        - width
        - height
      additionalProperties: true

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token authentication for WebSocket connections. The token should be included
        as a query parameter named 'token' in the WebSocket connection URL since browsers
        do not support custom headers for WebSocket connections.
        
        Example: ws://localhost:8080/threat_models/123/diagrams/456/ws?token=eyJ0eXAiOiJKV1Q...
        
        The token must contain valid claims for user identification and the user must have
        at least reader permissions on the parent threat model to establish a connection.

traits:
  secured:
    description: This operation requires JWT authentication
    security:
      - jwtAuth: []
  
  rateLimited:
    description: |
      This operation is subject to rate limiting:
      - Message size limit: 4KB per message
      - Operation size limit: 50KB per operation
      - Read timeout: 60 seconds with ping/pong keepalive
      - Write timeout: 10 seconds per message

  validated:
    description: |
      This operation includes validation:
      - Operation type must be 'add', 'update', or 'remove'
      - Component IDs must be valid UUIDs
      - Required fields must be present based on operation type
      - Cell properties must meet defined constraints